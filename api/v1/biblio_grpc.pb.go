// make sure you have the protoc compiler
// and install the go plugins with
// go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
// go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
// then generate with
// protoc -I ./api/v1 --go_out=api/v1/. --go_opt=paths=source_relative --go-grpc_out=api/v1/. --go-grpc_opt=paths=source_relative api/v1/biblio.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: biblio.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Biblio_GetFile_FullMethodName                     = "/biblio.v1.Biblio/GetFile"
	Biblio_AddFile_FullMethodName                     = "/biblio.v1.Biblio/AddFile"
	Biblio_ExistsFile_FullMethodName                  = "/biblio.v1.Biblio/ExistsFile"
	Biblio_GetPublication_FullMethodName              = "/biblio.v1.Biblio/GetPublication"
	Biblio_GetAllPublications_FullMethodName          = "/biblio.v1.Biblio/GetAllPublications"
	Biblio_SearchPublications_FullMethodName          = "/biblio.v1.Biblio/SearchPublications"
	Biblio_UpdatePublication_FullMethodName           = "/biblio.v1.Biblio/UpdatePublication"
	Biblio_AddPublications_FullMethodName             = "/biblio.v1.Biblio/AddPublications"
	Biblio_ImportPublications_FullMethodName          = "/biblio.v1.Biblio/ImportPublications"
	Biblio_MutatePublications_FullMethodName          = "/biblio.v1.Biblio/MutatePublications"
	Biblio_GetPublicationHistory_FullMethodName       = "/biblio.v1.Biblio/GetPublicationHistory"
	Biblio_PurgePublication_FullMethodName            = "/biblio.v1.Biblio/PurgePublication"
	Biblio_PurgeAllPublications_FullMethodName        = "/biblio.v1.Biblio/PurgeAllPublications"
	Biblio_ValidatePublications_FullMethodName        = "/biblio.v1.Biblio/ValidatePublications"
	Biblio_ReindexPublications_FullMethodName         = "/biblio.v1.Biblio/ReindexPublications"
	Biblio_TransferPublications_FullMethodName        = "/biblio.v1.Biblio/TransferPublications"
	Biblio_CleanupPublications_FullMethodName         = "/biblio.v1.Biblio/CleanupPublications"
	Biblio_SyncPublicationContributors_FullMethodName = "/biblio.v1.Biblio/SyncPublicationContributors"
	Biblio_GetDataset_FullMethodName                  = "/biblio.v1.Biblio/GetDataset"
	Biblio_GetAllDatasets_FullMethodName              = "/biblio.v1.Biblio/GetAllDatasets"
	Biblio_SearchDatasets_FullMethodName              = "/biblio.v1.Biblio/SearchDatasets"
	Biblio_UpdateDataset_FullMethodName               = "/biblio.v1.Biblio/UpdateDataset"
	Biblio_AddDatasets_FullMethodName                 = "/biblio.v1.Biblio/AddDatasets"
	Biblio_ImportDatasets_FullMethodName              = "/biblio.v1.Biblio/ImportDatasets"
	Biblio_MutateDatasets_FullMethodName              = "/biblio.v1.Biblio/MutateDatasets"
	Biblio_GetDatasetHistory_FullMethodName           = "/biblio.v1.Biblio/GetDatasetHistory"
	Biblio_PurgeDataset_FullMethodName                = "/biblio.v1.Biblio/PurgeDataset"
	Biblio_PurgeAllDatasets_FullMethodName            = "/biblio.v1.Biblio/PurgeAllDatasets"
	Biblio_ValidateDatasets_FullMethodName            = "/biblio.v1.Biblio/ValidateDatasets"
	Biblio_ReindexDatasets_FullMethodName             = "/biblio.v1.Biblio/ReindexDatasets"
	Biblio_CleanupDatasets_FullMethodName             = "/biblio.v1.Biblio/CleanupDatasets"
	Biblio_Relate_FullMethodName                      = "/biblio.v1.Biblio/Relate"
)

// BiblioClient is the client API for Biblio service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BiblioClient interface {
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (Biblio_GetFileClient, error)
	AddFile(ctx context.Context, opts ...grpc.CallOption) (Biblio_AddFileClient, error)
	ExistsFile(ctx context.Context, in *ExistsFileRequest, opts ...grpc.CallOption) (*ExistsFileResponse, error)
	GetPublication(ctx context.Context, in *GetPublicationRequest, opts ...grpc.CallOption) (*GetPublicationResponse, error)
	GetAllPublications(ctx context.Context, in *GetAllPublicationsRequest, opts ...grpc.CallOption) (Biblio_GetAllPublicationsClient, error)
	SearchPublications(ctx context.Context, in *SearchPublicationsRequest, opts ...grpc.CallOption) (*SearchPublicationsResponse, error)
	UpdatePublication(ctx context.Context, in *UpdatePublicationRequest, opts ...grpc.CallOption) (*UpdatePublicationResponse, error)
	AddPublications(ctx context.Context, opts ...grpc.CallOption) (Biblio_AddPublicationsClient, error)
	ImportPublications(ctx context.Context, opts ...grpc.CallOption) (Biblio_ImportPublicationsClient, error)
	MutatePublications(ctx context.Context, opts ...grpc.CallOption) (Biblio_MutatePublicationsClient, error)
	GetPublicationHistory(ctx context.Context, in *GetPublicationHistoryRequest, opts ...grpc.CallOption) (Biblio_GetPublicationHistoryClient, error)
	PurgePublication(ctx context.Context, in *PurgePublicationRequest, opts ...grpc.CallOption) (*PurgePublicationResponse, error)
	PurgeAllPublications(ctx context.Context, in *PurgeAllPublicationsRequest, opts ...grpc.CallOption) (*PurgeAllPublicationsResponse, error)
	ValidatePublications(ctx context.Context, opts ...grpc.CallOption) (Biblio_ValidatePublicationsClient, error)
	ReindexPublications(ctx context.Context, in *ReindexPublicationsRequest, opts ...grpc.CallOption) (Biblio_ReindexPublicationsClient, error)
	TransferPublications(ctx context.Context, in *TransferPublicationsRequest, opts ...grpc.CallOption) (Biblio_TransferPublicationsClient, error)
	CleanupPublications(ctx context.Context, in *CleanupPublicationsRequest, opts ...grpc.CallOption) (Biblio_CleanupPublicationsClient, error)
	SyncPublicationContributors(ctx context.Context, in *SyncPublicationContributorsRequest, opts ...grpc.CallOption) (Biblio_SyncPublicationContributorsClient, error)
	GetDataset(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*GetDatasetResponse, error)
	GetAllDatasets(ctx context.Context, in *GetAllDatasetsRequest, opts ...grpc.CallOption) (Biblio_GetAllDatasetsClient, error)
	SearchDatasets(ctx context.Context, in *SearchDatasetsRequest, opts ...grpc.CallOption) (*SearchDatasetsResponse, error)
	UpdateDataset(ctx context.Context, in *UpdateDatasetRequest, opts ...grpc.CallOption) (*UpdateDatasetResponse, error)
	AddDatasets(ctx context.Context, opts ...grpc.CallOption) (Biblio_AddDatasetsClient, error)
	ImportDatasets(ctx context.Context, opts ...grpc.CallOption) (Biblio_ImportDatasetsClient, error)
	MutateDatasets(ctx context.Context, opts ...grpc.CallOption) (Biblio_MutateDatasetsClient, error)
	GetDatasetHistory(ctx context.Context, in *GetDatasetHistoryRequest, opts ...grpc.CallOption) (Biblio_GetDatasetHistoryClient, error)
	PurgeDataset(ctx context.Context, in *PurgeDatasetRequest, opts ...grpc.CallOption) (*PurgeDatasetResponse, error)
	PurgeAllDatasets(ctx context.Context, in *PurgeAllDatasetsRequest, opts ...grpc.CallOption) (*PurgeAllDatasetsResponse, error)
	ValidateDatasets(ctx context.Context, opts ...grpc.CallOption) (Biblio_ValidateDatasetsClient, error)
	ReindexDatasets(ctx context.Context, in *ReindexDatasetsRequest, opts ...grpc.CallOption) (Biblio_ReindexDatasetsClient, error)
	CleanupDatasets(ctx context.Context, in *CleanupDatasetsRequest, opts ...grpc.CallOption) (Biblio_CleanupDatasetsClient, error)
	Relate(ctx context.Context, in *RelateRequest, opts ...grpc.CallOption) (*RelateResponse, error)
}

type biblioClient struct {
	cc grpc.ClientConnInterface
}

func NewBiblioClient(cc grpc.ClientConnInterface) BiblioClient {
	return &biblioClient{cc}
}

func (c *biblioClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (Biblio_GetFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Biblio_ServiceDesc.Streams[0], Biblio_GetFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &biblioGetFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Biblio_GetFileClient interface {
	Recv() (*GetFileResponse, error)
	grpc.ClientStream
}

type biblioGetFileClient struct {
	grpc.ClientStream
}

func (x *biblioGetFileClient) Recv() (*GetFileResponse, error) {
	m := new(GetFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biblioClient) AddFile(ctx context.Context, opts ...grpc.CallOption) (Biblio_AddFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Biblio_ServiceDesc.Streams[1], Biblio_AddFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &biblioAddFileClient{stream}
	return x, nil
}

type Biblio_AddFileClient interface {
	Send(*AddFileRequest) error
	CloseAndRecv() (*AddFileResponse, error)
	grpc.ClientStream
}

type biblioAddFileClient struct {
	grpc.ClientStream
}

func (x *biblioAddFileClient) Send(m *AddFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *biblioAddFileClient) CloseAndRecv() (*AddFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biblioClient) ExistsFile(ctx context.Context, in *ExistsFileRequest, opts ...grpc.CallOption) (*ExistsFileResponse, error) {
	out := new(ExistsFileResponse)
	err := c.cc.Invoke(ctx, Biblio_ExistsFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biblioClient) GetPublication(ctx context.Context, in *GetPublicationRequest, opts ...grpc.CallOption) (*GetPublicationResponse, error) {
	out := new(GetPublicationResponse)
	err := c.cc.Invoke(ctx, Biblio_GetPublication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biblioClient) GetAllPublications(ctx context.Context, in *GetAllPublicationsRequest, opts ...grpc.CallOption) (Biblio_GetAllPublicationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Biblio_ServiceDesc.Streams[2], Biblio_GetAllPublications_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &biblioGetAllPublicationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Biblio_GetAllPublicationsClient interface {
	Recv() (*GetAllPublicationsResponse, error)
	grpc.ClientStream
}

type biblioGetAllPublicationsClient struct {
	grpc.ClientStream
}

func (x *biblioGetAllPublicationsClient) Recv() (*GetAllPublicationsResponse, error) {
	m := new(GetAllPublicationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biblioClient) SearchPublications(ctx context.Context, in *SearchPublicationsRequest, opts ...grpc.CallOption) (*SearchPublicationsResponse, error) {
	out := new(SearchPublicationsResponse)
	err := c.cc.Invoke(ctx, Biblio_SearchPublications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biblioClient) UpdatePublication(ctx context.Context, in *UpdatePublicationRequest, opts ...grpc.CallOption) (*UpdatePublicationResponse, error) {
	out := new(UpdatePublicationResponse)
	err := c.cc.Invoke(ctx, Biblio_UpdatePublication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biblioClient) AddPublications(ctx context.Context, opts ...grpc.CallOption) (Biblio_AddPublicationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Biblio_ServiceDesc.Streams[3], Biblio_AddPublications_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &biblioAddPublicationsClient{stream}
	return x, nil
}

type Biblio_AddPublicationsClient interface {
	Send(*AddPublicationsRequest) error
	Recv() (*AddPublicationsResponse, error)
	grpc.ClientStream
}

type biblioAddPublicationsClient struct {
	grpc.ClientStream
}

func (x *biblioAddPublicationsClient) Send(m *AddPublicationsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *biblioAddPublicationsClient) Recv() (*AddPublicationsResponse, error) {
	m := new(AddPublicationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biblioClient) ImportPublications(ctx context.Context, opts ...grpc.CallOption) (Biblio_ImportPublicationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Biblio_ServiceDesc.Streams[4], Biblio_ImportPublications_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &biblioImportPublicationsClient{stream}
	return x, nil
}

type Biblio_ImportPublicationsClient interface {
	Send(*ImportPublicationsRequest) error
	Recv() (*ImportPublicationsResponse, error)
	grpc.ClientStream
}

type biblioImportPublicationsClient struct {
	grpc.ClientStream
}

func (x *biblioImportPublicationsClient) Send(m *ImportPublicationsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *biblioImportPublicationsClient) Recv() (*ImportPublicationsResponse, error) {
	m := new(ImportPublicationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biblioClient) MutatePublications(ctx context.Context, opts ...grpc.CallOption) (Biblio_MutatePublicationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Biblio_ServiceDesc.Streams[5], Biblio_MutatePublications_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &biblioMutatePublicationsClient{stream}
	return x, nil
}

type Biblio_MutatePublicationsClient interface {
	Send(*MutateRequest) error
	Recv() (*MutateResponse, error)
	grpc.ClientStream
}

type biblioMutatePublicationsClient struct {
	grpc.ClientStream
}

func (x *biblioMutatePublicationsClient) Send(m *MutateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *biblioMutatePublicationsClient) Recv() (*MutateResponse, error) {
	m := new(MutateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biblioClient) GetPublicationHistory(ctx context.Context, in *GetPublicationHistoryRequest, opts ...grpc.CallOption) (Biblio_GetPublicationHistoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &Biblio_ServiceDesc.Streams[6], Biblio_GetPublicationHistory_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &biblioGetPublicationHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Biblio_GetPublicationHistoryClient interface {
	Recv() (*GetPublicationHistoryResponse, error)
	grpc.ClientStream
}

type biblioGetPublicationHistoryClient struct {
	grpc.ClientStream
}

func (x *biblioGetPublicationHistoryClient) Recv() (*GetPublicationHistoryResponse, error) {
	m := new(GetPublicationHistoryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biblioClient) PurgePublication(ctx context.Context, in *PurgePublicationRequest, opts ...grpc.CallOption) (*PurgePublicationResponse, error) {
	out := new(PurgePublicationResponse)
	err := c.cc.Invoke(ctx, Biblio_PurgePublication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biblioClient) PurgeAllPublications(ctx context.Context, in *PurgeAllPublicationsRequest, opts ...grpc.CallOption) (*PurgeAllPublicationsResponse, error) {
	out := new(PurgeAllPublicationsResponse)
	err := c.cc.Invoke(ctx, Biblio_PurgeAllPublications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biblioClient) ValidatePublications(ctx context.Context, opts ...grpc.CallOption) (Biblio_ValidatePublicationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Biblio_ServiceDesc.Streams[7], Biblio_ValidatePublications_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &biblioValidatePublicationsClient{stream}
	return x, nil
}

type Biblio_ValidatePublicationsClient interface {
	Send(*ValidatePublicationsRequest) error
	Recv() (*ValidatePublicationsResponse, error)
	grpc.ClientStream
}

type biblioValidatePublicationsClient struct {
	grpc.ClientStream
}

func (x *biblioValidatePublicationsClient) Send(m *ValidatePublicationsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *biblioValidatePublicationsClient) Recv() (*ValidatePublicationsResponse, error) {
	m := new(ValidatePublicationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biblioClient) ReindexPublications(ctx context.Context, in *ReindexPublicationsRequest, opts ...grpc.CallOption) (Biblio_ReindexPublicationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Biblio_ServiceDesc.Streams[8], Biblio_ReindexPublications_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &biblioReindexPublicationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Biblio_ReindexPublicationsClient interface {
	Recv() (*ReindexPublicationsResponse, error)
	grpc.ClientStream
}

type biblioReindexPublicationsClient struct {
	grpc.ClientStream
}

func (x *biblioReindexPublicationsClient) Recv() (*ReindexPublicationsResponse, error) {
	m := new(ReindexPublicationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biblioClient) TransferPublications(ctx context.Context, in *TransferPublicationsRequest, opts ...grpc.CallOption) (Biblio_TransferPublicationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Biblio_ServiceDesc.Streams[9], Biblio_TransferPublications_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &biblioTransferPublicationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Biblio_TransferPublicationsClient interface {
	Recv() (*TransferPublicationsResponse, error)
	grpc.ClientStream
}

type biblioTransferPublicationsClient struct {
	grpc.ClientStream
}

func (x *biblioTransferPublicationsClient) Recv() (*TransferPublicationsResponse, error) {
	m := new(TransferPublicationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biblioClient) CleanupPublications(ctx context.Context, in *CleanupPublicationsRequest, opts ...grpc.CallOption) (Biblio_CleanupPublicationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Biblio_ServiceDesc.Streams[10], Biblio_CleanupPublications_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &biblioCleanupPublicationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Biblio_CleanupPublicationsClient interface {
	Recv() (*CleanupPublicationsResponse, error)
	grpc.ClientStream
}

type biblioCleanupPublicationsClient struct {
	grpc.ClientStream
}

func (x *biblioCleanupPublicationsClient) Recv() (*CleanupPublicationsResponse, error) {
	m := new(CleanupPublicationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biblioClient) SyncPublicationContributors(ctx context.Context, in *SyncPublicationContributorsRequest, opts ...grpc.CallOption) (Biblio_SyncPublicationContributorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Biblio_ServiceDesc.Streams[11], Biblio_SyncPublicationContributors_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &biblioSyncPublicationContributorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Biblio_SyncPublicationContributorsClient interface {
	Recv() (*SyncPublicationContributorsResponse, error)
	grpc.ClientStream
}

type biblioSyncPublicationContributorsClient struct {
	grpc.ClientStream
}

func (x *biblioSyncPublicationContributorsClient) Recv() (*SyncPublicationContributorsResponse, error) {
	m := new(SyncPublicationContributorsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biblioClient) GetDataset(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*GetDatasetResponse, error) {
	out := new(GetDatasetResponse)
	err := c.cc.Invoke(ctx, Biblio_GetDataset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biblioClient) GetAllDatasets(ctx context.Context, in *GetAllDatasetsRequest, opts ...grpc.CallOption) (Biblio_GetAllDatasetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Biblio_ServiceDesc.Streams[12], Biblio_GetAllDatasets_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &biblioGetAllDatasetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Biblio_GetAllDatasetsClient interface {
	Recv() (*GetAllDatasetsResponse, error)
	grpc.ClientStream
}

type biblioGetAllDatasetsClient struct {
	grpc.ClientStream
}

func (x *biblioGetAllDatasetsClient) Recv() (*GetAllDatasetsResponse, error) {
	m := new(GetAllDatasetsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biblioClient) SearchDatasets(ctx context.Context, in *SearchDatasetsRequest, opts ...grpc.CallOption) (*SearchDatasetsResponse, error) {
	out := new(SearchDatasetsResponse)
	err := c.cc.Invoke(ctx, Biblio_SearchDatasets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biblioClient) UpdateDataset(ctx context.Context, in *UpdateDatasetRequest, opts ...grpc.CallOption) (*UpdateDatasetResponse, error) {
	out := new(UpdateDatasetResponse)
	err := c.cc.Invoke(ctx, Biblio_UpdateDataset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biblioClient) AddDatasets(ctx context.Context, opts ...grpc.CallOption) (Biblio_AddDatasetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Biblio_ServiceDesc.Streams[13], Biblio_AddDatasets_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &biblioAddDatasetsClient{stream}
	return x, nil
}

type Biblio_AddDatasetsClient interface {
	Send(*AddDatasetsRequest) error
	Recv() (*AddDatasetsResponse, error)
	grpc.ClientStream
}

type biblioAddDatasetsClient struct {
	grpc.ClientStream
}

func (x *biblioAddDatasetsClient) Send(m *AddDatasetsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *biblioAddDatasetsClient) Recv() (*AddDatasetsResponse, error) {
	m := new(AddDatasetsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biblioClient) ImportDatasets(ctx context.Context, opts ...grpc.CallOption) (Biblio_ImportDatasetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Biblio_ServiceDesc.Streams[14], Biblio_ImportDatasets_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &biblioImportDatasetsClient{stream}
	return x, nil
}

type Biblio_ImportDatasetsClient interface {
	Send(*ImportDatasetsRequest) error
	Recv() (*ImportDatasetsResponse, error)
	grpc.ClientStream
}

type biblioImportDatasetsClient struct {
	grpc.ClientStream
}

func (x *biblioImportDatasetsClient) Send(m *ImportDatasetsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *biblioImportDatasetsClient) Recv() (*ImportDatasetsResponse, error) {
	m := new(ImportDatasetsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biblioClient) MutateDatasets(ctx context.Context, opts ...grpc.CallOption) (Biblio_MutateDatasetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Biblio_ServiceDesc.Streams[15], Biblio_MutateDatasets_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &biblioMutateDatasetsClient{stream}
	return x, nil
}

type Biblio_MutateDatasetsClient interface {
	Send(*MutateRequest) error
	Recv() (*MutateResponse, error)
	grpc.ClientStream
}

type biblioMutateDatasetsClient struct {
	grpc.ClientStream
}

func (x *biblioMutateDatasetsClient) Send(m *MutateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *biblioMutateDatasetsClient) Recv() (*MutateResponse, error) {
	m := new(MutateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biblioClient) GetDatasetHistory(ctx context.Context, in *GetDatasetHistoryRequest, opts ...grpc.CallOption) (Biblio_GetDatasetHistoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &Biblio_ServiceDesc.Streams[16], Biblio_GetDatasetHistory_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &biblioGetDatasetHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Biblio_GetDatasetHistoryClient interface {
	Recv() (*GetDatasetHistoryResponse, error)
	grpc.ClientStream
}

type biblioGetDatasetHistoryClient struct {
	grpc.ClientStream
}

func (x *biblioGetDatasetHistoryClient) Recv() (*GetDatasetHistoryResponse, error) {
	m := new(GetDatasetHistoryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biblioClient) PurgeDataset(ctx context.Context, in *PurgeDatasetRequest, opts ...grpc.CallOption) (*PurgeDatasetResponse, error) {
	out := new(PurgeDatasetResponse)
	err := c.cc.Invoke(ctx, Biblio_PurgeDataset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biblioClient) PurgeAllDatasets(ctx context.Context, in *PurgeAllDatasetsRequest, opts ...grpc.CallOption) (*PurgeAllDatasetsResponse, error) {
	out := new(PurgeAllDatasetsResponse)
	err := c.cc.Invoke(ctx, Biblio_PurgeAllDatasets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biblioClient) ValidateDatasets(ctx context.Context, opts ...grpc.CallOption) (Biblio_ValidateDatasetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Biblio_ServiceDesc.Streams[17], Biblio_ValidateDatasets_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &biblioValidateDatasetsClient{stream}
	return x, nil
}

type Biblio_ValidateDatasetsClient interface {
	Send(*ValidateDatasetsRequest) error
	Recv() (*ValidateDatasetsResponse, error)
	grpc.ClientStream
}

type biblioValidateDatasetsClient struct {
	grpc.ClientStream
}

func (x *biblioValidateDatasetsClient) Send(m *ValidateDatasetsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *biblioValidateDatasetsClient) Recv() (*ValidateDatasetsResponse, error) {
	m := new(ValidateDatasetsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biblioClient) ReindexDatasets(ctx context.Context, in *ReindexDatasetsRequest, opts ...grpc.CallOption) (Biblio_ReindexDatasetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Biblio_ServiceDesc.Streams[18], Biblio_ReindexDatasets_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &biblioReindexDatasetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Biblio_ReindexDatasetsClient interface {
	Recv() (*ReindexDatasetsResponse, error)
	grpc.ClientStream
}

type biblioReindexDatasetsClient struct {
	grpc.ClientStream
}

func (x *biblioReindexDatasetsClient) Recv() (*ReindexDatasetsResponse, error) {
	m := new(ReindexDatasetsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biblioClient) CleanupDatasets(ctx context.Context, in *CleanupDatasetsRequest, opts ...grpc.CallOption) (Biblio_CleanupDatasetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Biblio_ServiceDesc.Streams[19], Biblio_CleanupDatasets_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &biblioCleanupDatasetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Biblio_CleanupDatasetsClient interface {
	Recv() (*CleanupDatasetsResponse, error)
	grpc.ClientStream
}

type biblioCleanupDatasetsClient struct {
	grpc.ClientStream
}

func (x *biblioCleanupDatasetsClient) Recv() (*CleanupDatasetsResponse, error) {
	m := new(CleanupDatasetsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biblioClient) Relate(ctx context.Context, in *RelateRequest, opts ...grpc.CallOption) (*RelateResponse, error) {
	out := new(RelateResponse)
	err := c.cc.Invoke(ctx, Biblio_Relate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BiblioServer is the server API for Biblio service.
// All implementations must embed UnimplementedBiblioServer
// for forward compatibility
type BiblioServer interface {
	GetFile(*GetFileRequest, Biblio_GetFileServer) error
	AddFile(Biblio_AddFileServer) error
	ExistsFile(context.Context, *ExistsFileRequest) (*ExistsFileResponse, error)
	GetPublication(context.Context, *GetPublicationRequest) (*GetPublicationResponse, error)
	GetAllPublications(*GetAllPublicationsRequest, Biblio_GetAllPublicationsServer) error
	SearchPublications(context.Context, *SearchPublicationsRequest) (*SearchPublicationsResponse, error)
	UpdatePublication(context.Context, *UpdatePublicationRequest) (*UpdatePublicationResponse, error)
	AddPublications(Biblio_AddPublicationsServer) error
	ImportPublications(Biblio_ImportPublicationsServer) error
	MutatePublications(Biblio_MutatePublicationsServer) error
	GetPublicationHistory(*GetPublicationHistoryRequest, Biblio_GetPublicationHistoryServer) error
	PurgePublication(context.Context, *PurgePublicationRequest) (*PurgePublicationResponse, error)
	PurgeAllPublications(context.Context, *PurgeAllPublicationsRequest) (*PurgeAllPublicationsResponse, error)
	ValidatePublications(Biblio_ValidatePublicationsServer) error
	ReindexPublications(*ReindexPublicationsRequest, Biblio_ReindexPublicationsServer) error
	TransferPublications(*TransferPublicationsRequest, Biblio_TransferPublicationsServer) error
	CleanupPublications(*CleanupPublicationsRequest, Biblio_CleanupPublicationsServer) error
	SyncPublicationContributors(*SyncPublicationContributorsRequest, Biblio_SyncPublicationContributorsServer) error
	GetDataset(context.Context, *GetDatasetRequest) (*GetDatasetResponse, error)
	GetAllDatasets(*GetAllDatasetsRequest, Biblio_GetAllDatasetsServer) error
	SearchDatasets(context.Context, *SearchDatasetsRequest) (*SearchDatasetsResponse, error)
	UpdateDataset(context.Context, *UpdateDatasetRequest) (*UpdateDatasetResponse, error)
	AddDatasets(Biblio_AddDatasetsServer) error
	ImportDatasets(Biblio_ImportDatasetsServer) error
	MutateDatasets(Biblio_MutateDatasetsServer) error
	GetDatasetHistory(*GetDatasetHistoryRequest, Biblio_GetDatasetHistoryServer) error
	PurgeDataset(context.Context, *PurgeDatasetRequest) (*PurgeDatasetResponse, error)
	PurgeAllDatasets(context.Context, *PurgeAllDatasetsRequest) (*PurgeAllDatasetsResponse, error)
	ValidateDatasets(Biblio_ValidateDatasetsServer) error
	ReindexDatasets(*ReindexDatasetsRequest, Biblio_ReindexDatasetsServer) error
	CleanupDatasets(*CleanupDatasetsRequest, Biblio_CleanupDatasetsServer) error
	Relate(context.Context, *RelateRequest) (*RelateResponse, error)
	mustEmbedUnimplementedBiblioServer()
}

// UnimplementedBiblioServer must be embedded to have forward compatible implementations.
type UnimplementedBiblioServer struct {
}

func (UnimplementedBiblioServer) GetFile(*GetFileRequest, Biblio_GetFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedBiblioServer) AddFile(Biblio_AddFileServer) error {
	return status.Errorf(codes.Unimplemented, "method AddFile not implemented")
}
func (UnimplementedBiblioServer) ExistsFile(context.Context, *ExistsFileRequest) (*ExistsFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistsFile not implemented")
}
func (UnimplementedBiblioServer) GetPublication(context.Context, *GetPublicationRequest) (*GetPublicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublication not implemented")
}
func (UnimplementedBiblioServer) GetAllPublications(*GetAllPublicationsRequest, Biblio_GetAllPublicationsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllPublications not implemented")
}
func (UnimplementedBiblioServer) SearchPublications(context.Context, *SearchPublicationsRequest) (*SearchPublicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPublications not implemented")
}
func (UnimplementedBiblioServer) UpdatePublication(context.Context, *UpdatePublicationRequest) (*UpdatePublicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePublication not implemented")
}
func (UnimplementedBiblioServer) AddPublications(Biblio_AddPublicationsServer) error {
	return status.Errorf(codes.Unimplemented, "method AddPublications not implemented")
}
func (UnimplementedBiblioServer) ImportPublications(Biblio_ImportPublicationsServer) error {
	return status.Errorf(codes.Unimplemented, "method ImportPublications not implemented")
}
func (UnimplementedBiblioServer) MutatePublications(Biblio_MutatePublicationsServer) error {
	return status.Errorf(codes.Unimplemented, "method MutatePublications not implemented")
}
func (UnimplementedBiblioServer) GetPublicationHistory(*GetPublicationHistoryRequest, Biblio_GetPublicationHistoryServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPublicationHistory not implemented")
}
func (UnimplementedBiblioServer) PurgePublication(context.Context, *PurgePublicationRequest) (*PurgePublicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgePublication not implemented")
}
func (UnimplementedBiblioServer) PurgeAllPublications(context.Context, *PurgeAllPublicationsRequest) (*PurgeAllPublicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeAllPublications not implemented")
}
func (UnimplementedBiblioServer) ValidatePublications(Biblio_ValidatePublicationsServer) error {
	return status.Errorf(codes.Unimplemented, "method ValidatePublications not implemented")
}
func (UnimplementedBiblioServer) ReindexPublications(*ReindexPublicationsRequest, Biblio_ReindexPublicationsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReindexPublications not implemented")
}
func (UnimplementedBiblioServer) TransferPublications(*TransferPublicationsRequest, Biblio_TransferPublicationsServer) error {
	return status.Errorf(codes.Unimplemented, "method TransferPublications not implemented")
}
func (UnimplementedBiblioServer) CleanupPublications(*CleanupPublicationsRequest, Biblio_CleanupPublicationsServer) error {
	return status.Errorf(codes.Unimplemented, "method CleanupPublications not implemented")
}
func (UnimplementedBiblioServer) SyncPublicationContributors(*SyncPublicationContributorsRequest, Biblio_SyncPublicationContributorsServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncPublicationContributors not implemented")
}
func (UnimplementedBiblioServer) GetDataset(context.Context, *GetDatasetRequest) (*GetDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataset not implemented")
}
func (UnimplementedBiblioServer) GetAllDatasets(*GetAllDatasetsRequest, Biblio_GetAllDatasetsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllDatasets not implemented")
}
func (UnimplementedBiblioServer) SearchDatasets(context.Context, *SearchDatasetsRequest) (*SearchDatasetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDatasets not implemented")
}
func (UnimplementedBiblioServer) UpdateDataset(context.Context, *UpdateDatasetRequest) (*UpdateDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataset not implemented")
}
func (UnimplementedBiblioServer) AddDatasets(Biblio_AddDatasetsServer) error {
	return status.Errorf(codes.Unimplemented, "method AddDatasets not implemented")
}
func (UnimplementedBiblioServer) ImportDatasets(Biblio_ImportDatasetsServer) error {
	return status.Errorf(codes.Unimplemented, "method ImportDatasets not implemented")
}
func (UnimplementedBiblioServer) MutateDatasets(Biblio_MutateDatasetsServer) error {
	return status.Errorf(codes.Unimplemented, "method MutateDatasets not implemented")
}
func (UnimplementedBiblioServer) GetDatasetHistory(*GetDatasetHistoryRequest, Biblio_GetDatasetHistoryServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDatasetHistory not implemented")
}
func (UnimplementedBiblioServer) PurgeDataset(context.Context, *PurgeDatasetRequest) (*PurgeDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeDataset not implemented")
}
func (UnimplementedBiblioServer) PurgeAllDatasets(context.Context, *PurgeAllDatasetsRequest) (*PurgeAllDatasetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeAllDatasets not implemented")
}
func (UnimplementedBiblioServer) ValidateDatasets(Biblio_ValidateDatasetsServer) error {
	return status.Errorf(codes.Unimplemented, "method ValidateDatasets not implemented")
}
func (UnimplementedBiblioServer) ReindexDatasets(*ReindexDatasetsRequest, Biblio_ReindexDatasetsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReindexDatasets not implemented")
}
func (UnimplementedBiblioServer) CleanupDatasets(*CleanupDatasetsRequest, Biblio_CleanupDatasetsServer) error {
	return status.Errorf(codes.Unimplemented, "method CleanupDatasets not implemented")
}
func (UnimplementedBiblioServer) Relate(context.Context, *RelateRequest) (*RelateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Relate not implemented")
}
func (UnimplementedBiblioServer) mustEmbedUnimplementedBiblioServer() {}

// UnsafeBiblioServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BiblioServer will
// result in compilation errors.
type UnsafeBiblioServer interface {
	mustEmbedUnimplementedBiblioServer()
}

func RegisterBiblioServer(s grpc.ServiceRegistrar, srv BiblioServer) {
	s.RegisterService(&Biblio_ServiceDesc, srv)
}

func _Biblio_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BiblioServer).GetFile(m, &biblioGetFileServer{stream})
}

type Biblio_GetFileServer interface {
	Send(*GetFileResponse) error
	grpc.ServerStream
}

type biblioGetFileServer struct {
	grpc.ServerStream
}

func (x *biblioGetFileServer) Send(m *GetFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Biblio_AddFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BiblioServer).AddFile(&biblioAddFileServer{stream})
}

type Biblio_AddFileServer interface {
	SendAndClose(*AddFileResponse) error
	Recv() (*AddFileRequest, error)
	grpc.ServerStream
}

type biblioAddFileServer struct {
	grpc.ServerStream
}

func (x *biblioAddFileServer) SendAndClose(m *AddFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *biblioAddFileServer) Recv() (*AddFileRequest, error) {
	m := new(AddFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Biblio_ExistsFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiblioServer).ExistsFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Biblio_ExistsFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiblioServer).ExistsFile(ctx, req.(*ExistsFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Biblio_GetPublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiblioServer).GetPublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Biblio_GetPublication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiblioServer).GetPublication(ctx, req.(*GetPublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Biblio_GetAllPublications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllPublicationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BiblioServer).GetAllPublications(m, &biblioGetAllPublicationsServer{stream})
}

type Biblio_GetAllPublicationsServer interface {
	Send(*GetAllPublicationsResponse) error
	grpc.ServerStream
}

type biblioGetAllPublicationsServer struct {
	grpc.ServerStream
}

func (x *biblioGetAllPublicationsServer) Send(m *GetAllPublicationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Biblio_SearchPublications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPublicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiblioServer).SearchPublications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Biblio_SearchPublications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiblioServer).SearchPublications(ctx, req.(*SearchPublicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Biblio_UpdatePublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiblioServer).UpdatePublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Biblio_UpdatePublication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiblioServer).UpdatePublication(ctx, req.(*UpdatePublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Biblio_AddPublications_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BiblioServer).AddPublications(&biblioAddPublicationsServer{stream})
}

type Biblio_AddPublicationsServer interface {
	Send(*AddPublicationsResponse) error
	Recv() (*AddPublicationsRequest, error)
	grpc.ServerStream
}

type biblioAddPublicationsServer struct {
	grpc.ServerStream
}

func (x *biblioAddPublicationsServer) Send(m *AddPublicationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *biblioAddPublicationsServer) Recv() (*AddPublicationsRequest, error) {
	m := new(AddPublicationsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Biblio_ImportPublications_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BiblioServer).ImportPublications(&biblioImportPublicationsServer{stream})
}

type Biblio_ImportPublicationsServer interface {
	Send(*ImportPublicationsResponse) error
	Recv() (*ImportPublicationsRequest, error)
	grpc.ServerStream
}

type biblioImportPublicationsServer struct {
	grpc.ServerStream
}

func (x *biblioImportPublicationsServer) Send(m *ImportPublicationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *biblioImportPublicationsServer) Recv() (*ImportPublicationsRequest, error) {
	m := new(ImportPublicationsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Biblio_MutatePublications_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BiblioServer).MutatePublications(&biblioMutatePublicationsServer{stream})
}

type Biblio_MutatePublicationsServer interface {
	Send(*MutateResponse) error
	Recv() (*MutateRequest, error)
	grpc.ServerStream
}

type biblioMutatePublicationsServer struct {
	grpc.ServerStream
}

func (x *biblioMutatePublicationsServer) Send(m *MutateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *biblioMutatePublicationsServer) Recv() (*MutateRequest, error) {
	m := new(MutateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Biblio_GetPublicationHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPublicationHistoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BiblioServer).GetPublicationHistory(m, &biblioGetPublicationHistoryServer{stream})
}

type Biblio_GetPublicationHistoryServer interface {
	Send(*GetPublicationHistoryResponse) error
	grpc.ServerStream
}

type biblioGetPublicationHistoryServer struct {
	grpc.ServerStream
}

func (x *biblioGetPublicationHistoryServer) Send(m *GetPublicationHistoryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Biblio_PurgePublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgePublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiblioServer).PurgePublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Biblio_PurgePublication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiblioServer).PurgePublication(ctx, req.(*PurgePublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Biblio_PurgeAllPublications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeAllPublicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiblioServer).PurgeAllPublications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Biblio_PurgeAllPublications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiblioServer).PurgeAllPublications(ctx, req.(*PurgeAllPublicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Biblio_ValidatePublications_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BiblioServer).ValidatePublications(&biblioValidatePublicationsServer{stream})
}

type Biblio_ValidatePublicationsServer interface {
	Send(*ValidatePublicationsResponse) error
	Recv() (*ValidatePublicationsRequest, error)
	grpc.ServerStream
}

type biblioValidatePublicationsServer struct {
	grpc.ServerStream
}

func (x *biblioValidatePublicationsServer) Send(m *ValidatePublicationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *biblioValidatePublicationsServer) Recv() (*ValidatePublicationsRequest, error) {
	m := new(ValidatePublicationsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Biblio_ReindexPublications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReindexPublicationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BiblioServer).ReindexPublications(m, &biblioReindexPublicationsServer{stream})
}

type Biblio_ReindexPublicationsServer interface {
	Send(*ReindexPublicationsResponse) error
	grpc.ServerStream
}

type biblioReindexPublicationsServer struct {
	grpc.ServerStream
}

func (x *biblioReindexPublicationsServer) Send(m *ReindexPublicationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Biblio_TransferPublications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransferPublicationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BiblioServer).TransferPublications(m, &biblioTransferPublicationsServer{stream})
}

type Biblio_TransferPublicationsServer interface {
	Send(*TransferPublicationsResponse) error
	grpc.ServerStream
}

type biblioTransferPublicationsServer struct {
	grpc.ServerStream
}

func (x *biblioTransferPublicationsServer) Send(m *TransferPublicationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Biblio_CleanupPublications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CleanupPublicationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BiblioServer).CleanupPublications(m, &biblioCleanupPublicationsServer{stream})
}

type Biblio_CleanupPublicationsServer interface {
	Send(*CleanupPublicationsResponse) error
	grpc.ServerStream
}

type biblioCleanupPublicationsServer struct {
	grpc.ServerStream
}

func (x *biblioCleanupPublicationsServer) Send(m *CleanupPublicationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Biblio_SyncPublicationContributors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncPublicationContributorsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BiblioServer).SyncPublicationContributors(m, &biblioSyncPublicationContributorsServer{stream})
}

type Biblio_SyncPublicationContributorsServer interface {
	Send(*SyncPublicationContributorsResponse) error
	grpc.ServerStream
}

type biblioSyncPublicationContributorsServer struct {
	grpc.ServerStream
}

func (x *biblioSyncPublicationContributorsServer) Send(m *SyncPublicationContributorsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Biblio_GetDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiblioServer).GetDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Biblio_GetDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiblioServer).GetDataset(ctx, req.(*GetDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Biblio_GetAllDatasets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllDatasetsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BiblioServer).GetAllDatasets(m, &biblioGetAllDatasetsServer{stream})
}

type Biblio_GetAllDatasetsServer interface {
	Send(*GetAllDatasetsResponse) error
	grpc.ServerStream
}

type biblioGetAllDatasetsServer struct {
	grpc.ServerStream
}

func (x *biblioGetAllDatasetsServer) Send(m *GetAllDatasetsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Biblio_SearchDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiblioServer).SearchDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Biblio_SearchDatasets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiblioServer).SearchDatasets(ctx, req.(*SearchDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Biblio_UpdateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiblioServer).UpdateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Biblio_UpdateDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiblioServer).UpdateDataset(ctx, req.(*UpdateDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Biblio_AddDatasets_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BiblioServer).AddDatasets(&biblioAddDatasetsServer{stream})
}

type Biblio_AddDatasetsServer interface {
	Send(*AddDatasetsResponse) error
	Recv() (*AddDatasetsRequest, error)
	grpc.ServerStream
}

type biblioAddDatasetsServer struct {
	grpc.ServerStream
}

func (x *biblioAddDatasetsServer) Send(m *AddDatasetsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *biblioAddDatasetsServer) Recv() (*AddDatasetsRequest, error) {
	m := new(AddDatasetsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Biblio_ImportDatasets_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BiblioServer).ImportDatasets(&biblioImportDatasetsServer{stream})
}

type Biblio_ImportDatasetsServer interface {
	Send(*ImportDatasetsResponse) error
	Recv() (*ImportDatasetsRequest, error)
	grpc.ServerStream
}

type biblioImportDatasetsServer struct {
	grpc.ServerStream
}

func (x *biblioImportDatasetsServer) Send(m *ImportDatasetsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *biblioImportDatasetsServer) Recv() (*ImportDatasetsRequest, error) {
	m := new(ImportDatasetsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Biblio_MutateDatasets_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BiblioServer).MutateDatasets(&biblioMutateDatasetsServer{stream})
}

type Biblio_MutateDatasetsServer interface {
	Send(*MutateResponse) error
	Recv() (*MutateRequest, error)
	grpc.ServerStream
}

type biblioMutateDatasetsServer struct {
	grpc.ServerStream
}

func (x *biblioMutateDatasetsServer) Send(m *MutateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *biblioMutateDatasetsServer) Recv() (*MutateRequest, error) {
	m := new(MutateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Biblio_GetDatasetHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDatasetHistoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BiblioServer).GetDatasetHistory(m, &biblioGetDatasetHistoryServer{stream})
}

type Biblio_GetDatasetHistoryServer interface {
	Send(*GetDatasetHistoryResponse) error
	grpc.ServerStream
}

type biblioGetDatasetHistoryServer struct {
	grpc.ServerStream
}

func (x *biblioGetDatasetHistoryServer) Send(m *GetDatasetHistoryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Biblio_PurgeDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiblioServer).PurgeDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Biblio_PurgeDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiblioServer).PurgeDataset(ctx, req.(*PurgeDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Biblio_PurgeAllDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeAllDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiblioServer).PurgeAllDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Biblio_PurgeAllDatasets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiblioServer).PurgeAllDatasets(ctx, req.(*PurgeAllDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Biblio_ValidateDatasets_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BiblioServer).ValidateDatasets(&biblioValidateDatasetsServer{stream})
}

type Biblio_ValidateDatasetsServer interface {
	Send(*ValidateDatasetsResponse) error
	Recv() (*ValidateDatasetsRequest, error)
	grpc.ServerStream
}

type biblioValidateDatasetsServer struct {
	grpc.ServerStream
}

func (x *biblioValidateDatasetsServer) Send(m *ValidateDatasetsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *biblioValidateDatasetsServer) Recv() (*ValidateDatasetsRequest, error) {
	m := new(ValidateDatasetsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Biblio_ReindexDatasets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReindexDatasetsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BiblioServer).ReindexDatasets(m, &biblioReindexDatasetsServer{stream})
}

type Biblio_ReindexDatasetsServer interface {
	Send(*ReindexDatasetsResponse) error
	grpc.ServerStream
}

type biblioReindexDatasetsServer struct {
	grpc.ServerStream
}

func (x *biblioReindexDatasetsServer) Send(m *ReindexDatasetsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Biblio_CleanupDatasets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CleanupDatasetsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BiblioServer).CleanupDatasets(m, &biblioCleanupDatasetsServer{stream})
}

type Biblio_CleanupDatasetsServer interface {
	Send(*CleanupDatasetsResponse) error
	grpc.ServerStream
}

type biblioCleanupDatasetsServer struct {
	grpc.ServerStream
}

func (x *biblioCleanupDatasetsServer) Send(m *CleanupDatasetsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Biblio_Relate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiblioServer).Relate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Biblio_Relate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiblioServer).Relate(ctx, req.(*RelateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Biblio_ServiceDesc is the grpc.ServiceDesc for Biblio service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Biblio_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "biblio.v1.Biblio",
	HandlerType: (*BiblioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExistsFile",
			Handler:    _Biblio_ExistsFile_Handler,
		},
		{
			MethodName: "GetPublication",
			Handler:    _Biblio_GetPublication_Handler,
		},
		{
			MethodName: "SearchPublications",
			Handler:    _Biblio_SearchPublications_Handler,
		},
		{
			MethodName: "UpdatePublication",
			Handler:    _Biblio_UpdatePublication_Handler,
		},
		{
			MethodName: "PurgePublication",
			Handler:    _Biblio_PurgePublication_Handler,
		},
		{
			MethodName: "PurgeAllPublications",
			Handler:    _Biblio_PurgeAllPublications_Handler,
		},
		{
			MethodName: "GetDataset",
			Handler:    _Biblio_GetDataset_Handler,
		},
		{
			MethodName: "SearchDatasets",
			Handler:    _Biblio_SearchDatasets_Handler,
		},
		{
			MethodName: "UpdateDataset",
			Handler:    _Biblio_UpdateDataset_Handler,
		},
		{
			MethodName: "PurgeDataset",
			Handler:    _Biblio_PurgeDataset_Handler,
		},
		{
			MethodName: "PurgeAllDatasets",
			Handler:    _Biblio_PurgeAllDatasets_Handler,
		},
		{
			MethodName: "Relate",
			Handler:    _Biblio_Relate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFile",
			Handler:       _Biblio_GetFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddFile",
			Handler:       _Biblio_AddFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetAllPublications",
			Handler:       _Biblio_GetAllPublications_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddPublications",
			Handler:       _Biblio_AddPublications_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ImportPublications",
			Handler:       _Biblio_ImportPublications_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "MutatePublications",
			Handler:       _Biblio_MutatePublications_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetPublicationHistory",
			Handler:       _Biblio_GetPublicationHistory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ValidatePublications",
			Handler:       _Biblio_ValidatePublications_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReindexPublications",
			Handler:       _Biblio_ReindexPublications_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TransferPublications",
			Handler:       _Biblio_TransferPublications_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CleanupPublications",
			Handler:       _Biblio_CleanupPublications_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SyncPublicationContributors",
			Handler:       _Biblio_SyncPublicationContributors_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllDatasets",
			Handler:       _Biblio_GetAllDatasets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddDatasets",
			Handler:       _Biblio_AddDatasets_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ImportDatasets",
			Handler:       _Biblio_ImportDatasets_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "MutateDatasets",
			Handler:       _Biblio_MutateDatasets_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetDatasetHistory",
			Handler:       _Biblio_GetDatasetHistory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ValidateDatasets",
			Handler:       _Biblio_ValidateDatasets_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReindexDatasets",
			Handler:       _Biblio_ReindexDatasets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CleanupDatasets",
			Handler:       _Biblio_CleanupDatasets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "biblio.proto",
}
