// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: api/v1/biblio.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BiblioClient is the client API for Biblio service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BiblioClient interface {
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (Biblio_GetFileClient, error)
	AddFile(ctx context.Context, opts ...grpc.CallOption) (Biblio_AddFileClient, error)
	GetPublication(ctx context.Context, in *GetPublicationRequest, opts ...grpc.CallOption) (*GetPublicationResponse, error)
	GetAllPublications(ctx context.Context, in *GetAllPublicationsRequest, opts ...grpc.CallOption) (Biblio_GetAllPublicationsClient, error)
	SearchPublications(ctx context.Context, in *SearchPublicationsRequest, opts ...grpc.CallOption) (*SearchPublicationsResponse, error)
	UpdatePublication(ctx context.Context, in *UpdatePublicationRequest, opts ...grpc.CallOption) (*UpdatePublicationResponse, error)
	AddPublications(ctx context.Context, opts ...grpc.CallOption) (Biblio_AddPublicationsClient, error)
	PurgePublication(ctx context.Context, in *PurgePublicationRequest, opts ...grpc.CallOption) (*PurgePublicationResponse, error)
	PurgeAllPublications(ctx context.Context, in *PurgeAllPublicationsRequest, opts ...grpc.CallOption) (*PurgeAllPublicationsResponse, error)
	GetDataset(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*GetDatasetResponse, error)
	GetAllDatasets(ctx context.Context, in *GetAllDatasetsRequest, opts ...grpc.CallOption) (Biblio_GetAllDatasetsClient, error)
	SearchDatasets(ctx context.Context, in *SearchDatasetsRequest, opts ...grpc.CallOption) (*SearchDatasetsResponse, error)
	UpdateDataset(ctx context.Context, in *UpdateDatasetRequest, opts ...grpc.CallOption) (*UpdateDatasetResponse, error)
	AddDatasets(ctx context.Context, opts ...grpc.CallOption) (Biblio_AddDatasetsClient, error)
	PurgeDataset(ctx context.Context, in *PurgeDatasetRequest, opts ...grpc.CallOption) (*PurgeDatasetResponse, error)
	PurgeAllDatasets(ctx context.Context, in *PurgeAllDatasetsRequest, opts ...grpc.CallOption) (*PurgeAllDatasetsResponse, error)
}

type biblioClient struct {
	cc grpc.ClientConnInterface
}

func NewBiblioClient(cc grpc.ClientConnInterface) BiblioClient {
	return &biblioClient{cc}
}

func (c *biblioClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (Biblio_GetFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Biblio_ServiceDesc.Streams[0], "/biblio.v1.Biblio/GetFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &biblioGetFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Biblio_GetFileClient interface {
	Recv() (*GetFileResponse, error)
	grpc.ClientStream
}

type biblioGetFileClient struct {
	grpc.ClientStream
}

func (x *biblioGetFileClient) Recv() (*GetFileResponse, error) {
	m := new(GetFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biblioClient) AddFile(ctx context.Context, opts ...grpc.CallOption) (Biblio_AddFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Biblio_ServiceDesc.Streams[1], "/biblio.v1.Biblio/AddFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &biblioAddFileClient{stream}
	return x, nil
}

type Biblio_AddFileClient interface {
	Send(*AddFileRequest) error
	CloseAndRecv() (*AddFileResponse, error)
	grpc.ClientStream
}

type biblioAddFileClient struct {
	grpc.ClientStream
}

func (x *biblioAddFileClient) Send(m *AddFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *biblioAddFileClient) CloseAndRecv() (*AddFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biblioClient) GetPublication(ctx context.Context, in *GetPublicationRequest, opts ...grpc.CallOption) (*GetPublicationResponse, error) {
	out := new(GetPublicationResponse)
	err := c.cc.Invoke(ctx, "/biblio.v1.Biblio/GetPublication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biblioClient) GetAllPublications(ctx context.Context, in *GetAllPublicationsRequest, opts ...grpc.CallOption) (Biblio_GetAllPublicationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Biblio_ServiceDesc.Streams[2], "/biblio.v1.Biblio/GetAllPublications", opts...)
	if err != nil {
		return nil, err
	}
	x := &biblioGetAllPublicationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Biblio_GetAllPublicationsClient interface {
	Recv() (*GetAllPublicationsResponse, error)
	grpc.ClientStream
}

type biblioGetAllPublicationsClient struct {
	grpc.ClientStream
}

func (x *biblioGetAllPublicationsClient) Recv() (*GetAllPublicationsResponse, error) {
	m := new(GetAllPublicationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biblioClient) SearchPublications(ctx context.Context, in *SearchPublicationsRequest, opts ...grpc.CallOption) (*SearchPublicationsResponse, error) {
	out := new(SearchPublicationsResponse)
	err := c.cc.Invoke(ctx, "/biblio.v1.Biblio/SearchPublications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biblioClient) UpdatePublication(ctx context.Context, in *UpdatePublicationRequest, opts ...grpc.CallOption) (*UpdatePublicationResponse, error) {
	out := new(UpdatePublicationResponse)
	err := c.cc.Invoke(ctx, "/biblio.v1.Biblio/UpdatePublication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biblioClient) AddPublications(ctx context.Context, opts ...grpc.CallOption) (Biblio_AddPublicationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Biblio_ServiceDesc.Streams[3], "/biblio.v1.Biblio/AddPublications", opts...)
	if err != nil {
		return nil, err
	}
	x := &biblioAddPublicationsClient{stream}
	return x, nil
}

type Biblio_AddPublicationsClient interface {
	Send(*AddPublicationsRequest) error
	Recv() (*AddPublicationsResponse, error)
	grpc.ClientStream
}

type biblioAddPublicationsClient struct {
	grpc.ClientStream
}

func (x *biblioAddPublicationsClient) Send(m *AddPublicationsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *biblioAddPublicationsClient) Recv() (*AddPublicationsResponse, error) {
	m := new(AddPublicationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biblioClient) PurgePublication(ctx context.Context, in *PurgePublicationRequest, opts ...grpc.CallOption) (*PurgePublicationResponse, error) {
	out := new(PurgePublicationResponse)
	err := c.cc.Invoke(ctx, "/biblio.v1.Biblio/PurgePublication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biblioClient) PurgeAllPublications(ctx context.Context, in *PurgeAllPublicationsRequest, opts ...grpc.CallOption) (*PurgeAllPublicationsResponse, error) {
	out := new(PurgeAllPublicationsResponse)
	err := c.cc.Invoke(ctx, "/biblio.v1.Biblio/PurgeAllPublications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biblioClient) GetDataset(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*GetDatasetResponse, error) {
	out := new(GetDatasetResponse)
	err := c.cc.Invoke(ctx, "/biblio.v1.Biblio/GetDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biblioClient) GetAllDatasets(ctx context.Context, in *GetAllDatasetsRequest, opts ...grpc.CallOption) (Biblio_GetAllDatasetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Biblio_ServiceDesc.Streams[4], "/biblio.v1.Biblio/GetAllDatasets", opts...)
	if err != nil {
		return nil, err
	}
	x := &biblioGetAllDatasetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Biblio_GetAllDatasetsClient interface {
	Recv() (*GetAllDatasetsResponse, error)
	grpc.ClientStream
}

type biblioGetAllDatasetsClient struct {
	grpc.ClientStream
}

func (x *biblioGetAllDatasetsClient) Recv() (*GetAllDatasetsResponse, error) {
	m := new(GetAllDatasetsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biblioClient) SearchDatasets(ctx context.Context, in *SearchDatasetsRequest, opts ...grpc.CallOption) (*SearchDatasetsResponse, error) {
	out := new(SearchDatasetsResponse)
	err := c.cc.Invoke(ctx, "/biblio.v1.Biblio/SearchDatasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biblioClient) UpdateDataset(ctx context.Context, in *UpdateDatasetRequest, opts ...grpc.CallOption) (*UpdateDatasetResponse, error) {
	out := new(UpdateDatasetResponse)
	err := c.cc.Invoke(ctx, "/biblio.v1.Biblio/UpdateDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biblioClient) AddDatasets(ctx context.Context, opts ...grpc.CallOption) (Biblio_AddDatasetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Biblio_ServiceDesc.Streams[5], "/biblio.v1.Biblio/AddDatasets", opts...)
	if err != nil {
		return nil, err
	}
	x := &biblioAddDatasetsClient{stream}
	return x, nil
}

type Biblio_AddDatasetsClient interface {
	Send(*AddDatasetsRequest) error
	Recv() (*AddDatasetsResponse, error)
	grpc.ClientStream
}

type biblioAddDatasetsClient struct {
	grpc.ClientStream
}

func (x *biblioAddDatasetsClient) Send(m *AddDatasetsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *biblioAddDatasetsClient) Recv() (*AddDatasetsResponse, error) {
	m := new(AddDatasetsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biblioClient) PurgeDataset(ctx context.Context, in *PurgeDatasetRequest, opts ...grpc.CallOption) (*PurgeDatasetResponse, error) {
	out := new(PurgeDatasetResponse)
	err := c.cc.Invoke(ctx, "/biblio.v1.Biblio/PurgeDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biblioClient) PurgeAllDatasets(ctx context.Context, in *PurgeAllDatasetsRequest, opts ...grpc.CallOption) (*PurgeAllDatasetsResponse, error) {
	out := new(PurgeAllDatasetsResponse)
	err := c.cc.Invoke(ctx, "/biblio.v1.Biblio/PurgeAllDatasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BiblioServer is the server API for Biblio service.
// All implementations must embed UnimplementedBiblioServer
// for forward compatibility
type BiblioServer interface {
	GetFile(*GetFileRequest, Biblio_GetFileServer) error
	AddFile(Biblio_AddFileServer) error
	GetPublication(context.Context, *GetPublicationRequest) (*GetPublicationResponse, error)
	GetAllPublications(*GetAllPublicationsRequest, Biblio_GetAllPublicationsServer) error
	SearchPublications(context.Context, *SearchPublicationsRequest) (*SearchPublicationsResponse, error)
	UpdatePublication(context.Context, *UpdatePublicationRequest) (*UpdatePublicationResponse, error)
	AddPublications(Biblio_AddPublicationsServer) error
	PurgePublication(context.Context, *PurgePublicationRequest) (*PurgePublicationResponse, error)
	PurgeAllPublications(context.Context, *PurgeAllPublicationsRequest) (*PurgeAllPublicationsResponse, error)
	GetDataset(context.Context, *GetDatasetRequest) (*GetDatasetResponse, error)
	GetAllDatasets(*GetAllDatasetsRequest, Biblio_GetAllDatasetsServer) error
	SearchDatasets(context.Context, *SearchDatasetsRequest) (*SearchDatasetsResponse, error)
	UpdateDataset(context.Context, *UpdateDatasetRequest) (*UpdateDatasetResponse, error)
	AddDatasets(Biblio_AddDatasetsServer) error
	PurgeDataset(context.Context, *PurgeDatasetRequest) (*PurgeDatasetResponse, error)
	PurgeAllDatasets(context.Context, *PurgeAllDatasetsRequest) (*PurgeAllDatasetsResponse, error)
	mustEmbedUnimplementedBiblioServer()
}

// UnimplementedBiblioServer must be embedded to have forward compatible implementations.
type UnimplementedBiblioServer struct {
}

func (UnimplementedBiblioServer) GetFile(*GetFileRequest, Biblio_GetFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedBiblioServer) AddFile(Biblio_AddFileServer) error {
	return status.Errorf(codes.Unimplemented, "method AddFile not implemented")
}
func (UnimplementedBiblioServer) GetPublication(context.Context, *GetPublicationRequest) (*GetPublicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublication not implemented")
}
func (UnimplementedBiblioServer) GetAllPublications(*GetAllPublicationsRequest, Biblio_GetAllPublicationsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllPublications not implemented")
}
func (UnimplementedBiblioServer) SearchPublications(context.Context, *SearchPublicationsRequest) (*SearchPublicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPublications not implemented")
}
func (UnimplementedBiblioServer) UpdatePublication(context.Context, *UpdatePublicationRequest) (*UpdatePublicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePublication not implemented")
}
func (UnimplementedBiblioServer) AddPublications(Biblio_AddPublicationsServer) error {
	return status.Errorf(codes.Unimplemented, "method AddPublications not implemented")
}
func (UnimplementedBiblioServer) PurgePublication(context.Context, *PurgePublicationRequest) (*PurgePublicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgePublication not implemented")
}
func (UnimplementedBiblioServer) PurgeAllPublications(context.Context, *PurgeAllPublicationsRequest) (*PurgeAllPublicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeAllPublications not implemented")
}
func (UnimplementedBiblioServer) GetDataset(context.Context, *GetDatasetRequest) (*GetDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataset not implemented")
}
func (UnimplementedBiblioServer) GetAllDatasets(*GetAllDatasetsRequest, Biblio_GetAllDatasetsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllDatasets not implemented")
}
func (UnimplementedBiblioServer) SearchDatasets(context.Context, *SearchDatasetsRequest) (*SearchDatasetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDatasets not implemented")
}
func (UnimplementedBiblioServer) UpdateDataset(context.Context, *UpdateDatasetRequest) (*UpdateDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataset not implemented")
}
func (UnimplementedBiblioServer) AddDatasets(Biblio_AddDatasetsServer) error {
	return status.Errorf(codes.Unimplemented, "method AddDatasets not implemented")
}
func (UnimplementedBiblioServer) PurgeDataset(context.Context, *PurgeDatasetRequest) (*PurgeDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeDataset not implemented")
}
func (UnimplementedBiblioServer) PurgeAllDatasets(context.Context, *PurgeAllDatasetsRequest) (*PurgeAllDatasetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeAllDatasets not implemented")
}
func (UnimplementedBiblioServer) mustEmbedUnimplementedBiblioServer() {}

// UnsafeBiblioServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BiblioServer will
// result in compilation errors.
type UnsafeBiblioServer interface {
	mustEmbedUnimplementedBiblioServer()
}

func RegisterBiblioServer(s grpc.ServiceRegistrar, srv BiblioServer) {
	s.RegisterService(&Biblio_ServiceDesc, srv)
}

func _Biblio_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BiblioServer).GetFile(m, &biblioGetFileServer{stream})
}

type Biblio_GetFileServer interface {
	Send(*GetFileResponse) error
	grpc.ServerStream
}

type biblioGetFileServer struct {
	grpc.ServerStream
}

func (x *biblioGetFileServer) Send(m *GetFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Biblio_AddFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BiblioServer).AddFile(&biblioAddFileServer{stream})
}

type Biblio_AddFileServer interface {
	SendAndClose(*AddFileResponse) error
	Recv() (*AddFileRequest, error)
	grpc.ServerStream
}

type biblioAddFileServer struct {
	grpc.ServerStream
}

func (x *biblioAddFileServer) SendAndClose(m *AddFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *biblioAddFileServer) Recv() (*AddFileRequest, error) {
	m := new(AddFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Biblio_GetPublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiblioServer).GetPublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biblio.v1.Biblio/GetPublication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiblioServer).GetPublication(ctx, req.(*GetPublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Biblio_GetAllPublications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllPublicationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BiblioServer).GetAllPublications(m, &biblioGetAllPublicationsServer{stream})
}

type Biblio_GetAllPublicationsServer interface {
	Send(*GetAllPublicationsResponse) error
	grpc.ServerStream
}

type biblioGetAllPublicationsServer struct {
	grpc.ServerStream
}

func (x *biblioGetAllPublicationsServer) Send(m *GetAllPublicationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Biblio_SearchPublications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPublicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiblioServer).SearchPublications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biblio.v1.Biblio/SearchPublications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiblioServer).SearchPublications(ctx, req.(*SearchPublicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Biblio_UpdatePublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiblioServer).UpdatePublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biblio.v1.Biblio/UpdatePublication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiblioServer).UpdatePublication(ctx, req.(*UpdatePublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Biblio_AddPublications_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BiblioServer).AddPublications(&biblioAddPublicationsServer{stream})
}

type Biblio_AddPublicationsServer interface {
	Send(*AddPublicationsResponse) error
	Recv() (*AddPublicationsRequest, error)
	grpc.ServerStream
}

type biblioAddPublicationsServer struct {
	grpc.ServerStream
}

func (x *biblioAddPublicationsServer) Send(m *AddPublicationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *biblioAddPublicationsServer) Recv() (*AddPublicationsRequest, error) {
	m := new(AddPublicationsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Biblio_PurgePublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgePublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiblioServer).PurgePublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biblio.v1.Biblio/PurgePublication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiblioServer).PurgePublication(ctx, req.(*PurgePublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Biblio_PurgeAllPublications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeAllPublicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiblioServer).PurgeAllPublications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biblio.v1.Biblio/PurgeAllPublications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiblioServer).PurgeAllPublications(ctx, req.(*PurgeAllPublicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Biblio_GetDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiblioServer).GetDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biblio.v1.Biblio/GetDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiblioServer).GetDataset(ctx, req.(*GetDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Biblio_GetAllDatasets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllDatasetsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BiblioServer).GetAllDatasets(m, &biblioGetAllDatasetsServer{stream})
}

type Biblio_GetAllDatasetsServer interface {
	Send(*GetAllDatasetsResponse) error
	grpc.ServerStream
}

type biblioGetAllDatasetsServer struct {
	grpc.ServerStream
}

func (x *biblioGetAllDatasetsServer) Send(m *GetAllDatasetsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Biblio_SearchDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiblioServer).SearchDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biblio.v1.Biblio/SearchDatasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiblioServer).SearchDatasets(ctx, req.(*SearchDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Biblio_UpdateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiblioServer).UpdateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biblio.v1.Biblio/UpdateDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiblioServer).UpdateDataset(ctx, req.(*UpdateDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Biblio_AddDatasets_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BiblioServer).AddDatasets(&biblioAddDatasetsServer{stream})
}

type Biblio_AddDatasetsServer interface {
	Send(*AddDatasetsResponse) error
	Recv() (*AddDatasetsRequest, error)
	grpc.ServerStream
}

type biblioAddDatasetsServer struct {
	grpc.ServerStream
}

func (x *biblioAddDatasetsServer) Send(m *AddDatasetsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *biblioAddDatasetsServer) Recv() (*AddDatasetsRequest, error) {
	m := new(AddDatasetsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Biblio_PurgeDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiblioServer).PurgeDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biblio.v1.Biblio/PurgeDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiblioServer).PurgeDataset(ctx, req.(*PurgeDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Biblio_PurgeAllDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeAllDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiblioServer).PurgeAllDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biblio.v1.Biblio/PurgeAllDatasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiblioServer).PurgeAllDatasets(ctx, req.(*PurgeAllDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Biblio_ServiceDesc is the grpc.ServiceDesc for Biblio service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Biblio_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "biblio.v1.Biblio",
	HandlerType: (*BiblioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPublication",
			Handler:    _Biblio_GetPublication_Handler,
		},
		{
			MethodName: "SearchPublications",
			Handler:    _Biblio_SearchPublications_Handler,
		},
		{
			MethodName: "UpdatePublication",
			Handler:    _Biblio_UpdatePublication_Handler,
		},
		{
			MethodName: "PurgePublication",
			Handler:    _Biblio_PurgePublication_Handler,
		},
		{
			MethodName: "PurgeAllPublications",
			Handler:    _Biblio_PurgeAllPublications_Handler,
		},
		{
			MethodName: "GetDataset",
			Handler:    _Biblio_GetDataset_Handler,
		},
		{
			MethodName: "SearchDatasets",
			Handler:    _Biblio_SearchDatasets_Handler,
		},
		{
			MethodName: "UpdateDataset",
			Handler:    _Biblio_UpdateDataset_Handler,
		},
		{
			MethodName: "PurgeDataset",
			Handler:    _Biblio_PurgeDataset_Handler,
		},
		{
			MethodName: "PurgeAllDatasets",
			Handler:    _Biblio_PurgeAllDatasets_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFile",
			Handler:       _Biblio_GetFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddFile",
			Handler:       _Biblio_AddFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetAllPublications",
			Handler:       _Biblio_GetAllPublications_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddPublications",
			Handler:       _Biblio_AddPublications_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetAllDatasets",
			Handler:       _Biblio_GetAllDatasets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddDatasets",
			Handler:       _Biblio_AddDatasets_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/v1/biblio.proto",
}
