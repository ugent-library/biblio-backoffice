// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: api/v1/biblio.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BiblioClient is the client API for Biblio service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BiblioClient interface {
	GetPublication(ctx context.Context, in *GetPublicationRequest, opts ...grpc.CallOption) (*GetPublicationResponse, error)
	GetAllPublications(ctx context.Context, in *GetAllPublicationsRequest, opts ...grpc.CallOption) (Biblio_GetAllPublicationsClient, error)
	UpdatePublication(ctx context.Context, in *UpdatePublicationRequest, opts ...grpc.CallOption) (*UpdatePublicationResponse, error)
}

type biblioClient struct {
	cc grpc.ClientConnInterface
}

func NewBiblioClient(cc grpc.ClientConnInterface) BiblioClient {
	return &biblioClient{cc}
}

func (c *biblioClient) GetPublication(ctx context.Context, in *GetPublicationRequest, opts ...grpc.CallOption) (*GetPublicationResponse, error) {
	out := new(GetPublicationResponse)
	err := c.cc.Invoke(ctx, "/biblio.v1.Biblio/GetPublication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biblioClient) GetAllPublications(ctx context.Context, in *GetAllPublicationsRequest, opts ...grpc.CallOption) (Biblio_GetAllPublicationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Biblio_ServiceDesc.Streams[0], "/biblio.v1.Biblio/GetAllPublications", opts...)
	if err != nil {
		return nil, err
	}
	x := &biblioGetAllPublicationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Biblio_GetAllPublicationsClient interface {
	Recv() (*GetAllPublicationsResponse, error)
	grpc.ClientStream
}

type biblioGetAllPublicationsClient struct {
	grpc.ClientStream
}

func (x *biblioGetAllPublicationsClient) Recv() (*GetAllPublicationsResponse, error) {
	m := new(GetAllPublicationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biblioClient) UpdatePublication(ctx context.Context, in *UpdatePublicationRequest, opts ...grpc.CallOption) (*UpdatePublicationResponse, error) {
	out := new(UpdatePublicationResponse)
	err := c.cc.Invoke(ctx, "/biblio.v1.Biblio/UpdatePublication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BiblioServer is the server API for Biblio service.
// All implementations must embed UnimplementedBiblioServer
// for forward compatibility
type BiblioServer interface {
	GetPublication(context.Context, *GetPublicationRequest) (*GetPublicationResponse, error)
	GetAllPublications(*GetAllPublicationsRequest, Biblio_GetAllPublicationsServer) error
	UpdatePublication(context.Context, *UpdatePublicationRequest) (*UpdatePublicationResponse, error)
	mustEmbedUnimplementedBiblioServer()
}

// UnimplementedBiblioServer must be embedded to have forward compatible implementations.
type UnimplementedBiblioServer struct {
}

func (UnimplementedBiblioServer) GetPublication(context.Context, *GetPublicationRequest) (*GetPublicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublication not implemented")
}
func (UnimplementedBiblioServer) GetAllPublications(*GetAllPublicationsRequest, Biblio_GetAllPublicationsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllPublications not implemented")
}
func (UnimplementedBiblioServer) UpdatePublication(context.Context, *UpdatePublicationRequest) (*UpdatePublicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePublication not implemented")
}
func (UnimplementedBiblioServer) mustEmbedUnimplementedBiblioServer() {}

// UnsafeBiblioServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BiblioServer will
// result in compilation errors.
type UnsafeBiblioServer interface {
	mustEmbedUnimplementedBiblioServer()
}

func RegisterBiblioServer(s grpc.ServiceRegistrar, srv BiblioServer) {
	s.RegisterService(&Biblio_ServiceDesc, srv)
}

func _Biblio_GetPublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiblioServer).GetPublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biblio.v1.Biblio/GetPublication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiblioServer).GetPublication(ctx, req.(*GetPublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Biblio_GetAllPublications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllPublicationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BiblioServer).GetAllPublications(m, &biblioGetAllPublicationsServer{stream})
}

type Biblio_GetAllPublicationsServer interface {
	Send(*GetAllPublicationsResponse) error
	grpc.ServerStream
}

type biblioGetAllPublicationsServer struct {
	grpc.ServerStream
}

func (x *biblioGetAllPublicationsServer) Send(m *GetAllPublicationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Biblio_UpdatePublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiblioServer).UpdatePublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biblio.v1.Biblio/UpdatePublication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiblioServer).UpdatePublication(ctx, req.(*UpdatePublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Biblio_ServiceDesc is the grpc.ServiceDesc for Biblio service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Biblio_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "biblio.v1.Biblio",
	HandlerType: (*BiblioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPublication",
			Handler:    _Biblio_GetPublication_Handler,
		},
		{
			MethodName: "UpdatePublication",
			Handler:    _Biblio_UpdatePublication_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllPublications",
			Handler:       _Biblio_GetAllPublications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/biblio.proto",
}
