// make sure you have the protoc compiler
// and install the go plugins with
// go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
// go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
// then generate with
// protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative api/v1/biblio.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: api/v1/biblio.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Confirmation int32

const (
	Confirmation_CONFIRMATION_YES       Confirmation = 0
	Confirmation_CONFIRMATION_NO        Confirmation = 1
	Confirmation_CONFIRMATION_DONT_KNOW Confirmation = 2
)

// Enum value maps for Confirmation.
var (
	Confirmation_name = map[int32]string{
		0: "CONFIRMATION_YES",
		1: "CONFIRMATION_NO",
		2: "CONFIRMATION_DONT_KNOW",
	}
	Confirmation_value = map[string]int32{
		"CONFIRMATION_YES":       0,
		"CONFIRMATION_NO":        1,
		"CONFIRMATION_DONT_KNOW": 2,
	}
)

func (x Confirmation) Enum() *Confirmation {
	p := new(Confirmation)
	*p = x
	return p
}

func (x Confirmation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Confirmation) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_biblio_proto_enumTypes[0].Descriptor()
}

func (Confirmation) Type() protoreflect.EnumType {
	return &file_api_v1_biblio_proto_enumTypes[0]
}

func (x Confirmation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Confirmation.Descriptor instead.
func (Confirmation) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{0}
}

type Link_Relation int32

const (
	Link_RELATION_DATA_MANAGEMENT_PLAN Link_Relation = 0
	Link_RELATION_HOME_PAGE            Link_Relation = 1
	Link_RELATION_PEER_REVIEW_REPORT   Link_Relation = 2
	Link_RELATION_RELATED_INFORMATION  Link_Relation = 3
	Link_RELATION_SOFTWARE             Link_Relation = 4
	Link_RELATION_TABLE_OF_CONTENTS    Link_Relation = 5
	Link_RELATION_MAIN_FILE            Link_Relation = 6
)

// Enum value maps for Link_Relation.
var (
	Link_Relation_name = map[int32]string{
		0: "RELATION_DATA_MANAGEMENT_PLAN",
		1: "RELATION_HOME_PAGE",
		2: "RELATION_PEER_REVIEW_REPORT",
		3: "RELATION_RELATED_INFORMATION",
		4: "RELATION_SOFTWARE",
		5: "RELATION_TABLE_OF_CONTENTS",
		6: "RELATION_MAIN_FILE",
	}
	Link_Relation_value = map[string]int32{
		"RELATION_DATA_MANAGEMENT_PLAN": 0,
		"RELATION_HOME_PAGE":            1,
		"RELATION_PEER_REVIEW_REPORT":   2,
		"RELATION_RELATED_INFORMATION":  3,
		"RELATION_SOFTWARE":             4,
		"RELATION_TABLE_OF_CONTENTS":    5,
		"RELATION_MAIN_FILE":            6,
	}
)

func (x Link_Relation) Enum() *Link_Relation {
	p := new(Link_Relation)
	*p = x
	return p
}

func (x Link_Relation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Link_Relation) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_biblio_proto_enumTypes[1].Descriptor()
}

func (Link_Relation) Type() protoreflect.EnumType {
	return &file_api_v1_biblio_proto_enumTypes[1]
}

func (x Link_Relation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Link_Relation.Descriptor instead.
func (Link_Relation) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{7, 0}
}

type File_AccessLevel int32

const (
	File_ACCESS_LEVEL_OPEN_ACCESS File_AccessLevel = 0
	File_ACCESS_LEVEL_LOCAL       File_AccessLevel = 1
	File_ACCESS_LEVEL_CLOSED      File_AccessLevel = 2
)

// Enum value maps for File_AccessLevel.
var (
	File_AccessLevel_name = map[int32]string{
		0: "ACCESS_LEVEL_OPEN_ACCESS",
		1: "ACCESS_LEVEL_LOCAL",
		2: "ACCESS_LEVEL_CLOSED",
	}
	File_AccessLevel_value = map[string]int32{
		"ACCESS_LEVEL_OPEN_ACCESS": 0,
		"ACCESS_LEVEL_LOCAL":       1,
		"ACCESS_LEVEL_CLOSED":      2,
	}
)

func (x File_AccessLevel) Enum() *File_AccessLevel {
	p := new(File_AccessLevel)
	*p = x
	return p
}

func (x File_AccessLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (File_AccessLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_biblio_proto_enumTypes[2].Descriptor()
}

func (File_AccessLevel) Type() protoreflect.EnumType {
	return &file_api_v1_biblio_proto_enumTypes[2]
}

func (x File_AccessLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use File_AccessLevel.Descriptor instead.
func (File_AccessLevel) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{8, 0}
}

type File_PublicationVersion int32

const (
	File_PUBLICATION_VERSION_PUBLISHED_VERSION File_PublicationVersion = 0
	File_PUBLICATION_VERSION_AUTHOR_VERSION    File_PublicationVersion = 1
	File_PUBLICATION_VERSION_ACCEPTED_VERSION  File_PublicationVersion = 2
	File_PUBLICATION_VERSION_UPDATED_VERSION   File_PublicationVersion = 3
)

// Enum value maps for File_PublicationVersion.
var (
	File_PublicationVersion_name = map[int32]string{
		0: "PUBLICATION_VERSION_PUBLISHED_VERSION",
		1: "PUBLICATION_VERSION_AUTHOR_VERSION",
		2: "PUBLICATION_VERSION_ACCEPTED_VERSION",
		3: "PUBLICATION_VERSION_UPDATED_VERSION",
	}
	File_PublicationVersion_value = map[string]int32{
		"PUBLICATION_VERSION_PUBLISHED_VERSION": 0,
		"PUBLICATION_VERSION_AUTHOR_VERSION":    1,
		"PUBLICATION_VERSION_ACCEPTED_VERSION":  2,
		"PUBLICATION_VERSION_UPDATED_VERSION":   3,
	}
)

func (x File_PublicationVersion) Enum() *File_PublicationVersion {
	p := new(File_PublicationVersion)
	*p = x
	return p
}

func (x File_PublicationVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (File_PublicationVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_biblio_proto_enumTypes[3].Descriptor()
}

func (File_PublicationVersion) Type() protoreflect.EnumType {
	return &file_api_v1_biblio_proto_enumTypes[3]
}

func (x File_PublicationVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use File_PublicationVersion.Descriptor instead.
func (File_PublicationVersion) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{8, 1}
}

type File_Relation int32

const (
	File_RELATION_MAIN_FILE          File_Relation = 0
	File_RELATION_COLOPHON           File_Relation = 1
	File_RELATION_DATA_FACT_SHEET    File_Relation = 2
	File_RELATION_PEER_REVIEW_REPORT File_Relation = 3
	File_RELATION_TABLE_OF_CONTENTS  File_Relation = 4
	File_RELATION_AGREEMENT          File_Relation = 5
)

// Enum value maps for File_Relation.
var (
	File_Relation_name = map[int32]string{
		0: "RELATION_MAIN_FILE",
		1: "RELATION_COLOPHON",
		2: "RELATION_DATA_FACT_SHEET",
		3: "RELATION_PEER_REVIEW_REPORT",
		4: "RELATION_TABLE_OF_CONTENTS",
		5: "RELATION_AGREEMENT",
	}
	File_Relation_value = map[string]int32{
		"RELATION_MAIN_FILE":          0,
		"RELATION_COLOPHON":           1,
		"RELATION_DATA_FACT_SHEET":    2,
		"RELATION_PEER_REVIEW_REPORT": 3,
		"RELATION_TABLE_OF_CONTENTS":  4,
		"RELATION_AGREEMENT":          5,
	}
)

func (x File_Relation) Enum() *File_Relation {
	p := new(File_Relation)
	*p = x
	return p
}

func (x File_Relation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (File_Relation) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_biblio_proto_enumTypes[4].Descriptor()
}

func (File_Relation) Type() protoreflect.EnumType {
	return &file_api_v1_biblio_proto_enumTypes[4]
}

func (x File_Relation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use File_Relation.Descriptor instead.
func (File_Relation) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{8, 2}
}

type Publication_Type int32

const (
	Publication_TYPE_JOURNAL_ARTICLE Publication_Type = 0
	Publication_TYPE_BOOK            Publication_Type = 1
	Publication_TYPE_BOOK_CHAPTER    Publication_Type = 2
	Publication_TYPE_BOOK_EDITOR     Publication_Type = 3
	Publication_TYPE_ISSUE_EDITOR    Publication_Type = 4
	Publication_TYPE_CONFERENCE      Publication_Type = 5
	Publication_TYPE_DISSERTATION    Publication_Type = 6
	Publication_TYPE_MISCELLANEOUS   Publication_Type = 7
)

// Enum value maps for Publication_Type.
var (
	Publication_Type_name = map[int32]string{
		0: "TYPE_JOURNAL_ARTICLE",
		1: "TYPE_BOOK",
		2: "TYPE_BOOK_CHAPTER",
		3: "TYPE_BOOK_EDITOR",
		4: "TYPE_ISSUE_EDITOR",
		5: "TYPE_CONFERENCE",
		6: "TYPE_DISSERTATION",
		7: "TYPE_MISCELLANEOUS",
	}
	Publication_Type_value = map[string]int32{
		"TYPE_JOURNAL_ARTICLE": 0,
		"TYPE_BOOK":            1,
		"TYPE_BOOK_CHAPTER":    2,
		"TYPE_BOOK_EDITOR":     3,
		"TYPE_ISSUE_EDITOR":    4,
		"TYPE_CONFERENCE":      5,
		"TYPE_DISSERTATION":    6,
		"TYPE_MISCELLANEOUS":   7,
	}
)

func (x Publication_Type) Enum() *Publication_Type {
	p := new(Publication_Type)
	*p = x
	return p
}

func (x Publication_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Publication_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_biblio_proto_enumTypes[5].Descriptor()
}

func (Publication_Type) Type() protoreflect.EnumType {
	return &file_api_v1_biblio_proto_enumTypes[5]
}

func (x Publication_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Publication_Type.Descriptor instead.
func (Publication_Type) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{9, 0}
}

type Publication_JournalArticleType int32

const (
	Publication_JOURNAL_ARTICLE_TYPE_ORIGINAL          Publication_JournalArticleType = 0
	Publication_JOURNAL_ARTICLE_TYPE_REVIEW            Publication_JournalArticleType = 1
	Publication_JOURNAL_ARTICLE_TYPE_LETTER_NOTE       Publication_JournalArticleType = 2
	Publication_JOURNAL_ARTICLE_TYPE_PROCEEDINGS_PAPER Publication_JournalArticleType = 3
)

// Enum value maps for Publication_JournalArticleType.
var (
	Publication_JournalArticleType_name = map[int32]string{
		0: "JOURNAL_ARTICLE_TYPE_ORIGINAL",
		1: "JOURNAL_ARTICLE_TYPE_REVIEW",
		2: "JOURNAL_ARTICLE_TYPE_LETTER_NOTE",
		3: "JOURNAL_ARTICLE_TYPE_PROCEEDINGS_PAPER",
	}
	Publication_JournalArticleType_value = map[string]int32{
		"JOURNAL_ARTICLE_TYPE_ORIGINAL":          0,
		"JOURNAL_ARTICLE_TYPE_REVIEW":            1,
		"JOURNAL_ARTICLE_TYPE_LETTER_NOTE":       2,
		"JOURNAL_ARTICLE_TYPE_PROCEEDINGS_PAPER": 3,
	}
)

func (x Publication_JournalArticleType) Enum() *Publication_JournalArticleType {
	p := new(Publication_JournalArticleType)
	*p = x
	return p
}

func (x Publication_JournalArticleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Publication_JournalArticleType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_biblio_proto_enumTypes[6].Descriptor()
}

func (Publication_JournalArticleType) Type() protoreflect.EnumType {
	return &file_api_v1_biblio_proto_enumTypes[6]
}

func (x Publication_JournalArticleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Publication_JournalArticleType.Descriptor instead.
func (Publication_JournalArticleType) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{9, 1}
}

type Publication_ConferenceType int32

const (
	Publication_CONFERENCE_TYPE_PROCEEDINGS_PAPER Publication_ConferenceType = 0
	Publication_CONFERENCE_TYPE_ABSTRACT          Publication_ConferenceType = 1
	Publication_CONFERENCE_TYPE_POSTER            Publication_ConferenceType = 2
	Publication_CONFERENCE_TYPE_OTHER             Publication_ConferenceType = 3
)

// Enum value maps for Publication_ConferenceType.
var (
	Publication_ConferenceType_name = map[int32]string{
		0: "CONFERENCE_TYPE_PROCEEDINGS_PAPER",
		1: "CONFERENCE_TYPE_ABSTRACT",
		2: "CONFERENCE_TYPE_POSTER",
		3: "CONFERENCE_TYPE_OTHER",
	}
	Publication_ConferenceType_value = map[string]int32{
		"CONFERENCE_TYPE_PROCEEDINGS_PAPER": 0,
		"CONFERENCE_TYPE_ABSTRACT":          1,
		"CONFERENCE_TYPE_POSTER":            2,
		"CONFERENCE_TYPE_OTHER":             3,
	}
)

func (x Publication_ConferenceType) Enum() *Publication_ConferenceType {
	p := new(Publication_ConferenceType)
	*p = x
	return p
}

func (x Publication_ConferenceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Publication_ConferenceType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_biblio_proto_enumTypes[7].Descriptor()
}

func (Publication_ConferenceType) Type() protoreflect.EnumType {
	return &file_api_v1_biblio_proto_enumTypes[7]
}

func (x Publication_ConferenceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Publication_ConferenceType.Descriptor instead.
func (Publication_ConferenceType) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{9, 2}
}

type Publication_MiscellaneousType int32

const (
	Publication_MISCELLANEOUS_TYPE_ART_REVIEW          Publication_MiscellaneousType = 0
	Publication_MISCELLANEOUS_TYPE_ARTISTIC_WORK       Publication_MiscellaneousType = 1
	Publication_MISCELLANEOUS_TYPE_BIBLIOGRAPHY        Publication_MiscellaneousType = 2
	Publication_MISCELLANEOUS_TYPE_BIOGRAPHY           Publication_MiscellaneousType = 3
	Publication_MISCELLANEOUS_TYPE_BLOG_POST           Publication_MiscellaneousType = 4
	Publication_MISCELLANEOUS_TYPE_BOOK_REVIEW         Publication_MiscellaneousType = 5
	Publication_MISCELLANEOUS_TYPE_CORRECTION          Publication_MiscellaneousType = 6
	Publication_MISCELLANEOUS_TYPE_DICTIONARY_ENTRY    Publication_MiscellaneousType = 7
	Publication_MISCELLANEOUS_TYPE_EDITIORIAL_MATERIAL Publication_MiscellaneousType = 8
	Publication_MISCELLANEOUS_TYPE_ENCYCLOPEDIA_ENTRY  Publication_MiscellaneousType = 9
	Publication_MISCELLANEOUS_TYPE_EXHIBITION_REVIEW   Publication_MiscellaneousType = 10
	Publication_MISCELLANEOUS_TYPE_FILM_REVIEW         Publication_MiscellaneousType = 11
	Publication_MISCELLANEOUS_TYPE_LECTURE_SPEECH      Publication_MiscellaneousType = 12
	Publication_MISCELLANEOUS_TYPE_LEMMA               Publication_MiscellaneousType = 13
	Publication_MISCELLANEOUS_TYPE_MAGAZINE_PIECE      Publication_MiscellaneousType = 14
	Publication_MISCELLANEOUS_TYPE_MANUAL              Publication_MiscellaneousType = 15
	Publication_MISCELLANEOUS_TYPE_MUSIC_EDITION       Publication_MiscellaneousType = 16
	Publication_MISCELLANEOUS_TYPE_MUSIC_REVIEW        Publication_MiscellaneousType = 17
	Publication_MISCELLANEOUS_TYPE_NEWS_ARTICLE        Publication_MiscellaneousType = 18
	Publication_MISCELLANEOUS_TYPE_NEWSPAPER_PIECE     Publication_MiscellaneousType = 19
	Publication_MISCELLANEOUS_TYPE_OTHER               Publication_MiscellaneousType = 20
	Publication_MISCELLANEOUS_TYPE_PREPRINT            Publication_MiscellaneousType = 21
	Publication_MISCELLANEOUS_TYPE_PRODUCT_REVIEW      Publication_MiscellaneousType = 22
	Publication_MISCELLANEOUS_TYPE_REPORT              Publication_MiscellaneousType = 23
	Publication_MISCELLANEOUS_TYPE_TECHNICAL_STANDARD  Publication_MiscellaneousType = 24
	Publication_MISCELLANEOUS_TYPE_TEXT_EDITION        Publication_MiscellaneousType = 25
	Publication_MISCELLANEOUS_TYPE_TEXT_TRANSLATION    Publication_MiscellaneousType = 26
	Publication_MISCELLANEOUS_TYPE_THEATRE_REVIEW      Publication_MiscellaneousType = 27
	Publication_MISCELLANEOUS_TYPE_WORKING_PAPER       Publication_MiscellaneousType = 28
)

// Enum value maps for Publication_MiscellaneousType.
var (
	Publication_MiscellaneousType_name = map[int32]string{
		0:  "MISCELLANEOUS_TYPE_ART_REVIEW",
		1:  "MISCELLANEOUS_TYPE_ARTISTIC_WORK",
		2:  "MISCELLANEOUS_TYPE_BIBLIOGRAPHY",
		3:  "MISCELLANEOUS_TYPE_BIOGRAPHY",
		4:  "MISCELLANEOUS_TYPE_BLOG_POST",
		5:  "MISCELLANEOUS_TYPE_BOOK_REVIEW",
		6:  "MISCELLANEOUS_TYPE_CORRECTION",
		7:  "MISCELLANEOUS_TYPE_DICTIONARY_ENTRY",
		8:  "MISCELLANEOUS_TYPE_EDITIORIAL_MATERIAL",
		9:  "MISCELLANEOUS_TYPE_ENCYCLOPEDIA_ENTRY",
		10: "MISCELLANEOUS_TYPE_EXHIBITION_REVIEW",
		11: "MISCELLANEOUS_TYPE_FILM_REVIEW",
		12: "MISCELLANEOUS_TYPE_LECTURE_SPEECH",
		13: "MISCELLANEOUS_TYPE_LEMMA",
		14: "MISCELLANEOUS_TYPE_MAGAZINE_PIECE",
		15: "MISCELLANEOUS_TYPE_MANUAL",
		16: "MISCELLANEOUS_TYPE_MUSIC_EDITION",
		17: "MISCELLANEOUS_TYPE_MUSIC_REVIEW",
		18: "MISCELLANEOUS_TYPE_NEWS_ARTICLE",
		19: "MISCELLANEOUS_TYPE_NEWSPAPER_PIECE",
		20: "MISCELLANEOUS_TYPE_OTHER",
		21: "MISCELLANEOUS_TYPE_PREPRINT",
		22: "MISCELLANEOUS_TYPE_PRODUCT_REVIEW",
		23: "MISCELLANEOUS_TYPE_REPORT",
		24: "MISCELLANEOUS_TYPE_TECHNICAL_STANDARD",
		25: "MISCELLANEOUS_TYPE_TEXT_EDITION",
		26: "MISCELLANEOUS_TYPE_TEXT_TRANSLATION",
		27: "MISCELLANEOUS_TYPE_THEATRE_REVIEW",
		28: "MISCELLANEOUS_TYPE_WORKING_PAPER",
	}
	Publication_MiscellaneousType_value = map[string]int32{
		"MISCELLANEOUS_TYPE_ART_REVIEW":          0,
		"MISCELLANEOUS_TYPE_ARTISTIC_WORK":       1,
		"MISCELLANEOUS_TYPE_BIBLIOGRAPHY":        2,
		"MISCELLANEOUS_TYPE_BIOGRAPHY":           3,
		"MISCELLANEOUS_TYPE_BLOG_POST":           4,
		"MISCELLANEOUS_TYPE_BOOK_REVIEW":         5,
		"MISCELLANEOUS_TYPE_CORRECTION":          6,
		"MISCELLANEOUS_TYPE_DICTIONARY_ENTRY":    7,
		"MISCELLANEOUS_TYPE_EDITIORIAL_MATERIAL": 8,
		"MISCELLANEOUS_TYPE_ENCYCLOPEDIA_ENTRY":  9,
		"MISCELLANEOUS_TYPE_EXHIBITION_REVIEW":   10,
		"MISCELLANEOUS_TYPE_FILM_REVIEW":         11,
		"MISCELLANEOUS_TYPE_LECTURE_SPEECH":      12,
		"MISCELLANEOUS_TYPE_LEMMA":               13,
		"MISCELLANEOUS_TYPE_MAGAZINE_PIECE":      14,
		"MISCELLANEOUS_TYPE_MANUAL":              15,
		"MISCELLANEOUS_TYPE_MUSIC_EDITION":       16,
		"MISCELLANEOUS_TYPE_MUSIC_REVIEW":        17,
		"MISCELLANEOUS_TYPE_NEWS_ARTICLE":        18,
		"MISCELLANEOUS_TYPE_NEWSPAPER_PIECE":     19,
		"MISCELLANEOUS_TYPE_OTHER":               20,
		"MISCELLANEOUS_TYPE_PREPRINT":            21,
		"MISCELLANEOUS_TYPE_PRODUCT_REVIEW":      22,
		"MISCELLANEOUS_TYPE_REPORT":              23,
		"MISCELLANEOUS_TYPE_TECHNICAL_STANDARD":  24,
		"MISCELLANEOUS_TYPE_TEXT_EDITION":        25,
		"MISCELLANEOUS_TYPE_TEXT_TRANSLATION":    26,
		"MISCELLANEOUS_TYPE_THEATRE_REVIEW":      27,
		"MISCELLANEOUS_TYPE_WORKING_PAPER":       28,
	}
)

func (x Publication_MiscellaneousType) Enum() *Publication_MiscellaneousType {
	p := new(Publication_MiscellaneousType)
	*p = x
	return p
}

func (x Publication_MiscellaneousType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Publication_MiscellaneousType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_biblio_proto_enumTypes[8].Descriptor()
}

func (Publication_MiscellaneousType) Type() protoreflect.EnumType {
	return &file_api_v1_biblio_proto_enumTypes[8]
}

func (x Publication_MiscellaneousType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Publication_MiscellaneousType.Descriptor instead.
func (Publication_MiscellaneousType) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{9, 3}
}

type Publication_Status int32

const (
	Publication_STATUS_PRIVATE  Publication_Status = 0
	Publication_STATUS_PUBLIC   Publication_Status = 1
	Publication_STATUS_DELETED  Publication_Status = 2
	Publication_STATUS_RETURNED Publication_Status = 3
)

// Enum value maps for Publication_Status.
var (
	Publication_Status_name = map[int32]string{
		0: "STATUS_PRIVATE",
		1: "STATUS_PUBLIC",
		2: "STATUS_DELETED",
		3: "STATUS_RETURNED",
	}
	Publication_Status_value = map[string]int32{
		"STATUS_PRIVATE":  0,
		"STATUS_PUBLIC":   1,
		"STATUS_DELETED":  2,
		"STATUS_RETURNED": 3,
	}
)

func (x Publication_Status) Enum() *Publication_Status {
	p := new(Publication_Status)
	*p = x
	return p
}

func (x Publication_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Publication_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_biblio_proto_enumTypes[9].Descriptor()
}

func (Publication_Status) Type() protoreflect.EnumType {
	return &file_api_v1_biblio_proto_enumTypes[9]
}

func (x Publication_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Publication_Status.Descriptor instead.
func (Publication_Status) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{9, 4}
}

type Publication_Classification int32

const (
	Publication_CLASSIFICATION_U  Publication_Classification = 0
	Publication_CLASSIFICATION_A1 Publication_Classification = 1
	Publication_CLASSIFICATION_A2 Publication_Classification = 2
	Publication_CLASSIFICATION_A3 Publication_Classification = 3
	Publication_CLASSIFICATION_A4 Publication_Classification = 4
	Publication_CLASSIFICATION_B1 Publication_Classification = 5
	Publication_CLASSIFICATION_B2 Publication_Classification = 6
	Publication_CLASSIFICATION_B3 Publication_Classification = 7
	Publication_CLASSIFICATION_C1 Publication_Classification = 8
	Publication_CLASSIFICATION_C3 Publication_Classification = 9
	Publication_CLASSIFICATION_D1 Publication_Classification = 10
	Publication_CLASSIFICATION_D2 Publication_Classification = 11
	Publication_CLASSIFICATION_P1 Publication_Classification = 12
	Publication_CLASSIFICATION_V  Publication_Classification = 13
)

// Enum value maps for Publication_Classification.
var (
	Publication_Classification_name = map[int32]string{
		0:  "CLASSIFICATION_U",
		1:  "CLASSIFICATION_A1",
		2:  "CLASSIFICATION_A2",
		3:  "CLASSIFICATION_A3",
		4:  "CLASSIFICATION_A4",
		5:  "CLASSIFICATION_B1",
		6:  "CLASSIFICATION_B2",
		7:  "CLASSIFICATION_B3",
		8:  "CLASSIFICATION_C1",
		9:  "CLASSIFICATION_C3",
		10: "CLASSIFICATION_D1",
		11: "CLASSIFICATION_D2",
		12: "CLASSIFICATION_P1",
		13: "CLASSIFICATION_V",
	}
	Publication_Classification_value = map[string]int32{
		"CLASSIFICATION_U":  0,
		"CLASSIFICATION_A1": 1,
		"CLASSIFICATION_A2": 2,
		"CLASSIFICATION_A3": 3,
		"CLASSIFICATION_A4": 4,
		"CLASSIFICATION_B1": 5,
		"CLASSIFICATION_B2": 6,
		"CLASSIFICATION_B3": 7,
		"CLASSIFICATION_C1": 8,
		"CLASSIFICATION_C3": 9,
		"CLASSIFICATION_D1": 10,
		"CLASSIFICATION_D2": 11,
		"CLASSIFICATION_P1": 12,
		"CLASSIFICATION_V":  13,
	}
)

func (x Publication_Classification) Enum() *Publication_Classification {
	p := new(Publication_Classification)
	*p = x
	return p
}

func (x Publication_Classification) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Publication_Classification) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_biblio_proto_enumTypes[10].Descriptor()
}

func (Publication_Classification) Type() protoreflect.EnumType {
	return &file_api_v1_biblio_proto_enumTypes[10]
}

func (x Publication_Classification) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Publication_Classification.Descriptor instead.
func (Publication_Classification) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{9, 5}
}

type Dataset_Status int32

const (
	Dataset_STATUS_PRIVATE  Dataset_Status = 0
	Dataset_STATUS_PUBLIC   Dataset_Status = 1
	Dataset_STATUS_DELETED  Dataset_Status = 2
	Dataset_STATUS_RETURNED Dataset_Status = 3
)

// Enum value maps for Dataset_Status.
var (
	Dataset_Status_name = map[int32]string{
		0: "STATUS_PRIVATE",
		1: "STATUS_PUBLIC",
		2: "STATUS_DELETED",
		3: "STATUS_RETURNED",
	}
	Dataset_Status_value = map[string]int32{
		"STATUS_PRIVATE":  0,
		"STATUS_PUBLIC":   1,
		"STATUS_DELETED":  2,
		"STATUS_RETURNED": 3,
	}
)

func (x Dataset_Status) Enum() *Dataset_Status {
	p := new(Dataset_Status)
	*p = x
	return p
}

func (x Dataset_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Dataset_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_biblio_proto_enumTypes[11].Descriptor()
}

func (Dataset_Status) Type() protoreflect.EnumType {
	return &file_api_v1_biblio_proto_enumTypes[11]
}

func (x Dataset_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Dataset_Status.Descriptor instead.
func (Dataset_Status) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{10, 0}
}

type Text struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Lang string `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang,omitempty"` // TODO should be enum
	Text string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Text) Reset() {
	*x = Text{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Text) ProtoMessage() {}

func (x *Text) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Text.ProtoReflect.Descriptor instead.
func (*Text) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{0}
}

func (x *Text) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Text) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *Text) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type Contributor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Orcid      string   `protobuf:"bytes,2,opt,name=orcid,proto3" json:"orcid,omitempty"`
	LocalId    []string `protobuf:"bytes,3,rep,name=local_id,json=localId,proto3" json:"local_id,omitempty"`
	CreditRole []string `protobuf:"bytes,4,rep,name=credit_role,json=creditRole,proto3" json:"credit_role,omitempty"` // TODO should be enum
	FirstName  string   `protobuf:"bytes,5,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName   string   `protobuf:"bytes,6,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	FullName   string   `protobuf:"bytes,7,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
}

func (x *Contributor) Reset() {
	*x = Contributor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contributor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contributor) ProtoMessage() {}

func (x *Contributor) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contributor.ProtoReflect.Descriptor instead.
func (*Contributor) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{1}
}

func (x *Contributor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Contributor) GetOrcid() string {
	if x != nil {
		return x.Orcid
	}
	return ""
}

func (x *Contributor) GetLocalId() []string {
	if x != nil {
		return x.LocalId
	}
	return nil
}

func (x *Contributor) GetCreditRole() []string {
	if x != nil {
		return x.CreditRole
	}
	return nil
}

func (x *Contributor) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Contributor) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Contributor) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

type RelatedPublication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RelatedPublication) Reset() {
	*x = RelatedPublication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedPublication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedPublication) ProtoMessage() {}

func (x *RelatedPublication) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedPublication.ProtoReflect.Descriptor instead.
func (*RelatedPublication) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{2}
}

func (x *RelatedPublication) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RelatedOrganization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RelatedOrganization) Reset() {
	*x = RelatedOrganization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedOrganization) ProtoMessage() {}

func (x *RelatedOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedOrganization.ProtoReflect.Descriptor instead.
func (*RelatedOrganization) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{3}
}

func (x *RelatedOrganization) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RelatedProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RelatedProject) Reset() {
	*x = RelatedProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedProject) ProtoMessage() {}

func (x *RelatedProject) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedProject.ProtoReflect.Descriptor instead.
func (*RelatedProject) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{4}
}

func (x *RelatedProject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RelatedDataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RelatedDataset) Reset() {
	*x = RelatedDataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedDataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedDataset) ProtoMessage() {}

func (x *RelatedDataset) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedDataset.ProtoReflect.Descriptor instead.
func (*RelatedDataset) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{5}
}

func (x *RelatedDataset) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type OrcidWork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orcid   string `protobuf:"bytes,1,opt,name=orcid,proto3" json:"orcid,omitempty"`
	PutCode int32  `protobuf:"varint,2,opt,name=put_code,json=putCode,proto3" json:"put_code,omitempty"`
}

func (x *OrcidWork) Reset() {
	*x = OrcidWork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrcidWork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrcidWork) ProtoMessage() {}

func (x *OrcidWork) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrcidWork.ProtoReflect.Descriptor instead.
func (*OrcidWork) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{6}
}

func (x *OrcidWork) GetOrcid() string {
	if x != nil {
		return x.Orcid
	}
	return ""
}

func (x *OrcidWork) GetPutCode() int32 {
	if x != nil {
		return x.PutCode
	}
	return 0
}

type Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url         string        `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Relation    Link_Relation `protobuf:"varint,3,opt,name=relation,proto3,enum=biblio.v1.Link_Relation" json:"relation,omitempty"`
	Description string        `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Link) Reset() {
	*x = Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{7}
}

func (x *Link) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Link) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Link) GetRelation() Link_Relation {
	if x != nil {
		return x.Relation
	}
	return Link_RELATION_DATA_MANAGEMENT_PLAN
}

func (x *Link) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccessLevel        File_AccessLevel        `protobuf:"varint,2,opt,name=access_level,json=accessLevel,proto3,enum=biblio.v1.File_AccessLevel" json:"access_level,omitempty"`
	License            string                  `protobuf:"bytes,3,opt,name=license,proto3" json:"license,omitempty"`
	ContentType        string                  `protobuf:"bytes,4,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	DateCreated        *timestamppb.Timestamp  `protobuf:"bytes,5,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	DateUpdated        *timestamppb.Timestamp  `protobuf:"bytes,6,opt,name=date_updated,json=dateUpdated,proto3" json:"date_updated,omitempty"`
	Embargo            string                  `protobuf:"bytes,7,opt,name=embargo,proto3" json:"embargo,omitempty"`
	EmbargoTo          File_AccessLevel        `protobuf:"varint,8,opt,name=embargo_to,json=embargoTo,proto3,enum=biblio.v1.File_AccessLevel" json:"embargo_to,omitempty"`
	Name               string                  `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	Size               int32                   `protobuf:"varint,10,opt,name=size,proto3" json:"size,omitempty"`
	Sha256             string                  `protobuf:"bytes,11,opt,name=sha256,proto3" json:"sha256,omitempty"`
	OtherLicense       string                  `protobuf:"bytes,12,opt,name=other_license,json=otherLicense,proto3" json:"other_license,omitempty"`
	PublicationVersion File_PublicationVersion `protobuf:"varint,13,opt,name=publication_version,json=publicationVersion,proto3,enum=biblio.v1.File_PublicationVersion" json:"publication_version,omitempty"`
	Relation           File_Relation           `protobuf:"varint,14,opt,name=relation,proto3,enum=biblio.v1.File_Relation" json:"relation,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{8}
}

func (x *File) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *File) GetAccessLevel() File_AccessLevel {
	if x != nil {
		return x.AccessLevel
	}
	return File_ACCESS_LEVEL_OPEN_ACCESS
}

func (x *File) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *File) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *File) GetDateCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.DateCreated
	}
	return nil
}

func (x *File) GetDateUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.DateUpdated
	}
	return nil
}

func (x *File) GetEmbargo() string {
	if x != nil {
		return x.Embargo
	}
	return ""
}

func (x *File) GetEmbargoTo() File_AccessLevel {
	if x != nil {
		return x.EmbargoTo
	}
	return File_ACCESS_LEVEL_OPEN_ACCESS
}

func (x *File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *File) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *File) GetSha256() string {
	if x != nil {
		return x.Sha256
	}
	return ""
}

func (x *File) GetOtherLicense() string {
	if x != nil {
		return x.OtherLicense
	}
	return ""
}

func (x *File) GetPublicationVersion() File_PublicationVersion {
	if x != nil {
		return x.PublicationVersion
	}
	return File_PUBLICATION_VERSION_PUBLISHED_VERSION
}

func (x *File) GetRelation() File_Relation {
	if x != nil {
		return x.Relation
	}
	return File_RELATION_MAIN_FILE
}

type Publication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                    Publication_Type               `protobuf:"varint,2,opt,name=type,proto3,enum=biblio.v1.Publication_Type" json:"type,omitempty"`
	Status                  Publication_Status             `protobuf:"varint,3,opt,name=status,proto3,enum=biblio.v1.Publication_Status" json:"status,omitempty"`
	Abstract                []*Text                        `protobuf:"bytes,4,rep,name=abstract,proto3" json:"abstract,omitempty"`
	AdditionalInfo          string                         `protobuf:"bytes,5,opt,name=additional_info,json=additionalInfo,proto3" json:"additional_info,omitempty"`
	AlternativeTitle        []string                       `protobuf:"bytes,6,rep,name=alternative_title,json=alternativeTitle,proto3" json:"alternative_title,omitempty"`
	ArticleNumber           string                         `protobuf:"bytes,7,opt,name=article_number,json=articleNumber,proto3" json:"article_number,omitempty"`
	ArxivId                 string                         `protobuf:"bytes,8,opt,name=arxiv_id,json=arxivId,proto3" json:"arxiv_id,omitempty"`
	Author                  []*Contributor                 `protobuf:"bytes,9,rep,name=author,proto3" json:"author,omitempty"`
	BatchId                 string                         `protobuf:"bytes,10,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Classification          Publication_Classification     `protobuf:"varint,11,opt,name=classification,proto3,enum=biblio.v1.Publication_Classification" json:"classification,omitempty"`
	DateCreated             *timestamppb.Timestamp         `protobuf:"bytes,12,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	DateUpdated             *timestamppb.Timestamp         `protobuf:"bytes,13,opt,name=date_updated,json=dateUpdated,proto3" json:"date_updated,omitempty"`
	DateFrom                *timestamppb.Timestamp         `protobuf:"bytes,14,opt,name=date_from,json=dateFrom,proto3" json:"date_from,omitempty"`
	DateUntil               *timestamppb.Timestamp         `protobuf:"bytes,15,opt,name=date_until,json=dateUntil,proto3" json:"date_until,omitempty"`
	Extern                  bool                           `protobuf:"varint,16,opt,name=extern,proto3" json:"extern,omitempty"`
	Title                   string                         `protobuf:"bytes,17,opt,name=title,proto3" json:"title,omitempty"`
	DefensePlace            string                         `protobuf:"bytes,18,opt,name=defense_place,json=defensePlace,proto3" json:"defense_place,omitempty"`
	DefenseDate             string                         `protobuf:"bytes,19,opt,name=defense_date,json=defenseDate,proto3" json:"defense_date,omitempty"`
	DefenseTime             string                         `protobuf:"bytes,20,opt,name=defense_time,json=defenseTime,proto3" json:"defense_time,omitempty"`
	ConferenceName          string                         `protobuf:"bytes,21,opt,name=conference_name,json=conferenceName,proto3" json:"conference_name,omitempty"`
	ConferenceLocation      string                         `protobuf:"bytes,22,opt,name=conference_location,json=conferenceLocation,proto3" json:"conference_location,omitempty"`
	ConferenceOrganizer     string                         `protobuf:"bytes,23,opt,name=conference_organizer,json=conferenceOrganizer,proto3" json:"conference_organizer,omitempty"`
	ConferenceStartDate     string                         `protobuf:"bytes,24,opt,name=conference_start_date,json=conferenceStartDate,proto3" json:"conference_start_date,omitempty"`
	ConferenceEndDate       string                         `protobuf:"bytes,25,opt,name=conference_end_date,json=conferenceEndDate,proto3" json:"conference_end_date,omitempty"`
	Organization            []*RelatedOrganization         `protobuf:"bytes,26,rep,name=organization,proto3" json:"organization,omitempty"`
	CreatorId               string                         `protobuf:"bytes,27,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	UserId                  string                         `protobuf:"bytes,28,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Doi                     string                         `protobuf:"bytes,29,opt,name=doi,proto3" json:"doi,omitempty"`
	Edition                 string                         `protobuf:"bytes,30,opt,name=edition,proto3" json:"edition,omitempty"`
	Editor                  []*Contributor                 `protobuf:"bytes,31,rep,name=editor,proto3" json:"editor,omitempty"`
	Eisbn                   []string                       `protobuf:"bytes,32,rep,name=eisbn,proto3" json:"eisbn,omitempty"`
	Eissn                   []string                       `protobuf:"bytes,33,rep,name=eissn,proto3" json:"eissn,omitempty"`
	EsciId                  string                         `protobuf:"bytes,34,opt,name=esci_id,json=esciId,proto3" json:"esci_id,omitempty"`
	File                    []*File                        `protobuf:"bytes,35,rep,name=file,proto3" json:"file,omitempty"`
	Handle                  string                         `protobuf:"bytes,36,opt,name=handle,proto3" json:"handle,omitempty"`
	HasConfidentialData     Confirmation                   `protobuf:"varint,37,opt,name=has_confidential_data,json=hasConfidentialData,proto3,enum=biblio.v1.Confirmation" json:"has_confidential_data,omitempty"`
	HasPatentApplication    Confirmation                   `protobuf:"varint,38,opt,name=has_patent_application,json=hasPatentApplication,proto3,enum=biblio.v1.Confirmation" json:"has_patent_application,omitempty"`
	HasPublicationsPlanned  Confirmation                   `protobuf:"varint,39,opt,name=has_publications_planned,json=hasPublicationsPlanned,proto3,enum=biblio.v1.Confirmation" json:"has_publications_planned,omitempty"`
	HasPublishedMaterial    Confirmation                   `protobuf:"varint,40,opt,name=has_published_material,json=hasPublishedMaterial,proto3,enum=biblio.v1.Confirmation" json:"has_published_material,omitempty"`
	Isbn                    []string                       `protobuf:"bytes,41,rep,name=isbn,proto3" json:"isbn,omitempty"`
	Issn                    []string                       `protobuf:"bytes,42,rep,name=issn,proto3" json:"issn,omitempty"`
	Issue                   string                         `protobuf:"bytes,43,opt,name=issue,proto3" json:"issue,omitempty"`
	IssueTitle              string                         `protobuf:"bytes,44,opt,name=issue_title,json=issueTitle,proto3" json:"issue_title,omitempty"`
	Keyword                 []string                       `protobuf:"bytes,45,rep,name=keyword,proto3" json:"keyword,omitempty"`
	Language                []string                       `protobuf:"bytes,46,rep,name=language,proto3" json:"language,omitempty"` // TODO should be enum
	LaySummary              []*Text                        `protobuf:"bytes,47,rep,name=lay_summary,json=laySummary,proto3" json:"lay_summary,omitempty"`
	Supervisor              []*Contributor                 `protobuf:"bytes,48,rep,name=supervisor,proto3" json:"supervisor,omitempty"`
	Url                     string                         `protobuf:"bytes,49,opt,name=url,proto3" json:"url,omitempty"`
	Volume                  string                         `protobuf:"bytes,50,opt,name=volume,proto3" json:"volume,omitempty"`
	WosId                   string                         `protobuf:"bytes,51,opt,name=wos_id,json=wosId,proto3" json:"wos_id,omitempty"`
	WosType                 string                         `protobuf:"bytes,52,opt,name=wos_type,json=wosType,proto3" json:"wos_type,omitempty"`
	Year                    string                         `protobuf:"bytes,53,opt,name=year,proto3" json:"year,omitempty"`
	ReportNumber            string                         `protobuf:"bytes,54,opt,name=report_number,json=reportNumber,proto3" json:"report_number,omitempty"`
	ResearchField           []string                       `protobuf:"bytes,55,rep,name=research_field,json=researchField,proto3" json:"research_field,omitempty"`
	ReviewerNote            string                         `protobuf:"bytes,56,opt,name=reviewer_note,json=reviewerNote,proto3" json:"reviewer_note,omitempty"`
	ReviewerTags            []string                       `protobuf:"bytes,57,rep,name=reviewer_tags,json=reviewerTags,proto3" json:"reviewer_tags,omitempty"`
	SeriesTitle             string                         `protobuf:"bytes,58,opt,name=series_title,json=seriesTitle,proto3" json:"series_title,omitempty"`
	SnapshotId              string                         `protobuf:"bytes,59,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	SourceDb                string                         `protobuf:"bytes,60,opt,name=source_db,json=sourceDb,proto3" json:"source_db,omitempty"`
	SourceId                string                         `protobuf:"bytes,61,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	SourceRecord            string                         `protobuf:"bytes,62,opt,name=source_record,json=sourceRecord,proto3" json:"source_record,omitempty"`
	Locked                  bool                           `protobuf:"varint,63,opt,name=locked,proto3" json:"locked,omitempty"`
	Message                 string                         `protobuf:"bytes,64,opt,name=message,proto3" json:"message,omitempty"`
	PageCount               string                         `protobuf:"bytes,65,opt,name=page_count,json=pageCount,proto3" json:"page_count,omitempty"`
	PageFirst               string                         `protobuf:"bytes,66,opt,name=page_first,json=pageFirst,proto3" json:"page_first,omitempty"`
	PageLast                string                         `protobuf:"bytes,67,opt,name=page_last,json=pageLast,proto3" json:"page_last,omitempty"`
	PlaceOfPublication      string                         `protobuf:"bytes,68,opt,name=place_of_publication,json=placeOfPublication,proto3" json:"place_of_publication,omitempty"`
	Publication             string                         `protobuf:"bytes,69,opt,name=publication,proto3" json:"publication,omitempty"`
	PublicationAbbreviation string                         `protobuf:"bytes,70,opt,name=publication_abbreviation,json=publicationAbbreviation,proto3" json:"publication_abbreviation,omitempty"`
	Publisher               string                         `protobuf:"bytes,71,opt,name=publisher,proto3" json:"publisher,omitempty"`
	PubmedId                string                         `protobuf:"bytes,72,opt,name=pubmed_id,json=pubmedId,proto3" json:"pubmed_id,omitempty"`
	JournalArticleType      Publication_JournalArticleType `protobuf:"varint,73,opt,name=journal_article_type,json=journalArticleType,proto3,enum=biblio.v1.Publication_JournalArticleType" json:"journal_article_type,omitempty"` // TODO use Oneof
	ConferenceType          Publication_ConferenceType     `protobuf:"varint,74,opt,name=conference_type,json=conferenceType,proto3,enum=biblio.v1.Publication_ConferenceType" json:"conference_type,omitempty"`                   // TODO use Oneof
	MiscellaneousType       Publication_MiscellaneousType  `protobuf:"varint,75,opt,name=miscellaneous_type,json=miscellaneousType,proto3,enum=biblio.v1.Publication_MiscellaneousType" json:"miscellaneous_type,omitempty"`       // TODO use Oneof
	Project                 []*RelatedProject              `protobuf:"bytes,76,rep,name=project,proto3" json:"project,omitempty"`
	Dataset                 []*RelatedDataset              `protobuf:"bytes,77,rep,name=dataset,proto3" json:"dataset,omitempty"`
	Link                    []*Link                        `protobuf:"bytes,78,rep,name=link,proto3" json:"link,omitempty"`
	OrcidWork               []*OrcidWork                   `protobuf:"bytes,79,rep,name=orcid_work,json=orcidWork,proto3" json:"orcid_work,omitempty"`
}

func (x *Publication) Reset() {
	*x = Publication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Publication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Publication) ProtoMessage() {}

func (x *Publication) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Publication.ProtoReflect.Descriptor instead.
func (*Publication) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{9}
}

func (x *Publication) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Publication) GetType() Publication_Type {
	if x != nil {
		return x.Type
	}
	return Publication_TYPE_JOURNAL_ARTICLE
}

func (x *Publication) GetStatus() Publication_Status {
	if x != nil {
		return x.Status
	}
	return Publication_STATUS_PRIVATE
}

func (x *Publication) GetAbstract() []*Text {
	if x != nil {
		return x.Abstract
	}
	return nil
}

func (x *Publication) GetAdditionalInfo() string {
	if x != nil {
		return x.AdditionalInfo
	}
	return ""
}

func (x *Publication) GetAlternativeTitle() []string {
	if x != nil {
		return x.AlternativeTitle
	}
	return nil
}

func (x *Publication) GetArticleNumber() string {
	if x != nil {
		return x.ArticleNumber
	}
	return ""
}

func (x *Publication) GetArxivId() string {
	if x != nil {
		return x.ArxivId
	}
	return ""
}

func (x *Publication) GetAuthor() []*Contributor {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Publication) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *Publication) GetClassification() Publication_Classification {
	if x != nil {
		return x.Classification
	}
	return Publication_CLASSIFICATION_U
}

func (x *Publication) GetDateCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.DateCreated
	}
	return nil
}

func (x *Publication) GetDateUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.DateUpdated
	}
	return nil
}

func (x *Publication) GetDateFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.DateFrom
	}
	return nil
}

func (x *Publication) GetDateUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.DateUntil
	}
	return nil
}

func (x *Publication) GetExtern() bool {
	if x != nil {
		return x.Extern
	}
	return false
}

func (x *Publication) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Publication) GetDefensePlace() string {
	if x != nil {
		return x.DefensePlace
	}
	return ""
}

func (x *Publication) GetDefenseDate() string {
	if x != nil {
		return x.DefenseDate
	}
	return ""
}

func (x *Publication) GetDefenseTime() string {
	if x != nil {
		return x.DefenseTime
	}
	return ""
}

func (x *Publication) GetConferenceName() string {
	if x != nil {
		return x.ConferenceName
	}
	return ""
}

func (x *Publication) GetConferenceLocation() string {
	if x != nil {
		return x.ConferenceLocation
	}
	return ""
}

func (x *Publication) GetConferenceOrganizer() string {
	if x != nil {
		return x.ConferenceOrganizer
	}
	return ""
}

func (x *Publication) GetConferenceStartDate() string {
	if x != nil {
		return x.ConferenceStartDate
	}
	return ""
}

func (x *Publication) GetConferenceEndDate() string {
	if x != nil {
		return x.ConferenceEndDate
	}
	return ""
}

func (x *Publication) GetOrganization() []*RelatedOrganization {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *Publication) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *Publication) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Publication) GetDoi() string {
	if x != nil {
		return x.Doi
	}
	return ""
}

func (x *Publication) GetEdition() string {
	if x != nil {
		return x.Edition
	}
	return ""
}

func (x *Publication) GetEditor() []*Contributor {
	if x != nil {
		return x.Editor
	}
	return nil
}

func (x *Publication) GetEisbn() []string {
	if x != nil {
		return x.Eisbn
	}
	return nil
}

func (x *Publication) GetEissn() []string {
	if x != nil {
		return x.Eissn
	}
	return nil
}

func (x *Publication) GetEsciId() string {
	if x != nil {
		return x.EsciId
	}
	return ""
}

func (x *Publication) GetFile() []*File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *Publication) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *Publication) GetHasConfidentialData() Confirmation {
	if x != nil {
		return x.HasConfidentialData
	}
	return Confirmation_CONFIRMATION_YES
}

func (x *Publication) GetHasPatentApplication() Confirmation {
	if x != nil {
		return x.HasPatentApplication
	}
	return Confirmation_CONFIRMATION_YES
}

func (x *Publication) GetHasPublicationsPlanned() Confirmation {
	if x != nil {
		return x.HasPublicationsPlanned
	}
	return Confirmation_CONFIRMATION_YES
}

func (x *Publication) GetHasPublishedMaterial() Confirmation {
	if x != nil {
		return x.HasPublishedMaterial
	}
	return Confirmation_CONFIRMATION_YES
}

func (x *Publication) GetIsbn() []string {
	if x != nil {
		return x.Isbn
	}
	return nil
}

func (x *Publication) GetIssn() []string {
	if x != nil {
		return x.Issn
	}
	return nil
}

func (x *Publication) GetIssue() string {
	if x != nil {
		return x.Issue
	}
	return ""
}

func (x *Publication) GetIssueTitle() string {
	if x != nil {
		return x.IssueTitle
	}
	return ""
}

func (x *Publication) GetKeyword() []string {
	if x != nil {
		return x.Keyword
	}
	return nil
}

func (x *Publication) GetLanguage() []string {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Publication) GetLaySummary() []*Text {
	if x != nil {
		return x.LaySummary
	}
	return nil
}

func (x *Publication) GetSupervisor() []*Contributor {
	if x != nil {
		return x.Supervisor
	}
	return nil
}

func (x *Publication) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Publication) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

func (x *Publication) GetWosId() string {
	if x != nil {
		return x.WosId
	}
	return ""
}

func (x *Publication) GetWosType() string {
	if x != nil {
		return x.WosType
	}
	return ""
}

func (x *Publication) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *Publication) GetReportNumber() string {
	if x != nil {
		return x.ReportNumber
	}
	return ""
}

func (x *Publication) GetResearchField() []string {
	if x != nil {
		return x.ResearchField
	}
	return nil
}

func (x *Publication) GetReviewerNote() string {
	if x != nil {
		return x.ReviewerNote
	}
	return ""
}

func (x *Publication) GetReviewerTags() []string {
	if x != nil {
		return x.ReviewerTags
	}
	return nil
}

func (x *Publication) GetSeriesTitle() string {
	if x != nil {
		return x.SeriesTitle
	}
	return ""
}

func (x *Publication) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

func (x *Publication) GetSourceDb() string {
	if x != nil {
		return x.SourceDb
	}
	return ""
}

func (x *Publication) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *Publication) GetSourceRecord() string {
	if x != nil {
		return x.SourceRecord
	}
	return ""
}

func (x *Publication) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *Publication) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Publication) GetPageCount() string {
	if x != nil {
		return x.PageCount
	}
	return ""
}

func (x *Publication) GetPageFirst() string {
	if x != nil {
		return x.PageFirst
	}
	return ""
}

func (x *Publication) GetPageLast() string {
	if x != nil {
		return x.PageLast
	}
	return ""
}

func (x *Publication) GetPlaceOfPublication() string {
	if x != nil {
		return x.PlaceOfPublication
	}
	return ""
}

func (x *Publication) GetPublication() string {
	if x != nil {
		return x.Publication
	}
	return ""
}

func (x *Publication) GetPublicationAbbreviation() string {
	if x != nil {
		return x.PublicationAbbreviation
	}
	return ""
}

func (x *Publication) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *Publication) GetPubmedId() string {
	if x != nil {
		return x.PubmedId
	}
	return ""
}

func (x *Publication) GetJournalArticleType() Publication_JournalArticleType {
	if x != nil {
		return x.JournalArticleType
	}
	return Publication_JOURNAL_ARTICLE_TYPE_ORIGINAL
}

func (x *Publication) GetConferenceType() Publication_ConferenceType {
	if x != nil {
		return x.ConferenceType
	}
	return Publication_CONFERENCE_TYPE_PROCEEDINGS_PAPER
}

func (x *Publication) GetMiscellaneousType() Publication_MiscellaneousType {
	if x != nil {
		return x.MiscellaneousType
	}
	return Publication_MISCELLANEOUS_TYPE_ART_REVIEW
}

func (x *Publication) GetProject() []*RelatedProject {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *Publication) GetDataset() []*RelatedDataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

func (x *Publication) GetLink() []*Link {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *Publication) GetOrcidWork() []*OrcidWork {
	if x != nil {
		return x.OrcidWork
	}
	return nil
}

type Dataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status       Dataset_Status         `protobuf:"varint,2,opt,name=status,proto3,enum=biblio.v1.Dataset_Status" json:"status,omitempty"`
	Abstract     []*Text                `protobuf:"bytes,3,rep,name=abstract,proto3" json:"abstract,omitempty"`
	Author       []*Contributor         `protobuf:"bytes,4,rep,name=author,proto3" json:"author,omitempty"`
	BatchId      string                 `protobuf:"bytes,5,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	DateCreated  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	DateUpdated  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=date_updated,json=dateUpdated,proto3" json:"date_updated,omitempty"`
	DateFrom     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=date_from,json=dateFrom,proto3" json:"date_from,omitempty"`
	DateUntil    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=date_until,json=dateUntil,proto3" json:"date_until,omitempty"`
	Title        string                 `protobuf:"bytes,10,opt,name=title,proto3" json:"title,omitempty"`
	CreatorId    string                 `protobuf:"bytes,11,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	UserId       string                 `protobuf:"bytes,12,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Doi          string                 `protobuf:"bytes,13,opt,name=doi,proto3" json:"doi,omitempty"`
	Keyword      []string               `protobuf:"bytes,14,rep,name=keyword,proto3" json:"keyword,omitempty"`
	Url          string                 `protobuf:"bytes,15,opt,name=url,proto3" json:"url,omitempty"`
	Year         string                 `protobuf:"bytes,16,opt,name=year,proto3" json:"year,omitempty"`
	ReviewerNote string                 `protobuf:"bytes,17,opt,name=reviewer_note,json=reviewerNote,proto3" json:"reviewer_note,omitempty"`
	ReviewerTags []string               `protobuf:"bytes,18,rep,name=reviewer_tags,json=reviewerTags,proto3" json:"reviewer_tags,omitempty"`
	SnapshotId   string                 `protobuf:"bytes,19,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	Message      string                 `protobuf:"bytes,20,opt,name=message,proto3" json:"message,omitempty"`
	Publisher    string                 `protobuf:"bytes,21,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Project      []*RelatedProject      `protobuf:"bytes,22,rep,name=project,proto3" json:"project,omitempty"`
	Publication  []*RelatedPublication  `protobuf:"bytes,23,rep,name=publication,proto3" json:"publication,omitempty"`
	AccessLevel  string                 `protobuf:"bytes,24,opt,name=access_level,json=accessLevel,proto3" json:"access_level,omitempty"`
	Contributor  []*Contributor         `protobuf:"bytes,25,rep,name=contributor,proto3" json:"contributor,omitempty"`
	Embargo      string                 `protobuf:"bytes,26,opt,name=embargo,proto3" json:"embargo,omitempty"`
	EmbargoTo    string                 `protobuf:"bytes,27,opt,name=embargo_to,json=embargoTo,proto3" json:"embargo_to,omitempty"`
	Format       []string               `protobuf:"bytes,28,rep,name=format,proto3" json:"format,omitempty"`
	License      string                 `protobuf:"bytes,29,opt,name=license,proto3" json:"license,omitempty"`
	Locked       bool                   `protobuf:"varint,30,opt,name=locked,proto3" json:"locked,omitempty"`
	OtherLicense string                 `protobuf:"bytes,31,opt,name=other_license,json=otherLicense,proto3" json:"other_license,omitempty"`
	Organization []*RelatedOrganization `protobuf:"bytes,32,rep,name=organization,proto3" json:"organization,omitempty"`
}

func (x *Dataset) Reset() {
	*x = Dataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataset) ProtoMessage() {}

func (x *Dataset) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataset.ProtoReflect.Descriptor instead.
func (*Dataset) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{10}
}

func (x *Dataset) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Dataset) GetStatus() Dataset_Status {
	if x != nil {
		return x.Status
	}
	return Dataset_STATUS_PRIVATE
}

func (x *Dataset) GetAbstract() []*Text {
	if x != nil {
		return x.Abstract
	}
	return nil
}

func (x *Dataset) GetAuthor() []*Contributor {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Dataset) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *Dataset) GetDateCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.DateCreated
	}
	return nil
}

func (x *Dataset) GetDateUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.DateUpdated
	}
	return nil
}

func (x *Dataset) GetDateFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.DateFrom
	}
	return nil
}

func (x *Dataset) GetDateUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.DateUntil
	}
	return nil
}

func (x *Dataset) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Dataset) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *Dataset) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Dataset) GetDoi() string {
	if x != nil {
		return x.Doi
	}
	return ""
}

func (x *Dataset) GetKeyword() []string {
	if x != nil {
		return x.Keyword
	}
	return nil
}

func (x *Dataset) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Dataset) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *Dataset) GetReviewerNote() string {
	if x != nil {
		return x.ReviewerNote
	}
	return ""
}

func (x *Dataset) GetReviewerTags() []string {
	if x != nil {
		return x.ReviewerTags
	}
	return nil
}

func (x *Dataset) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

func (x *Dataset) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Dataset) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *Dataset) GetProject() []*RelatedProject {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *Dataset) GetPublication() []*RelatedPublication {
	if x != nil {
		return x.Publication
	}
	return nil
}

func (x *Dataset) GetAccessLevel() string {
	if x != nil {
		return x.AccessLevel
	}
	return ""
}

func (x *Dataset) GetContributor() []*Contributor {
	if x != nil {
		return x.Contributor
	}
	return nil
}

func (x *Dataset) GetEmbargo() string {
	if x != nil {
		return x.Embargo
	}
	return ""
}

func (x *Dataset) GetEmbargoTo() string {
	if x != nil {
		return x.EmbargoTo
	}
	return ""
}

func (x *Dataset) GetFormat() []string {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *Dataset) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *Dataset) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *Dataset) GetOtherLicense() string {
	if x != nil {
		return x.OtherLicense
	}
	return ""
}

func (x *Dataset) GetOrganization() []*RelatedOrganization {
	if x != nil {
		return x.Organization
	}
	return nil
}

type GetFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sha256 string `protobuf:"bytes,1,opt,name=sha256,proto3" json:"sha256,omitempty"`
}

func (x *GetFileRequest) Reset() {
	*x = GetFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileRequest) ProtoMessage() {}

func (x *GetFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileRequest.ProtoReflect.Descriptor instead.
func (*GetFileRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{11}
}

func (x *GetFileRequest) GetSha256() string {
	if x != nil {
		return x.Sha256
	}
	return ""
}

type GetFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *GetFileResponse) Reset() {
	*x = GetFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileResponse) ProtoMessage() {}

func (x *GetFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileResponse.ProtoReflect.Descriptor instead.
func (*GetFileResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{12}
}

func (x *GetFileResponse) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type AddFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *AddFileRequest) Reset() {
	*x = AddFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFileRequest) ProtoMessage() {}

func (x *AddFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFileRequest.ProtoReflect.Descriptor instead.
func (*AddFileRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{13}
}

func (x *AddFileRequest) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type AddFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sha256 string `protobuf:"bytes,1,opt,name=sha256,proto3" json:"sha256,omitempty"`
}

func (x *AddFileResponse) Reset() {
	*x = AddFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFileResponse) ProtoMessage() {}

func (x *AddFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFileResponse.ProtoReflect.Descriptor instead.
func (*AddFileResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{14}
}

func (x *AddFileResponse) GetSha256() string {
	if x != nil {
		return x.Sha256
	}
	return ""
}

type GetPublicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPublicationRequest) Reset() {
	*x = GetPublicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicationRequest) ProtoMessage() {}

func (x *GetPublicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicationRequest.ProtoReflect.Descriptor instead.
func (*GetPublicationRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{15}
}

func (x *GetPublicationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetPublicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publication *Publication `protobuf:"bytes,1,opt,name=publication,proto3" json:"publication,omitempty"`
}

func (x *GetPublicationResponse) Reset() {
	*x = GetPublicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicationResponse) ProtoMessage() {}

func (x *GetPublicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicationResponse.ProtoReflect.Descriptor instead.
func (*GetPublicationResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{16}
}

func (x *GetPublicationResponse) GetPublication() *Publication {
	if x != nil {
		return x.Publication
	}
	return nil
}

type GetAllPublicationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllPublicationsRequest) Reset() {
	*x = GetAllPublicationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllPublicationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllPublicationsRequest) ProtoMessage() {}

func (x *GetAllPublicationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllPublicationsRequest.ProtoReflect.Descriptor instead.
func (*GetAllPublicationsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{17}
}

type GetAllPublicationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publication *Publication `protobuf:"bytes,1,opt,name=publication,proto3" json:"publication,omitempty"`
}

func (x *GetAllPublicationsResponse) Reset() {
	*x = GetAllPublicationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllPublicationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllPublicationsResponse) ProtoMessage() {}

func (x *GetAllPublicationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllPublicationsResponse.ProtoReflect.Descriptor instead.
func (*GetAllPublicationsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{18}
}

func (x *GetAllPublicationsResponse) GetPublication() *Publication {
	if x != nil {
		return x.Publication
	}
	return nil
}

type SearchPublicationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query  string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Offset int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SearchPublicationsRequest) Reset() {
	*x = SearchPublicationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPublicationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPublicationsRequest) ProtoMessage() {}

func (x *SearchPublicationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPublicationsRequest.ProtoReflect.Descriptor instead.
func (*SearchPublicationsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{19}
}

func (x *SearchPublicationsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchPublicationsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SearchPublicationsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SearchPublicationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hits   []*Publication `protobuf:"bytes,1,rep,name=hits,proto3" json:"hits,omitempty"`
	Offset int32          `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32          `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Total  int32          `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *SearchPublicationsResponse) Reset() {
	*x = SearchPublicationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPublicationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPublicationsResponse) ProtoMessage() {}

func (x *SearchPublicationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPublicationsResponse.ProtoReflect.Descriptor instead.
func (*SearchPublicationsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{20}
}

func (x *SearchPublicationsResponse) GetHits() []*Publication {
	if x != nil {
		return x.Hits
	}
	return nil
}

func (x *SearchPublicationsResponse) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SearchPublicationsResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchPublicationsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type UpdatePublicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publication *Publication `protobuf:"bytes,1,opt,name=publication,proto3" json:"publication,omitempty"`
}

func (x *UpdatePublicationRequest) Reset() {
	*x = UpdatePublicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePublicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePublicationRequest) ProtoMessage() {}

func (x *UpdatePublicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePublicationRequest.ProtoReflect.Descriptor instead.
func (*UpdatePublicationRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{21}
}

func (x *UpdatePublicationRequest) GetPublication() *Publication {
	if x != nil {
		return x.Publication
	}
	return nil
}

type UpdatePublicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePublicationResponse) Reset() {
	*x = UpdatePublicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePublicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePublicationResponse) ProtoMessage() {}

func (x *UpdatePublicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePublicationResponse.ProtoReflect.Descriptor instead.
func (*UpdatePublicationResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{22}
}

type AddPublicationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publication *Publication `protobuf:"bytes,1,opt,name=publication,proto3" json:"publication,omitempty"`
}

func (x *AddPublicationsRequest) Reset() {
	*x = AddPublicationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPublicationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPublicationsRequest) ProtoMessage() {}

func (x *AddPublicationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPublicationsRequest.ProtoReflect.Descriptor instead.
func (*AddPublicationsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{23}
}

func (x *AddPublicationsRequest) GetPublication() *Publication {
	if x != nil {
		return x.Publication
	}
	return nil
}

type AddPublicationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messsage string `protobuf:"bytes,1,opt,name=messsage,proto3" json:"messsage,omitempty"`
}

func (x *AddPublicationsResponse) Reset() {
	*x = AddPublicationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPublicationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPublicationsResponse) ProtoMessage() {}

func (x *AddPublicationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPublicationsResponse.ProtoReflect.Descriptor instead.
func (*AddPublicationsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{24}
}

func (x *AddPublicationsResponse) GetMesssage() string {
	if x != nil {
		return x.Messsage
	}
	return ""
}

type GetDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetDatasetRequest) Reset() {
	*x = GetDatasetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetRequest) ProtoMessage() {}

func (x *GetDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetRequest.ProtoReflect.Descriptor instead.
func (*GetDatasetRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{25}
}

func (x *GetDatasetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetDatasetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset *Dataset `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
}

func (x *GetDatasetResponse) Reset() {
	*x = GetDatasetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetResponse) ProtoMessage() {}

func (x *GetDatasetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetResponse.ProtoReflect.Descriptor instead.
func (*GetDatasetResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{26}
}

func (x *GetDatasetResponse) GetDataset() *Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

type GetAllDatasetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllDatasetsRequest) Reset() {
	*x = GetAllDatasetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllDatasetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllDatasetsRequest) ProtoMessage() {}

func (x *GetAllDatasetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllDatasetsRequest.ProtoReflect.Descriptor instead.
func (*GetAllDatasetsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{27}
}

type GetAllDatasetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset *Dataset `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
}

func (x *GetAllDatasetsResponse) Reset() {
	*x = GetAllDatasetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllDatasetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllDatasetsResponse) ProtoMessage() {}

func (x *GetAllDatasetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllDatasetsResponse.ProtoReflect.Descriptor instead.
func (*GetAllDatasetsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{28}
}

func (x *GetAllDatasetsResponse) GetDataset() *Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

type SearchDatasetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query  string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Offset int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SearchDatasetsRequest) Reset() {
	*x = SearchDatasetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchDatasetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDatasetsRequest) ProtoMessage() {}

func (x *SearchDatasetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDatasetsRequest.ProtoReflect.Descriptor instead.
func (*SearchDatasetsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{29}
}

func (x *SearchDatasetsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchDatasetsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SearchDatasetsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SearchDatasetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hits   []*Dataset `protobuf:"bytes,1,rep,name=hits,proto3" json:"hits,omitempty"`
	Offset int32      `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32      `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Total  int32      `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *SearchDatasetsResponse) Reset() {
	*x = SearchDatasetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchDatasetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDatasetsResponse) ProtoMessage() {}

func (x *SearchDatasetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDatasetsResponse.ProtoReflect.Descriptor instead.
func (*SearchDatasetsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{30}
}

func (x *SearchDatasetsResponse) GetHits() []*Dataset {
	if x != nil {
		return x.Hits
	}
	return nil
}

func (x *SearchDatasetsResponse) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SearchDatasetsResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchDatasetsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type UpdateDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset *Dataset `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
}

func (x *UpdateDatasetRequest) Reset() {
	*x = UpdateDatasetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDatasetRequest) ProtoMessage() {}

func (x *UpdateDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDatasetRequest.ProtoReflect.Descriptor instead.
func (*UpdateDatasetRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateDatasetRequest) GetDataset() *Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

type UpdateDatasetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDatasetResponse) Reset() {
	*x = UpdateDatasetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDatasetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDatasetResponse) ProtoMessage() {}

func (x *UpdateDatasetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDatasetResponse.ProtoReflect.Descriptor instead.
func (*UpdateDatasetResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{32}
}

type AddDatasetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset *Dataset `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
}

func (x *AddDatasetsRequest) Reset() {
	*x = AddDatasetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDatasetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDatasetsRequest) ProtoMessage() {}

func (x *AddDatasetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDatasetsRequest.ProtoReflect.Descriptor instead.
func (*AddDatasetsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{33}
}

func (x *AddDatasetsRequest) GetDataset() *Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

type AddDatasetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messsage string `protobuf:"bytes,1,opt,name=messsage,proto3" json:"messsage,omitempty"`
}

func (x *AddDatasetsResponse) Reset() {
	*x = AddDatasetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_biblio_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDatasetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDatasetsResponse) ProtoMessage() {}

func (x *AddDatasetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_biblio_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDatasetsResponse.ProtoReflect.Descriptor instead.
func (*AddDatasetsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_biblio_proto_rawDescGZIP(), []int{34}
}

func (x *AddDatasetsResponse) GetMesssage() string {
	if x != nil {
		return x.Messsage
	}
	return ""
}

var File_api_v1_biblio_proto protoreflect.FileDescriptor

var file_api_v1_biblio_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x3e, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x22, 0xc8, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x72, 0x63, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x24, 0x0a, 0x12,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x25, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x20, 0x0a, 0x0e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x20, 0x0a, 0x0e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3c, 0x0a,
	0x09, 0x4f, 0x72, 0x63, 0x69, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x63, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xda, 0x02, 0x0a, 0x04,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd7,
	0x01, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x1d, 0x52,
	0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f,
	0x50, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x52,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x10, 0x04,
	0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x05,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x49,
	0x4e, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x06, 0x22, 0xa5, 0x08, 0x0a, 0x04, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d,
	0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3d, 0x0a,
	0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6d, 0x62, 0x61, 0x72, 0x67, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x6d, 0x62, 0x61, 0x72, 0x67, 0x6f, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x6d, 0x62, 0x61, 0x72, 0x67,
	0x6f, 0x5f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x62,
	0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x09, 0x65, 0x6d, 0x62, 0x61, 0x72, 0x67, 0x6f,
	0x54, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68,
	0x61, 0x32, 0x35, 0x36, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32,
	0x35, 0x36, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x13, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x08,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x02,
	0x22, 0xba, 0x01, 0x0a, 0x12, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x22, 0xb0, 0x01,
	0x0a, 0x08, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x4c, 0x4f, 0x50, 0x48, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x5f,
	0x53, 0x48, 0x45, 0x45, 0x54, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x47, 0x52, 0x45, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x05,
	0x22, 0xaf, 0x29, 0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x61, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x69, 0x62,
	0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x08, 0x61, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b,
	0x0a, 0x11, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6c, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x72, 0x78, 0x69, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x78, 0x69, 0x76, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x39,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x65, 0x6e,
	0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x63,
	0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14,
	0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x62, 0x6c,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x6f, 0x69, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6f,
	0x69, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x69,
	0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x69, 0x73, 0x62, 0x6e, 0x18, 0x20, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x65, 0x69, 0x73, 0x62,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x69, 0x73, 0x73, 0x6e, 0x18, 0x21, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x69, 0x73, 0x73, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x73, 0x63, 0x69, 0x5f,
	0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x73, 0x63, 0x69, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x4b, 0x0a,
	0x15, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62,
	0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x16, 0x68, 0x61,
	0x73, 0x5f, 0x70, 0x61, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x62,
	0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x14, 0x68, 0x61, 0x73, 0x50, 0x61, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x18, 0x68, 0x61, 0x73,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x69,
	0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x68, 0x61, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x16,
	0x68, 0x61, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62,
	0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x68, 0x61, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x73, 0x62, 0x6e, 0x18, 0x29, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x62, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x73, 0x73, 0x6e, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x73, 0x73, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x2e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x30, 0x0a, 0x0b, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x6c, 0x61, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x36, 0x0a, 0x0a, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x18, 0x30, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x0a,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x77, 0x6f, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x77, 0x6f, 0x73, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x77,
	0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77,
	0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x37, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x39, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64,
	0x62, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x62, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x3f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x18, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x47, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x75, 0x62, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x75, 0x62, 0x6d, 0x65, 0x64, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x14, 0x6a, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x12, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6d, 0x69, 0x73, 0x63, 0x65,
	0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x4b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x69, 0x73, 0x63,
	0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x6d,
	0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x33, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x4c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x18, 0x4d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x69,
	0x6e, 0x6b, 0x18, 0x4e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12,
	0x33, 0x0a, 0x0a, 0x6f, 0x72, 0x63, 0x69, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x4f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x72, 0x63, 0x69, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x09, 0x6f, 0x72, 0x63, 0x69, 0x64,
	0x57, 0x6f, 0x72, 0x6b, 0x22, 0xb7, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x14, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x52,
	0x54, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x4f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x4f, 0x4f, 0x4b, 0x5f, 0x43, 0x48, 0x41, 0x50, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x4f,
	0x52, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x53, 0x55,
	0x45, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x05, 0x12,
	0x15, 0x0a, 0x11, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x53, 0x45, 0x52, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x10, 0x07, 0x22, 0xaa,
	0x01, 0x0a, 0x12, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x4a, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4c,
	0x5f, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52,
	0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x4a, 0x4f, 0x55, 0x52,
	0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x4a, 0x4f, 0x55,
	0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x2a, 0x0a, 0x26, 0x4a, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x43,
	0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x45, 0x44, 0x49,
	0x4e, 0x47, 0x53, 0x5f, 0x50, 0x41, 0x50, 0x45, 0x52, 0x10, 0x03, 0x22, 0x8c, 0x01, 0x0a, 0x0e,
	0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x45, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x50, 0x41,
	0x50, 0x45, 0x52, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x52, 0x45,
	0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x42, 0x53, 0x54, 0x52, 0x41, 0x43,
	0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x22, 0xc8, 0x08, 0x0a, 0x11, 0x4d,
	0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45,
	0x57, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e,
	0x45, 0x4f, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x53, 0x54,
	0x49, 0x43, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x49, 0x53,
	0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x49, 0x42, 0x4c, 0x49, 0x4f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x59, 0x10, 0x02, 0x12, 0x20,
	0x0a, 0x1c, 0x4d, 0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x4f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x59, 0x10, 0x03,
	0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x47, 0x5f, 0x50, 0x4f, 0x53, 0x54,
	0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45,
	0x4f, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x52, 0x45,
	0x56, 0x49, 0x45, 0x57, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x49, 0x53, 0x43, 0x45, 0x4c,
	0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x52,
	0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x49, 0x53,
	0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59,
	0x10, 0x07, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45,
	0x4f, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x52,
	0x49, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x08, 0x12, 0x29,
	0x0a, 0x25, 0x4d, 0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x43, 0x59, 0x43, 0x4c, 0x4f, 0x50, 0x45, 0x44, 0x49,
	0x41, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x09, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x49, 0x53,
	0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x58, 0x48, 0x49, 0x42, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45,
	0x57, 0x10, 0x0a, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e,
	0x45, 0x4f, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x4d, 0x5f, 0x52,
	0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x0b, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x49, 0x53, 0x43, 0x45,
	0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45,
	0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x43, 0x48, 0x10, 0x0c, 0x12, 0x1c,
	0x0a, 0x18, 0x4d, 0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x4d, 0x4d, 0x41, 0x10, 0x0d, 0x12, 0x25, 0x0a, 0x21,
	0x4d, 0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x41, 0x47, 0x41, 0x5a, 0x49, 0x4e, 0x45, 0x5f, 0x50, 0x49, 0x45, 0x43,
	0x45, 0x10, 0x0e, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e,
	0x45, 0x4f, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c,
	0x10, 0x0f, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45,
	0x4f, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x5f, 0x45,
	0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x49, 0x53, 0x43,
	0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x55, 0x53, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x11, 0x12, 0x23, 0x0a,
	0x1f, 0x4d, 0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x57, 0x53, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45,
	0x10, 0x12, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45,
	0x4f, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x57, 0x53, 0x50, 0x41, 0x50,
	0x45, 0x52, 0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x10, 0x13, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x49,
	0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x14, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x49, 0x53, 0x43,
	0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x52, 0x45, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x10, 0x15, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x49, 0x53,
	0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x16,
	0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x17, 0x12,
	0x29, 0x0a, 0x25, 0x4d, 0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x43, 0x48, 0x4e, 0x49, 0x43, 0x41, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x18, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x49,
	0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x19, 0x12,
	0x27, 0x0a, 0x23, 0x4d, 0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1a, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x49, 0x53, 0x43,
	0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x48, 0x45, 0x41, 0x54, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x1b, 0x12,
	0x24, 0x0a, 0x20, 0x4d, 0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41,
	0x50, 0x45, 0x52, 0x10, 0x1c, 0x22, 0x58, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54,
	0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x43, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x22,
	0xd0, 0x02, 0x0a, 0x0e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x31, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x32, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x33, 0x10, 0x03, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x34, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x31, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x32,
	0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x33, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x31, 0x10, 0x08,
	0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x33, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x31, 0x10, 0x0a, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x44, 0x32, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x31, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56,
	0x10, 0x0d, 0x22, 0x92, 0x0a, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2b, 0x0a, 0x08, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x52, 0x08, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x2e,
	0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x39, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6f, 0x69,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6f, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65,
	0x72, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x33,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62,
	0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6d, 0x62, 0x61, 0x72, 0x67, 0x6f, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6d, 0x62, 0x61, 0x72, 0x67, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x6d, 0x62, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x74, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x6d, 0x62, 0x61, 0x72, 0x67, 0x6f, 0x54, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x54,
	0x55, 0x52, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x22, 0x28, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61,
	0x32, 0x35, 0x36, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35,
	0x36, 0x22, 0x27, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x26, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x22, 0x29, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x22, 0x27, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x56, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x69, 0x62,
	0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x5f, 0x0a, 0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x8c, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x04, 0x68, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0x54, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x52, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x23, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x42, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x62, 0x6c,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x07, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x46, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x62,
	0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0x5b, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x26, 0x0a, 0x04, 0x68, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x44, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x22, 0x17, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x0a, 0x12, 0x41, 0x64,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0x31,
	0x0a, 0x13, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2a, 0x55, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x59, 0x45, 0x53, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x4e,
	0x54, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x10, 0x02, 0x32, 0x8e, 0x08, 0x0a, 0x06, 0x42, 0x69, 0x62,
	0x6c, 0x69, 0x6f, 0x12, 0x42, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x19,
	0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x62, 0x69, 0x62, 0x6c,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x42, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x19, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x55, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e,
	0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x63, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x61, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e,
	0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0f, 0x41, 0x64,
	0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x2e,
	0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x49, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x55, 0x0a, 0x0e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x20,
	0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x67, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x2f, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x2d, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_api_v1_biblio_proto_rawDescOnce sync.Once
	file_api_v1_biblio_proto_rawDescData = file_api_v1_biblio_proto_rawDesc
)

func file_api_v1_biblio_proto_rawDescGZIP() []byte {
	file_api_v1_biblio_proto_rawDescOnce.Do(func() {
		file_api_v1_biblio_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_biblio_proto_rawDescData)
	})
	return file_api_v1_biblio_proto_rawDescData
}

var file_api_v1_biblio_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_api_v1_biblio_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_api_v1_biblio_proto_goTypes = []interface{}{
	(Confirmation)(0),                   // 0: biblio.v1.Confirmation
	(Link_Relation)(0),                  // 1: biblio.v1.Link.Relation
	(File_AccessLevel)(0),               // 2: biblio.v1.File.AccessLevel
	(File_PublicationVersion)(0),        // 3: biblio.v1.File.PublicationVersion
	(File_Relation)(0),                  // 4: biblio.v1.File.Relation
	(Publication_Type)(0),               // 5: biblio.v1.Publication.Type
	(Publication_JournalArticleType)(0), // 6: biblio.v1.Publication.JournalArticleType
	(Publication_ConferenceType)(0),     // 7: biblio.v1.Publication.ConferenceType
	(Publication_MiscellaneousType)(0),  // 8: biblio.v1.Publication.MiscellaneousType
	(Publication_Status)(0),             // 9: biblio.v1.Publication.Status
	(Publication_Classification)(0),     // 10: biblio.v1.Publication.Classification
	(Dataset_Status)(0),                 // 11: biblio.v1.Dataset.Status
	(*Text)(nil),                        // 12: biblio.v1.Text
	(*Contributor)(nil),                 // 13: biblio.v1.Contributor
	(*RelatedPublication)(nil),          // 14: biblio.v1.RelatedPublication
	(*RelatedOrganization)(nil),         // 15: biblio.v1.RelatedOrganization
	(*RelatedProject)(nil),              // 16: biblio.v1.RelatedProject
	(*RelatedDataset)(nil),              // 17: biblio.v1.RelatedDataset
	(*OrcidWork)(nil),                   // 18: biblio.v1.OrcidWork
	(*Link)(nil),                        // 19: biblio.v1.Link
	(*File)(nil),                        // 20: biblio.v1.File
	(*Publication)(nil),                 // 21: biblio.v1.Publication
	(*Dataset)(nil),                     // 22: biblio.v1.Dataset
	(*GetFileRequest)(nil),              // 23: biblio.v1.GetFileRequest
	(*GetFileResponse)(nil),             // 24: biblio.v1.GetFileResponse
	(*AddFileRequest)(nil),              // 25: biblio.v1.AddFileRequest
	(*AddFileResponse)(nil),             // 26: biblio.v1.AddFileResponse
	(*GetPublicationRequest)(nil),       // 27: biblio.v1.GetPublicationRequest
	(*GetPublicationResponse)(nil),      // 28: biblio.v1.GetPublicationResponse
	(*GetAllPublicationsRequest)(nil),   // 29: biblio.v1.GetAllPublicationsRequest
	(*GetAllPublicationsResponse)(nil),  // 30: biblio.v1.GetAllPublicationsResponse
	(*SearchPublicationsRequest)(nil),   // 31: biblio.v1.SearchPublicationsRequest
	(*SearchPublicationsResponse)(nil),  // 32: biblio.v1.SearchPublicationsResponse
	(*UpdatePublicationRequest)(nil),    // 33: biblio.v1.UpdatePublicationRequest
	(*UpdatePublicationResponse)(nil),   // 34: biblio.v1.UpdatePublicationResponse
	(*AddPublicationsRequest)(nil),      // 35: biblio.v1.AddPublicationsRequest
	(*AddPublicationsResponse)(nil),     // 36: biblio.v1.AddPublicationsResponse
	(*GetDatasetRequest)(nil),           // 37: biblio.v1.GetDatasetRequest
	(*GetDatasetResponse)(nil),          // 38: biblio.v1.GetDatasetResponse
	(*GetAllDatasetsRequest)(nil),       // 39: biblio.v1.GetAllDatasetsRequest
	(*GetAllDatasetsResponse)(nil),      // 40: biblio.v1.GetAllDatasetsResponse
	(*SearchDatasetsRequest)(nil),       // 41: biblio.v1.SearchDatasetsRequest
	(*SearchDatasetsResponse)(nil),      // 42: biblio.v1.SearchDatasetsResponse
	(*UpdateDatasetRequest)(nil),        // 43: biblio.v1.UpdateDatasetRequest
	(*UpdateDatasetResponse)(nil),       // 44: biblio.v1.UpdateDatasetResponse
	(*AddDatasetsRequest)(nil),          // 45: biblio.v1.AddDatasetsRequest
	(*AddDatasetsResponse)(nil),         // 46: biblio.v1.AddDatasetsResponse
	(*timestamppb.Timestamp)(nil),       // 47: google.protobuf.Timestamp
}
var file_api_v1_biblio_proto_depIdxs = []int32{
	1,  // 0: biblio.v1.Link.relation:type_name -> biblio.v1.Link.Relation
	2,  // 1: biblio.v1.File.access_level:type_name -> biblio.v1.File.AccessLevel
	47, // 2: biblio.v1.File.date_created:type_name -> google.protobuf.Timestamp
	47, // 3: biblio.v1.File.date_updated:type_name -> google.protobuf.Timestamp
	2,  // 4: biblio.v1.File.embargo_to:type_name -> biblio.v1.File.AccessLevel
	3,  // 5: biblio.v1.File.publication_version:type_name -> biblio.v1.File.PublicationVersion
	4,  // 6: biblio.v1.File.relation:type_name -> biblio.v1.File.Relation
	5,  // 7: biblio.v1.Publication.type:type_name -> biblio.v1.Publication.Type
	9,  // 8: biblio.v1.Publication.status:type_name -> biblio.v1.Publication.Status
	12, // 9: biblio.v1.Publication.abstract:type_name -> biblio.v1.Text
	13, // 10: biblio.v1.Publication.author:type_name -> biblio.v1.Contributor
	10, // 11: biblio.v1.Publication.classification:type_name -> biblio.v1.Publication.Classification
	47, // 12: biblio.v1.Publication.date_created:type_name -> google.protobuf.Timestamp
	47, // 13: biblio.v1.Publication.date_updated:type_name -> google.protobuf.Timestamp
	47, // 14: biblio.v1.Publication.date_from:type_name -> google.protobuf.Timestamp
	47, // 15: biblio.v1.Publication.date_until:type_name -> google.protobuf.Timestamp
	15, // 16: biblio.v1.Publication.organization:type_name -> biblio.v1.RelatedOrganization
	13, // 17: biblio.v1.Publication.editor:type_name -> biblio.v1.Contributor
	20, // 18: biblio.v1.Publication.file:type_name -> biblio.v1.File
	0,  // 19: biblio.v1.Publication.has_confidential_data:type_name -> biblio.v1.Confirmation
	0,  // 20: biblio.v1.Publication.has_patent_application:type_name -> biblio.v1.Confirmation
	0,  // 21: biblio.v1.Publication.has_publications_planned:type_name -> biblio.v1.Confirmation
	0,  // 22: biblio.v1.Publication.has_published_material:type_name -> biblio.v1.Confirmation
	12, // 23: biblio.v1.Publication.lay_summary:type_name -> biblio.v1.Text
	13, // 24: biblio.v1.Publication.supervisor:type_name -> biblio.v1.Contributor
	6,  // 25: biblio.v1.Publication.journal_article_type:type_name -> biblio.v1.Publication.JournalArticleType
	7,  // 26: biblio.v1.Publication.conference_type:type_name -> biblio.v1.Publication.ConferenceType
	8,  // 27: biblio.v1.Publication.miscellaneous_type:type_name -> biblio.v1.Publication.MiscellaneousType
	16, // 28: biblio.v1.Publication.project:type_name -> biblio.v1.RelatedProject
	17, // 29: biblio.v1.Publication.dataset:type_name -> biblio.v1.RelatedDataset
	19, // 30: biblio.v1.Publication.link:type_name -> biblio.v1.Link
	18, // 31: biblio.v1.Publication.orcid_work:type_name -> biblio.v1.OrcidWork
	11, // 32: biblio.v1.Dataset.status:type_name -> biblio.v1.Dataset.Status
	12, // 33: biblio.v1.Dataset.abstract:type_name -> biblio.v1.Text
	13, // 34: biblio.v1.Dataset.author:type_name -> biblio.v1.Contributor
	47, // 35: biblio.v1.Dataset.date_created:type_name -> google.protobuf.Timestamp
	47, // 36: biblio.v1.Dataset.date_updated:type_name -> google.protobuf.Timestamp
	47, // 37: biblio.v1.Dataset.date_from:type_name -> google.protobuf.Timestamp
	47, // 38: biblio.v1.Dataset.date_until:type_name -> google.protobuf.Timestamp
	16, // 39: biblio.v1.Dataset.project:type_name -> biblio.v1.RelatedProject
	14, // 40: biblio.v1.Dataset.publication:type_name -> biblio.v1.RelatedPublication
	13, // 41: biblio.v1.Dataset.contributor:type_name -> biblio.v1.Contributor
	15, // 42: biblio.v1.Dataset.organization:type_name -> biblio.v1.RelatedOrganization
	21, // 43: biblio.v1.GetPublicationResponse.publication:type_name -> biblio.v1.Publication
	21, // 44: biblio.v1.GetAllPublicationsResponse.publication:type_name -> biblio.v1.Publication
	21, // 45: biblio.v1.SearchPublicationsResponse.hits:type_name -> biblio.v1.Publication
	21, // 46: biblio.v1.UpdatePublicationRequest.publication:type_name -> biblio.v1.Publication
	21, // 47: biblio.v1.AddPublicationsRequest.publication:type_name -> biblio.v1.Publication
	22, // 48: biblio.v1.GetDatasetResponse.dataset:type_name -> biblio.v1.Dataset
	22, // 49: biblio.v1.GetAllDatasetsResponse.dataset:type_name -> biblio.v1.Dataset
	22, // 50: biblio.v1.SearchDatasetsResponse.hits:type_name -> biblio.v1.Dataset
	22, // 51: biblio.v1.UpdateDatasetRequest.dataset:type_name -> biblio.v1.Dataset
	22, // 52: biblio.v1.AddDatasetsRequest.dataset:type_name -> biblio.v1.Dataset
	23, // 53: biblio.v1.Biblio.GetFile:input_type -> biblio.v1.GetFileRequest
	25, // 54: biblio.v1.Biblio.AddFile:input_type -> biblio.v1.AddFileRequest
	27, // 55: biblio.v1.Biblio.GetPublication:input_type -> biblio.v1.GetPublicationRequest
	29, // 56: biblio.v1.Biblio.GetAllPublications:input_type -> biblio.v1.GetAllPublicationsRequest
	31, // 57: biblio.v1.Biblio.SearchPublications:input_type -> biblio.v1.SearchPublicationsRequest
	33, // 58: biblio.v1.Biblio.UpdatePublication:input_type -> biblio.v1.UpdatePublicationRequest
	35, // 59: biblio.v1.Biblio.AddPublications:input_type -> biblio.v1.AddPublicationsRequest
	37, // 60: biblio.v1.Biblio.GetDataset:input_type -> biblio.v1.GetDatasetRequest
	39, // 61: biblio.v1.Biblio.GetAllDatasets:input_type -> biblio.v1.GetAllDatasetsRequest
	41, // 62: biblio.v1.Biblio.SearchDatasets:input_type -> biblio.v1.SearchDatasetsRequest
	43, // 63: biblio.v1.Biblio.UpdateDataset:input_type -> biblio.v1.UpdateDatasetRequest
	45, // 64: biblio.v1.Biblio.AddDatasets:input_type -> biblio.v1.AddDatasetsRequest
	24, // 65: biblio.v1.Biblio.GetFile:output_type -> biblio.v1.GetFileResponse
	26, // 66: biblio.v1.Biblio.AddFile:output_type -> biblio.v1.AddFileResponse
	28, // 67: biblio.v1.Biblio.GetPublication:output_type -> biblio.v1.GetPublicationResponse
	30, // 68: biblio.v1.Biblio.GetAllPublications:output_type -> biblio.v1.GetAllPublicationsResponse
	32, // 69: biblio.v1.Biblio.SearchPublications:output_type -> biblio.v1.SearchPublicationsResponse
	34, // 70: biblio.v1.Biblio.UpdatePublication:output_type -> biblio.v1.UpdatePublicationResponse
	36, // 71: biblio.v1.Biblio.AddPublications:output_type -> biblio.v1.AddPublicationsResponse
	38, // 72: biblio.v1.Biblio.GetDataset:output_type -> biblio.v1.GetDatasetResponse
	40, // 73: biblio.v1.Biblio.GetAllDatasets:output_type -> biblio.v1.GetAllDatasetsResponse
	42, // 74: biblio.v1.Biblio.SearchDatasets:output_type -> biblio.v1.SearchDatasetsResponse
	44, // 75: biblio.v1.Biblio.UpdateDataset:output_type -> biblio.v1.UpdateDatasetResponse
	46, // 76: biblio.v1.Biblio.AddDatasets:output_type -> biblio.v1.AddDatasetsResponse
	65, // [65:77] is the sub-list for method output_type
	53, // [53:65] is the sub-list for method input_type
	53, // [53:53] is the sub-list for extension type_name
	53, // [53:53] is the sub-list for extension extendee
	0,  // [0:53] is the sub-list for field type_name
}

func init() { file_api_v1_biblio_proto_init() }
func file_api_v1_biblio_proto_init() {
	if File_api_v1_biblio_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v1_biblio_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Text); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contributor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedPublication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedOrganization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedDataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrcidWork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Publication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllPublicationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllPublicationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchPublicationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchPublicationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePublicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePublicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPublicationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPublicationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllDatasetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllDatasetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchDatasetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchDatasetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDatasetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDatasetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDatasetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_biblio_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDatasetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_biblio_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1_biblio_proto_goTypes,
		DependencyIndexes: file_api_v1_biblio_proto_depIdxs,
		EnumInfos:         file_api_v1_biblio_proto_enumTypes,
		MessageInfos:      file_api_v1_biblio_proto_msgTypes,
	}.Build()
	File_api_v1_biblio_proto = out.File
	file_api_v1_biblio_proto_rawDesc = nil
	file_api_v1_biblio_proto_goTypes = nil
	file_api_v1_biblio_proto_depIdxs = nil
}
