@use "sass:math";

// The suggestions list (dropdown) is appended to the document's body so the CSS variables should be defined at root-level
:root {
  --tagify-dd-color-primary: rgb(
    53,
    149,
    246
  ); // should be same as "$tags-focus-border-color"
  --tagify-dd-bg-color: white;
  --tagify-dd-item-pad: 0.3em 0.5em; // should be same as $tag-pad (below)
}

.tagify {
  // SCSS "default" allows overriding variables BEFORE they are set in the below lines of code
  $self: &;
  $tags-border-color: $gray-200 !default;
  $tags-hover-border-color: $gray-200 !default;
  $tags-focus-border-color: $blue !default;
  $tags-focus-glow-color: $blue-200 !default;
  $tagMargin: 5px !default;
  $tag-pad: 0.3em 0.5em !default;
  $tag-min-width: 1ch !default;
  $tag-max-width: auto !default;
  $tag-text-color: $text !default;
  $tag-text-color--edit: $black !default;
  $tag-bg: $blue-100 !default;
  $tag-hover: $gray-100 !default;
  $tag-remove: $red-200 !default;
  $tag-remove-btn-color: $tag-text-color !default;
  $tag-remove-btn-bg: none !default;
  $tag-remove-btn-bg--hover: darken($tag-remove, 9) !default;
  $tag-invalid-color: $tag-remove !default;
  $tag-invalid-bg: rgba($tag-remove, 0.5) !default;
  $tag-inset-shadow-size: 1.1em !default;
  $tag-hide-transition: 0.3s !default;
  $placeholder-color: rgba($tag-text-color, 0.4) !default;
  $placeholder-color-focus: rgba($tag-text-color, 0.25) !default;
  $input-color: inherit !default;
  $tagify-dd-bg-color: $white !default;
  $tagify-dd-color-primary: $blue !default;

  // CSS variables
  --tags-disabled-bg: #f1f1f1;
  --tags-border-color: #{$tags-border-color};
  --tags-hover-border-color: #{$tags-hover-border-color};
  --tags-focus-border-color: #{$tags-focus-border-color};
  --tag-border-radius: 3px;
  --tag-bg: #{$tag-bg};
  --tag-hover: #{$tag-hover};
  --tag-text-color: #{$tag-text-color};
  --tag-text-color--edit: #{$tag-text-color--edit};
  --tag-pad: #{$tag-pad};
  --tag-inset-shadow-size: #{$tag-inset-shadow-size};
  --tag-invalid-color: #{$tag-invalid-color};
  --tag-invalid-bg: #{$tag-invalid-bg};
  --tag-remove-bg: #{$tag-remove};
  --tag-remove-btn-color: #{$tag-remove-btn-color};
  --tag-remove-btn-bg: #{$tag-remove-btn-bg};
  --tag-remove-btn-bg--hover: #{$tag-remove-btn-bg--hover};
  --input-color: #{$input-color};
  --tag--min-width: #{$tag-min-width};
  --tag--max-width: #{$tag-max-width};
  --tag-hide-transition: #{$tag-hide-transition};
  --placeholder-color: #{$placeholder-color};
  --placeholder-color-focus: #{$placeholder-color-focus};
  --loader-size: 0.8em;
  --readonly-striped: 1;

  @mixin firefox {
    @at-root {
      @-moz-document url-prefix() {
        & {
          @content;
        }
      }
    }
  }

  @mixin placeholder($show: true) {
    transition: 0.2s ease-out;

    @if $show == true {
      opacity: 1;
      transform: none;
    } @else {
      opacity: 0;
      transform: translatex(6px);
    }
  }

  @mixin loader() {
    content: "";
    vertical-align: middle;
    opacity: 1;
    width: 0.7em;
    height: 0.7em;
    width: var(--loader-size);
    height: var(--loader-size);
    min-width: 0;
    border: 3px solid;
    border-color: #eee #bbb #888 transparent;
    border-radius: 50%;
    animation: rotateLoader 0.4s infinite linear;
  }

  @mixin tagReadonlyBG($size: 5px) {
    animation: readonlyStyles 1s calc(-1s * (var(--readonly-striped) - 1))
      paused;

    @keyframes readonlyStyles {
      0% {
        background: linear-gradient(
            45deg,
            var(--tag-bg) 25%,
            transparent 25%,
            transparent 50%,
            var(--tag-bg) 50%,
            var(--tag-bg) 75%,
            transparent 75%,
            transparent
          )
          0 /#{$size} #{$size};
        box-shadow: none;
        filter: brightness(0.95);
      }
    }
  }

  @keyframes tags--bump {
    30% {
      transform: scale(1.2);
    }
  }

  @keyframes rotateLoader {
    to {
      transform: rotate(1turn);
    }
  }

  display: inline-flex;
  align-items: flex-start;
  flex-wrap: wrap;
  border: 1px solid var(--tags-border-color);
  padding: 0;
  line-height: 0;
  cursor: text;
  outline: none;
  position: relative;
  box-sizing: border-box;
  transition: 0.1s;

  &:hover:not(.tagify--focus):not(.tagify--invalid) {
    --tags-border-color: var(--tags-hover-border-color);
  }

  &[disabled] {
    background: var(--tags-disabled-bg);
    filter: saturate(0);
    opacity: 0.5;
    pointer-events: none;
  }

  // Global "read-only" mode (no input button)
  &[readonly],
  &[disabled] {
    &#{$self}--select {
      pointer-events: none;
    }

    &:not(#{$self}--mix):not(#{$self}--select) {
      cursor: default;
      > #{$self}__input {
        visibility: hidden;
        width: 0;
        margin: $tagMargin 0;
      }

      #{$self}__tag > div {
        padding: var(--tag-pad);
        &::before {
          @include tagReadonlyBG;
        }
      }
    }

    #{ $self }__tag__removeBtn {
      display: none;
    }
  }

  &--loading {
    #{ $self }__input {
      > br:last-child {
        display: none;
      }
      &::before {
        content: none;
      }
      &::after {
        @include loader;
        content: "" !important;
        margin: -2px 0 -2px 0.5em;
      }
      &:empty {
        &::after {
          margin-left: 0;
        }
      }
    }
  }

  ///////////////////////////////////////////
  // Hides originals
  + input,
  + textarea {
    position: absolute !important;
    left: -9999em !important;
    transform: scale(0) !important;
  }

  &__tag {
    display: inline-flex;
    align-items: center;
    margin: $tagMargin;
    position: relative;
    z-index: 1;
    outline: none;
    line-height: normal;
    cursor: default;
    transition: 0.13s ease-out;

    > div {
      // :not([contenteditable])
      vertical-align: top;
      box-sizing: border-box;
      max-width: 100%;
      padding: var(--tag-pad);
      color: var(--tag-text-color);
      line-height: inherit;
      border-radius: var(--tag-border-radius);
      // user-select    : none;  // should allow selecting text if the user wishes to copy something
      white-space: nowrap;
      transition: 0.13s ease-out;

      > * {
        white-space: pre-wrap;
        overflow: hidden;
        text-overflow: ellipsis;
        display: inline-block;
        vertical-align: top;
        min-width: var(--tag--min-width);
        max-width: var(--tag--max-width);
        transition:
          0.8s ease,
          0.1s color;

        &[contenteditable] {
          outline: none;
          user-select: text;
          cursor: text;
          // fix: sometimes the caret after the last character wasn't visible (when setting {backspace:"edit"})
          margin: -2px;
          padding: 2px;
          max-width: 350px;
        }
      }

      &::before {
        content: "";
        position: absolute;
        border-radius: inherit;
        inset: var(--tag-bg-inset, 0);
        z-index: -1;
        pointer-events: none;
        transition: 120ms ease;
        animation: tags--bump 0.3s ease-out 1;
        box-shadow: 0 0 0 var(--tag-inset-shadow-size) var(--tag-bg) inset;
        background-color: var(--tag-bg);
      }
    }

    &:hover:not([readonly]),
    &:focus {
      div {
        // :not([contenteditable])
        &::before {
          --tag-bg-inset: #{math.div(-$tagMargin, 2)};
          --tag-bg: var(--tag-hover);
          background-color: var(--tag-hover);
        }
      }
    }

    &--loading {
      pointer-events: none;

      .tagify__tag__removeBtn {
        display: none;
      }

      &::after {
        --loader-size: 0.4em;
        @include loader;
        margin: 0 0.5em 0 -0.1em;
      }
    }

    &--flash {
      div::before {
        animation: none;
      }
    }

    &--hide {
      width: 0 !important;
      padding-left: 0;
      padding-right: 0;
      margin-left: 0;
      margin-right: 0;
      opacity: 0;
      transform: scale(0);
      transition: var(--tag-hide-transition);
      pointer-events: none;

      > div > * {
        white-space: nowrap;
      }
    }

    &#{ $self } {
      &--noAnim {
        > div::before {
          animation: none;
        }
      }

      &--notAllowed:not(.tagify__tag--editable) {
        div {
          > span {
            opacity: 0.5;
          } // filter:blur(.2px);
          &::before {
            --tag-bg: var(--tag-invalid-bg);
            transition: 0.2s;
          }
        }
      }
    }

    &[readonly] {
      #{ $self }__tag__removeBtn {
        display: none;
      }
      > div {
        // padding: $tag-pad;
        &::before {
          @include tagReadonlyBG;
        }
      }
    }

    &--editable {
      > div {
        color: var(--tag-text-color--edit);

        &::before {
          box-shadow: 0 0 0 2px var(--tag-hover) inset !important;
        }
      }

      > #{$self}__tag__removeBtn {
        pointer-events: none;

        &::after {
          opacity: 0;
          transform: translateX(100%) translateX(5px);
        }
      }

      &.tagify--invalid {
        > div {
          &::before {
            box-shadow: 0 0 0 2px var(--tag-invalid-color) inset !important;
          }
        }
      }
    }

    &__removeBtn {
      $size: 20px;

      order: 5;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      border-radius: 50px;
      cursor: pointer;
      font: calc($size/1.2) Arial;
      background: var(--tag-remove-btn-bg);
      color: var(--tag-remove-btn-color);

      width: $size;
      height: $size;
      margin-right: math.div($size, 3);
      margin-left: auto;

      overflow: hidden;
      transition: 0.2s ease-out;

      &::after {
        content: "\00D7";
        transition:
          0.3s,
          color 0s;
      }

      &:hover {
        color: white;
        background: var(--tag-remove-btn-bg--hover);
        // + span{ box-shadow: 0 0 0 2px $tag-remove inset; transition:.2s; }
        + div {
          > span {
            opacity: 0.5;
          } // filter:blur(.2px);
          &::before {
            box-shadow: 0 0 0 var(--tag-inset-shadow-size)
              var(--tag-remove-bg, rgba($tag-remove, 0.3)) inset !important;
            background-color: var(--tag-remove-bg) !important;
          }
        }
      }
    }
  }

  &:not(#{$self}--mix) {
    #{ $self }__input {
      // https://stackoverflow.com/a/13470210/104380
      br {
        display: none;
      }
      * {
        display: inline;
        white-space: nowrap;
      }
    }
  }

  ///////////////////////////////////////////
  // Holds the placeholder & the tags input
  &__input {
    $placeholder-width: 110px;
    flex-grow: 1;
    display: inline-block;
    min-width: $placeholder-width;
    margin: $tagMargin;
    padding: var(--tag-pad);
    line-height: normal;
    position: relative;
    white-space: pre-wrap; // #160 Line break (\n) as delimeter
    color: var(--input-color);
    box-sizing: inherit;

    &:empty {
      @include firefox {
        // clicking twice on the input (not fast) disallows typing (bug) only when the input has "display:flex".
        // disabled the below rule for the above reason:
        //  display: flex; // https://bugzilla.mozilla.org/show_bug.cgi?id=904846#c45
      }

      &::before {
        position: static;
      }
    }

    &:focus {
      outline: none;

      &::before {
        @include placeholder(false);

        /* ALL MS BROWSERS: hide placeholder (on focus) otherwise the caret is placed after it, which is weird */
        /* IE Edge 12+ CSS styles go here */
        @supports (-ms-ime-align: auto) {
          display: none;
        }
      }

      &:empty {
        &::before {
          @include placeholder(true);

          // Seems to be fixed! no need for the below hack
          // @include firefox {
          //     // remove ":after" pseudo element: https://bugzilla.mozilla.org/show_bug.cgi?id=904846#c45
          //     content: unset;
          //     // display:inline-block;
          // }

          color: $placeholder-color-focus;
          color: var(--placeholder-color-focus);
        }

        &::after {
          @include firefox {
            display: none;
          }
        }
      }
    }

    &::before {
      content: attr(data-placeholder);
      height: 1em;
      line-height: 1em;
      margin: auto 0;
      z-index: 1;
      color: var(--placeholder-color);
      white-space: nowrap;
      pointer-events: none;
      opacity: 0;
      position: absolute;
    }
    /* Seems firefox newer versions don't need this any more
        @supports ( -moz-appearance:none ){
            &::before{
                line-height: inherit;
                position:relative;
            }
        }
        */
    // tries to suggest the rest of the value from the first item in the whitelist which matches it
    &::after {
      content: attr(data-suggest);
      display: inline-block;
      vertical-align: middle;

      position: absolute;
      min-width: calc(100% - 1.5em);
      text-overflow: ellipsis;
      overflow: hidden;

      white-space: pre; /* allows spaces at the beginning */
      color: var(--tag-text-color);
      opacity: 0.3;
      pointer-events: none;
      max-width: 100px;
    }

    // &--invalid{
    //     // color: $invalid-input-color;
    // }

    // in "mix mode" the tags might be next to plain text, so spread things a bit
    #{ $self }__tag {
      margin: 0 1px;
    }
  }

  &--mix {
    display: block; // display:flex makes Chrome generates <div><br></div> when pressing ENTER key

    #{ $self }__input {
      padding: $tagMargin;
      margin: 0;
      width: 100%;
      height: 100%;
      line-height: 1.5;
      display: block; // needed to resolve this bug: https://bugs.chromium.org/p/chromium/issues/detail?id=1182621

      &::before {
        height: auto;
        display: none;
        line-height: inherit;
      }

      // no suggested-complete are shown in mix-mode while higilighting dropdown options
      &::after {
        content: none;
      }
    }
  }

  &--empty {
    #{ $self }__input {
      &::before {
        @include placeholder;
        display: inline-block;
        width: auto;

        #{ $self }--mix & {
          display: inline-block;
        }
      }
    }
  }

  &--focus {
    --tags-border-color: var(--tags-focus-border-color);
    transition: 0s;
    box-shadow:
      var(--bs-box-shadow-inset),
      0 0 0 0.25rem $blue-100;
  }

  &--invalid {
    --tags-border-color: #{$tag-invalid-color};
  }
}
