package views

import (
	"context"
	"github.com/ugent-library/biblio-backoffice/ctx"
	"github.com/ugent-library/biblio-backoffice/models"
	"strings"
	"time"
)

type ActivityObject int
type ActivityEvent int

const (
	PublicationObject ActivityObject = iota
	DatasetObject

	CreateEvent ActivityEvent = iota
	PublishEvent
	RepublishEvent
	WithdrawEvent
	LockEvent
	UnlockEvent
	UpdateEvent
	MessageEvent
)

var activityEventTexts = map[ActivityEvent]string{
	CreateEvent:    "started",
	PublishEvent:   "published",
	RepublishEvent: "republished",
	WithdrawEvent:  "withdrew",
	LockEvent:      "locked",
	UnlockEvent:    "unlocked",
	UpdateEvent:    "edited",
	MessageEvent:   "left a comment on",
}

var activityEventIcons = map[ActivityEvent]string{
	CreateEvent:    "if-article",
	PublishEvent:   "if-book",
	RepublishEvent: "if-book",
	WithdrawEvent:  "if-arrow-go-back",
	LockEvent:      "if-lock",
	UnlockEvent:    "if-lock-unlock",
	UpdateEvent:    "if-edit",
	MessageEvent:   "if-message",
}

type Activity struct {
	Event     ActivityEvent
	User      *models.Person
	Object    ActivityObject
	Datestamp time.Time
	Status    string
	URL       string
	RecordID  string
	Title     string
}

templ RecentActivity(c *ctx.Ctx, acts []Activity) {
	<div class="mb-6">
		<div class="bc-toolbar">
			<div class="bc-toolbar-left">
				<h2>Recent activity</h2>
			</div>
		</div>
		@ActivityList(c, acts, nil)
	</div>
}

templ ActivityList(c *ctx.Ctx, acts []Activity, currentRecordID *string) {
	if len(acts) > 0 {
		<ul class="c-activity-list">
			for _, act := range acts {
				<li class="c-activity-item">
					<div class="c-activity-item__avatar-wrapper">
						<div class="bc-avatar bc-avatar--muted bc-avatar--small">
							<i class={ "if",  activityEventIcons[act.Event] }></i>
						</div>
					</div>
					<div class="c-activity-item__content">
						<div class="c-activity-item__activity">
							<div class="c-activity-item__date">{ act.Datestamp.In(c.Timezone).Format("2006-01-02 15:04") }</div>
							<div class="c-activity-item__text">
								@templ.Raw(generateActivityText(c, act, currentRecordID))
							</div>
						</div>
					</div>
				</li>
			}
		</ul>
	} else {
		<p class="text-muted">No activity to show.</p>
	}
}

func generateActivityText(c *ctx.Ctx, act Activity, currentRecordID *string) string {
	sb := strings.Builder{}

	if act.User != nil && act.User.ID == c.User.ID {
		sb.WriteString("You")
	} else if act.User != nil && c.Repo.CanCurate(act.User) && !c.Repo.CanCurate(c.User) {
		sb.WriteString("A Biblio team member")
	} else if act.User != nil {
		sb.WriteString(act.User.FullName)
	} else {
		sb.WriteString("System")
	}

	sb.WriteString(" ")
	sb.WriteString(activityEventTexts[act.Event])
	sb.WriteString(" ")

	isCurrentRecord := currentRecordID != nil && *currentRecordID == act.RecordID
	if isCurrentRecord {
		sb.WriteString("this")
	} else {
		sb.WriteString("a")
	}

	if act.Event == CreateEvent {
		sb.WriteString(" ")
		sb.WriteString(c.Loc.Get("activity_statuses." + act.Status))
	}

	sb.WriteString(" ")

	switch act.Object {
	case PublicationObject:
		sb.WriteString("publication")
	case DatasetObject:
		sb.WriteString("dataset")
	}

	if !isCurrentRecord {
		sb.WriteString(": ")
		titleLink(act).Render(context.Background(), &sb)
	}

	sb.WriteString(".")

	return sb.String()
}

templ titleLink(act Activity) {
	<a class="c-activity-item__link" href={ templ.URL(act.URL) }>
		if act.Title != "" {
			{ act.Title }
		} else {
			Untitled record
		}
	</a>
}
