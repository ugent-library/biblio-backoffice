// Code generated by templ@v0.2.334 DO NOT EDIT.

package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"github.com/ugent-library/biblio-backoffice/ctx"
)

type CuratorDashboardPublicationsArgs struct {
	Type                 string
	ActiveSubNav         string
	UPublications        map[string]map[string][]string
	APublications        map[string]map[string][]string
	UFaculties           []string
	AFaculties           []string
	PTypes               map[string]string
	UYear                string
	AYear                string
	AllUPublicationYears []string
	AllAPublicationYears []string
}

func CuratorDashboardPublications(c *ctx.Ctx, args *CuratorDashboardPublicationsArgs) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var_2 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			_, err = templBuffer.WriteString("<div class=\"c-sub-sidebar c-sidebar--bordered\"><div class=\"bc-navbar bc-navbar--large bc-navbar--bordered-bottom\"><div class=\"bc-toolbar\"><div class=\"bc-toolbar-left\"><div class=\"bc-toolbar-item\"><h4 class=\"bc-toolbar-title\">")
			if err != nil {
				return err
			}
			var_3 := `Dashboard`
			_, err = templBuffer.WriteString(var_3)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</h4></div></div></div></div><div class=\"c-sub-sidebar__menu my-6\">")
			if err != nil {
				return err
			}
			err = curatorDashboardShowNav(c, args.ActiveSubNav).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div></div> <div class=\"w-100 u-scroll-wrapper\"><div class=\"bg-white\"><div class=\"bc-navbar bc-navbar--large bc-navbar--white bc-navbar--bordered-bottom\"><div class=\"bc-toolbar bc-toolbar--auto\"><div class=\"bc-toolbar-left\"><div class=\"bc-toolbar-item\"><h4 class=\"bc-toolbar-title\">")
			if err != nil {
				return err
			}
			var_4 := `Publications`
			_, err = templBuffer.WriteString(var_4)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</h4></div></div></div></div></div><div class=\"u-scroll-wrapper__body w-100 p-6\"><div class=\"pb-5\"><p><strong>")
			if err != nil {
				return err
			}
			var_5 := `Why are the totals wrong?`
			_, err = templBuffer.WriteString(var_5)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</strong></p><p>")
			if err != nil {
				return err
			}
			var_6 := `Some publications are associated with more than 1 faculty.`
			_, err = templBuffer.WriteString(var_6)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</p><p>")
			if err != nil {
				return err
			}
			var_7 := `The category "all" in the table header may contain less publications, as it only counts each publication once.`
			_, err = templBuffer.WriteString(var_7)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</p></div><div class=\"card w-100 mb-6\"><div class=\"card-header card-header--auto \"><div class=\"bc-toolbar bc-toolbar--auto\"><div class=\"bc-toolbar-left\"><div class=\"bc-toolbar-item\"><h3 class=\"card-title\">")
			if err != nil {
				return err
			}
			var_8 := `Public with classification U`
			_, err = templBuffer.WriteString(var_8)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</h3></div></div><div class=\"bc-toolbar-right text-align-right\"><div><select class=\"form-select w-100\" name=\"uyear\" hx-post=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(c.PathTo("dashboard_refresh_upublications", "type", args.Type).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-target=\"#tbl-upublications\" hx-include=\"[name=&#39;ayear&#39;]\" hx-indicator=\"#tbl-upublications .spinner-card-backdrop\"><option value=\"\">")
			if err != nil {
				return err
			}
			var_9 := `All years`
			_, err = templBuffer.WriteString(var_9)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</option>")
			if err != nil {
				return err
			}
			for _, uyear := range args.AllUPublicationYears {
				if uyear == args.UYear {
					_, err = templBuffer.WriteString("<option value=\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(templ.EscapeString(uyear))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\" selected>")
					if err != nil {
						return err
					}
					var var_10 string = uyear
					_, err = templBuffer.WriteString(templ.EscapeString(var_10))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</option>")
					if err != nil {
						return err
					}
				} else {
					_, err = templBuffer.WriteString("<option value=\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(templ.EscapeString(uyear))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\">")
					if err != nil {
						return err
					}
					var var_11 string = uyear
					_, err = templBuffer.WriteString(templ.EscapeString(var_11))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</option>")
					if err != nil {
						return err
					}
				}
			}
			_, err = templBuffer.WriteString("</select></div></div></div></div><div class=\"card-body w-100 p-0 position-relative\"><div class=\"table-responsive\" id=\"tbl-upublications\">")
			if err != nil {
				return err
			}
			err = CuratorDashboardTblPublications(c, args.UFaculties, args.UPublications, args.PTypes).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div></div></div><div class=\"card w-100 mb-6\"><div class=\"card-header\"><div class=\"bc-toolbar\"><div class=\"bc-toolbar-left\"><h3 class=\"card-title\">")
			if err != nil {
				return err
			}
			var_12 := `Accepted`
			_, err = templBuffer.WriteString(var_12)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</h3></div><div class=\"bc-toolbar-right text-align-right\"><div><select name=\"ayear\" class=\"form-select w-100\" hx-post=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(c.PathTo("dashboard_refresh_apublications", "type", args.Type).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-target=\"#tbl-apublications\" hx-include=\"[name=&#39;uyear&#39;]\" hx-indicator=\"#tbl-apublications .spinner-card-backdrop\"><option value=\"\">")
			if err != nil {
				return err
			}
			var_13 := `All years`
			_, err = templBuffer.WriteString(var_13)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</option>")
			if err != nil {
				return err
			}
			for _, ayear := range args.AllUPublicationYears {
				if ayear == args.AYear {
					_, err = templBuffer.WriteString("<option value=\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(templ.EscapeString(ayear))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\" selected>")
					if err != nil {
						return err
					}
					var var_14 string = ayear
					_, err = templBuffer.WriteString(templ.EscapeString(var_14))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</option>")
					if err != nil {
						return err
					}
				} else {
					_, err = templBuffer.WriteString("<option value=\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(templ.EscapeString(ayear))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\">")
					if err != nil {
						return err
					}
					var var_15 string = ayear
					_, err = templBuffer.WriteString(templ.EscapeString(var_15))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</option>")
					if err != nil {
						return err
					}
				}
			}
			_, err = templBuffer.WriteString("</select></div></div></div></div><div class=\"card-body w-100 p-0 position-relative\"><div class=\"table-responsive\" id=\"tbl-apublications\">")
			if err != nil {
				return err
			}
			err = CuratorDashboardTblPublications(c, args.AFaculties, args.APublications, args.PTypes).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div></div></div></div></div>")
			if err != nil {
				return err
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = pageLayout(c, "Dashboard - Publications - Biblio", nil).Render(templ.WithChildren(ctx, var_2), templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func CuratorDashboardTblPublications(c *ctx.Ctx, faculties []string, publications map[string]map[string][]string, pTypes map[string]string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_16 := templ.GetChildren(ctx)
		if var_16 == nil {
			var_16 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"spinner-card-backdrop\"><div class=\"spinner-border text-primary\" role=\"status\"><span class=\"visually-hidden\">")
		if err != nil {
			return err
		}
		var_17 := `Loading...`
		_, err = templBuffer.WriteString(var_17)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span></div></div><table class=\"table table-sm table-bordered\"><thead><tr><th class=\"table-col-sm-fixed table-col-sm-fixed-left\" scope=\"col\"></th>")
		if err != nil {
			return err
		}
		for _, f := range faculties {
			_, err = templBuffer.WriteString("<th scope=\"col\">")
			if err != nil {
				return err
			}
			var var_18 string = f
			_, err = templBuffer.WriteString(templ.EscapeString(var_18))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</th>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</tr></thead><tbody>")
		if err != nil {
			return err
		}
		for pti, pt := range pTypes {
			_, err = templBuffer.WriteString("<tr><th class=\"table-col-sm-fixed table-col-sm-fixed-left\" scope=\"col\">")
			if err != nil {
				return err
			}
			var var_19 string = pt
			_, err = templBuffer.WriteString(templ.EscapeString(var_19))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</th>")
			if err != nil {
				return err
			}
			for _, f := range faculties {
				if cell, ok := publications[f][pti]; ok {
					_, err = templBuffer.WriteString("<td>")
					if err != nil {
						return err
					}
					if cell[1] == "" {
						_, err = templBuffer.WriteString("<span>")
						if err != nil {
							return err
						}
						var var_20 string = cell[0]
						_, err = templBuffer.WriteString(templ.EscapeString(var_20))
						if err != nil {
							return err
						}
						_, err = templBuffer.WriteString("</span>")
						if err != nil {
							return err
						}
					} else {
						_, err = templBuffer.WriteString("<a href=\"")
						if err != nil {
							return err
						}
						var var_21 templ.SafeURL = templ.URL(cell[1])
						_, err = templBuffer.WriteString(templ.EscapeString(string(var_21)))
						if err != nil {
							return err
						}
						_, err = templBuffer.WriteString("\">")
						if err != nil {
							return err
						}
						var var_22 string = cell[0]
						_, err = templBuffer.WriteString(templ.EscapeString(var_22))
						if err != nil {
							return err
						}
						_, err = templBuffer.WriteString("</a>")
						if err != nil {
							return err
						}
					}
					_, err = templBuffer.WriteString("</td>")
					if err != nil {
						return err
					}
				}
			}
			_, err = templBuffer.WriteString("</tr>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</tbody></table>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
