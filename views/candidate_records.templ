package views

import (
    "fmt"
    "github.com/ugent-library/biblio-backoffice/ctx"
	"github.com/ugent-library/biblio-backoffice/models"
)

templ CandidateRecords(c *ctx.Ctx, searchArgs *models.SearchArgs, searchHits *models.SearchHits, recs []*models.CandidateRecord) {
    @pageLayout(c, "Biblio", nil) {
        <div class="w-100 u-scroll-wrapper">
            <div class="bg-white">
                <div class="bc-navbar bc-navbar--large bc-navbar--bordered-bottom h-auto">
                    <div class="bc-toolbar h-auto py-4">
                        <div class="bc-toolbar-left">
                            <div class="bc-toolbar-item">
                                <h2 class="bc-toolbar-title">Suggestions</h2>
                                <p class="c-intro">Import and complete research gathered from other platforms.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            if searchHits.Total > 0 {
                <div class="u-scroll-wrapper__body w-100 p-6">
                    <div class="card w-100 mb-6">
                        <div class="card-header">
                            <div class="bc-toolbar">
                                <div class="bc-toolbar-left">
                                    <div class="bc-toolbar-item">
                                        <nav>
                                        @pagination(c, c.URLTo("candidate_records"), searchArgs, searchHits)
                                        </nav>
                                    </div>
                                    <div class="bc-toolbar-item">
                                        <span class="text-muted c-body-small">
                                        { paginationCount(c, searchHits) }
                                         publications
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            <ul class="list-group list-group-flush">
                            for _, rec := range recs {
                                <li class="list-group-item bg-transparent">
                                    @candidateRecordSummary(c, rec)
                                </li>
                            }
                            </ul>
                        </div>
                        <div class="card-footer">
                            <div class="bc-toolbar">
                                <div class="bc-toolbar-left">
                                    <div class="bc-toolbar-item">
                                        <nav>
                                        @pagination(c, c.URLTo("candidate_records"), searchArgs, searchHits)
                                        </nav>
                                    </div>
                                    <div class="bc-toolbar-item">
                                        <span class="text-muted c-body-small">
                                        { paginationCount(c, searchHits) }
                                         publications
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            } else {
                <div class="u-scroll-wrapper__body w-100 p-6">
                    <div class="c-blank-slate c-blank-slate-default c-blank-slate-large">
                        <img class="mb-4" src={ c.AssetPath("/images/inbox-illustration.svg") } alt="" width="auto" height="32"/>
                        <h3 class="c-blank-slate-title">No suggestions, all caught up!</h3>
                    </div>
                </div>
            }
        </div>
    }
}

templ candidateRecordAuthorSummary(c *ctx.Ctx, contributor *models.Contributor){
    <div class="c-author">
        if contributor.Person != nil {
            <i class="if if-ghent-university" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="UGent author"></i>
        }
        if contributor.ORCID() != "" {
        <i class="if if-orcid" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Author with ORCID"></i>
        }
        <span>{contributor.Name()}</span>
    </div>
}

templ candidateRecordAuthorSummaries(c *ctx.Ctx, p *models.Publication) {
    <div class="c-author-list">
    if len(p.Author) > 3 {
        for _, contributor := range p.Author[:3] {
            @candidateRecordAuthorSummary(c, contributor)
        }
        <div class="c-author">
        { fmt.Sprintf("%d", len(p.Author) - 3) } more author
        </div>
    } else {
        for _, contributor := range p.Author {
            @candidateRecordAuthorSummary(c, contributor)
        }
    }
    </div>
}

templ candidateRecordPublicationAccessLevel(c *ctx.Ctx, p *models.Publication) {
    if mainFile := p.MainFile(); mainFile != nil {
        <span class={ "c-subline", "me-3", "pe-3", templ.KV("border-end", mainFile.AccessLevel == "info:eu-repo/semantics/embargoedAccess") }>
            if mainFile.AccessLevel == "info:eu-repo/semantics/openAccess" {
                <i class="if if-download if--small if--success"></i>
                <span class="c-subline text-truncate">{c.Loc.Get("publication_file_access_levels." + mainFile.AccessLevel)}</span>
            } else if mainFile.AccessLevel == "info:eu-repo/semantics/embargoedAccess" {
                <i class="if if-time if--small if--muted"></i>
                <span class="c-subline text-muted">{c.Loc.Get("publication_file_access_levels." + mainFile.AccessLevel)}</span>
            } else if mainFile.AccessLevel == "info:eu-repo/semantics/restrictedAccess" {
                <i class="if if-ghent-university if--small if--primary"></i>
                <span class="c-subline text-muted">{c.Loc.Get("publication_file_access_levels." + mainFile.AccessLevel)}</span>
            } else if mainFile.AccessLevel == "info:eu-repo/semantics/closedAccess" {
                <i class="if if-eye-off if--small if--muted"></i>
                <span class="c-subline text-muted">{c.Loc.Get("publication_file_access_levels." + mainFile.AccessLevel)}</span>
            }
        </span>
        if mainFile.AccessLevel == "info:eu-repo/semantics/embargoedAccess" {
            <span class="c-subline me-3 pe-3 border-end">
                if mainFile.AccessLevelDuringEmbargo == "info:eu-repo/semantics/closedAccess" {
                    <i class="if if-eye-off if--small if--muted"></i>
                } else {
                    <i class="if if-ghent-university if--small if--primary"></i>
                }
                <span class="c-subline text-truncate">{c.Loc.Get("publication_file_access_levels_during_embargo." + mainFile.AccessLevelDuringEmbargo)}</span>
            </span>
            <span class="c-subline me-3 pe-3">
                if mainFile.AccessLevelAfterEmbargo == "info:eu-repo/semantics/openAccess" {
                <i class="if if-download if--small if--success"></i>
                } else {
                <i class="if if-ghent-university if--small if--primary"></i>
                }
                {c.Loc.Get("publication_file_access_levels_after_embargo." + mainFile.AccessLevelAfterEmbargo)} from {mainFile.EmbargoDate}
            </span>
        }
    }
}

templ candidateRecordSummary(c *ctx.Ctx, rec *models.CandidateRecord) {
    if p := rec.AsPublication(); p != nil {
    <div class="w-100">
        <div class="c-thumbnail-and-text align-items-start w-100">
            <div class="c-thumbnail c-thumbnail-1-1 c-thumbnail-img c-thumbnail-small c-thumbnail-lg-large">
                <div class="c-thumbnail-inner">
                    <img src={ c.AssetPath("/images/plato-logo.svg") }/>
                </div>
            </div>
            <div class="c-thumbnail-text">
                <div class="hstack-lg-responsive align-items-start gap-3 w-100">
                    <div class="vstack gap-5">
                        <div class="vstack gap-2">
                            <div class="d-inline-flex align-items-center flex-wrap">
                                <span class="badge rounded-pill badge-default me-3 my-2">
                                    <span class="badge-circle"></span>
                                    <span class="badge-text">Biblio suggestion via {rec.SourceName}</span>
                                </span>
                                <span class="c-subline text-nowrap me-2 pe-3 my-2 border-end">Dissertation</span>
                                @candidateRecordPublicationAccessLevel(c, p)
                            </div>
                            <h4 class="mb-0">
                                <span class="list-group-item-title">{ p.Title }</span>
                            </h4>
                            <ul class="c-meta-list c-meta-list-inline">
                                <li class="c-meta-item">{ p.Year }</li>
                                <li class="c-meta-item">Ghent University.</li>
                            </ul>
                            @candidateRecordAuthorSummaries(c, p)
                        </div>
                    </div>
                    <div class="c-button-toolbar flex-row-reverse flex-lg-row">
                        <button
                            class="btn btn-link btn-link-muted"
                            hx-get={ c.PathTo("confirm_reject_candidate_record", "id", rec.ID, "redirect-url", c.URLTo("candidate_records").String()).String() }
                            hx-target="#modals">
                            <div class="btn-text">Remove suggestion</div>
                        </button>
                        <button
                            class="btn btn-outline-primary"
                            hx-put={ c.PathTo("import_candidate_record", "id", rec.ID).String() }
                            hx-swap="none"
                        >
                            <div class="btn-text">Import as draft</div>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    }
}