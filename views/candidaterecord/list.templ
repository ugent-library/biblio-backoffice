package candidaterecordviews

import (
	"fmt"
	"github.com/ugent-library/biblio-backoffice/ctx"
	"github.com/ugent-library/biblio-backoffice/models"
	"github.com/ugent-library/biblio-backoffice/views"
	"github.com/ugent-library/biblio-backoffice/vocabularies"
)

templ List(c *ctx.Ctx, searchArgs *models.SearchArgs, searchHits *models.SearchHits, recs []*models.CandidateRecord) {
	@views.PageLayout(c, views.PageLayoutArgs{
		Title: "Biblio",
		Breadcrumbs: []views.Breadcrumb{
			{LabelID: "candidate_records"},
		}}) {
		<div class="w-100 u-scroll-wrapper">
			<div class="bg-white">
				<div class="bc-navbar bc-navbar--large bc-navbar--bordered-bottom h-auto">
					<div class="bc-toolbar h-auto py-4">
						<div class="bc-toolbar-left">
							<div class="bc-toolbar-item">
								if c.ProxiedPerson != nil {
									<p>Proxy for:<span class="badge badge-sm rounded-pill badge-success-light mb-1 ms-2">{ c.ProxiedPerson.FullName }</span></p>
								}
								<h2 class="bc-toolbar-title">Suggestions</h2>
								<p class="c-intro">Import and complete research gathered from other platforms.</p>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="u-scroll-wrapper__body w-100 p-6">
				<div class="row">
					<div class="col-xl-6 col-lg-8 col-md-10">
						<div class="alert alert-success border border-success mb-6">
							<span class="badge rounded-pill bg-success me-6">Beta</span>
							<div class="alert-content">
								<div class="bc-toolbar h-auto">
									<div class="bc-toolbar-left">
										<div class="bc-toolbar-item">
											<h3 class="alert-title">
												Biblio now automatically picks up dissertations from Plato.
												<br/>
												Preview, import and complete your research output.
											</h3>
											<p>
												We are testing this new feature for the Faculty of Engineering and Architecture
												<br/>
												until the end of November,
												and would appreciate your feedback.&nbsp;<a class="c-link" target="_blank" href="https://forms.office.com/Pages/ResponsePage.aspx?id=3hyB1-_sbEmPkaF4YkG5nLzhS3gYTQlIoRZOSkcIt81UNE5UTU5ZNThPM0dJSkczOERMUThHOFgwVC4u">Give feedback</a>
											</p>
											<p class="mt-4">
												<a class="c-link text-muted" target="_blank" href="https://onderzoektips.ugent.be/en/tips/00002247/">
													<span class="text-decoration-underline">Read the research tip for more information</span>
													<i class="if if--small if-external-link"></i>
												</a>
											</p>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
				if searchHits.Total > 0 {
					<div class="bc-toolbar">
						<div class="bc-toolbar-left">
							<div class="bc-toolbar-item">
								@views.Facets(c, searchArgs) {
									@facets(c, searchArgs, searchHits.Facets)
								}
							</div>
						</div>
						<div class="bc-toolbar-right">
							<div class="bc-toolbar-item">
								<form class="d-flex gap-3 align-items-center" method="GET" action={ views.URL(c.CurrentURL).ClearQuery().SafeURL() }>
									for f, vals := range searchArgs.Filters {
										for _, val := range vals {
											<input type="hidden" name={ fmt.Sprintf("f[%s]", f) } value={ val }/>
										}
									}
									<label class="text-nowrap" for="sort-suggestions">Sort by</label>
									<select id="sort-suggestions" name="sort" class="form-select form-change-submit">
										for _, sort := range vocabularies.Map["candidate_record_sorts"] {
											<option
												value={ sort }
												if searchArgs.HasSort(sort) {
													selected
												}
											>
												{ c.Loc.Get("candidate_record_sorts." + sort) }
											</option>
										}
									</select>
								</form>
							</div>
						</div>
					</div>
					<div class="card w-100 mb-6">
						<div class="card-header">
							<div class="bc-toolbar">
								<div class="bc-toolbar-left">
									<div class="bc-toolbar-item">
										<nav>
											@views.Pagination(c, c.URLTo("candidate_records"), searchArgs, searchHits.Pagination)
										</nav>
									</div>
									<div class="bc-toolbar-item">
										<span class="text-muted c-body-small">
											{ views.PaginationCount(c, searchHits.Pagination) }
											suggestions
										</span>
									</div>
								</div>
							</div>
						</div>
						<div class="card-body w-100 p-0">
							<ul class="list-group list-group-flush">
								for _, rec := range recs {
									@ListItem(c, rec)
								}
							</ul>
						</div>
						<div class="card-footer">
							<div class="bc-toolbar">
								<div class="bc-toolbar-left">
									<div class="bc-toolbar-item">
										<nav>
											@views.Pagination(c, c.URLTo("candidate_records"), searchArgs, searchHits.Pagination)
										</nav>
									</div>
									<div class="bc-toolbar-item">
										<span class="text-muted c-body-small">
											{ views.PaginationCount(c, searchHits.Pagination) }
											suggestions
										</span>
									</div>
								</div>
							</div>
						</div>
					</div>
				} else {
					<div class="c-blank-slate c-blank-slate-default c-blank-slate-large h-50">
						<img class="mb-4" src={ c.AssetPath("/images/inbox-illustration.svg") } alt="" width="auto" height="32"/>
						<h3 class="c-blank-slate-title">No suggestions, all caught up!</h3>
					</div>
				}
			</div>
		</div>
	}
}

templ facets(c *ctx.Ctx, searchArgs *models.SearchArgs, facets map[string]models.FacetValues) {
	@views.FacetLine() {
		@views.Facet(c, views.FacetArgs{
			FieldName:      "status",
			Title:          "Suggestion status",
			LocPrefix:      "candidate_record_statuses",
			LocPrefixShort: "candidate_record_statuses",
			FacetValues:    facets["status"],
		}, searchArgs)
		if c.UserRole == "curator" {
			@views.Facet(c, views.FacetArgs{
				FieldName:      "faculty_id",
				Title:          "Faculty",
				LocPrefix:      "organization",
				LocPrefixShort: "organization",
				FacetValues:    facets["faculty_id"],
			}, searchArgs)
		}
		@views.Facet(c, views.FacetArgs{
			FieldName:      "year",
			Title:          "Publication year",
			LocPrefix:      "",
			LocPrefixShort: "",
			FacetValues:    facets["year"],
		}, searchArgs)
	}
}

templ ListItem(c *ctx.Ctx, rec *models.CandidateRecord) {
	<li id={ fmt.Sprintf("candidate-record-%s", rec.ID) } class={ "list-group-item", "bg-transparent", templ.KV("opacity-75", rec.Status != "new") }>
		@Summary(c, rec)
	</li>
}
