package candidaterecordviews

import (
	"fmt"
	"github.com/ugent-library/biblio-backoffice/ctx"
	"github.com/ugent-library/biblio-backoffice/models"
	contributorviews "github.com/ugent-library/biblio-backoffice/views/contributor"
	publicationsummaryviews "github.com/ugent-library/biblio-backoffice/views/publication/summary"
	"github.com/ugent-library/biblio-backoffice/views/util"
	"math"
	"time"
)

type SummaryOpts struct {
	Thumbnail   string
	Badge       templ.Component
	Info        templ.Component
	ShowDetails bool
}

func daysUntilDisappearanceDate(date time.Time) string {
	disappearanceDate := util.DateOnly(date).AddDate(0, 0, 90)
	today := util.DateOnly(time.Now())
	daysUntil := math.Max(0, disappearanceDate.Sub(today).Hours()/24)

	return fmt.Sprintf("%d", int(daysUntil))
}

templ Summary(c *ctx.Ctx, rec *models.CandidateRecord) {
	switch rec.Status {
		case "new":
			@publicationSummary(c, rec.Publication, SummaryOpts{
				Badge:       summaryBadge("badge-default", fmt.Sprintf("Biblio suggestion via %s", rec.SourceName)),
				ShowDetails: true,
				Thumbnail:   c.AssetPath("/images/plato-logo.svg")}) {
				<button
					class="btn btn-link btn-link-muted"
					hx-get={ c.PathTo("confirm_reject_candidate_record", "id", rec.ID, "redirect-url", c.PathTo("candidate_records").String()).String() }
					hx-target="#modals"
				>
					<div class="btn-text">Reject</div>
				</button>
				if c.UserRole == "curator" {
					<button
						class="btn btn-link btn-link-muted"
						hx-get={ c.PathTo("candidate_records_preview", "id", rec.ID, "redirect-url", c.PathTo("candidate_records").String()).String() }
						hx-target="#modals"
					>
						<div class="btn-text">Preview</div>
					</button>
					<button
						class="btn btn-outline-primary"
						hx-put={ c.PathTo("import_candidate_record", "id", rec.ID).String() }
						hx-swap="none"
					>
						<div class="btn-text">
							Import
							<span class="d-lg-none d-xl-inline-block">&amp; complete</span>
						</div>
					</button>
				} else {
					<button
						class="btn btn-link btn-link-muted"
						hx-put={ c.PathTo("import_candidate_record", "id", rec.ID).String() }
						hx-swap="none"
					>
						<div class="btn-text">
							Import
							<span class="d-lg-none d-xl-inline-block">&amp; complete</span>
						</div>
					</button>
					<button
						class="btn btn-outline-primary"
						hx-get={ c.PathTo("candidate_records_preview", "id", rec.ID, "redirect-url", c.PathTo("candidate_records").String()).String() }
						hx-target="#modals"
					>
						<div class="btn-text">Preview</div>
					</button>
				}
			}
		case "imported":
			@publicationSummary(c, rec.Publication, SummaryOpts{
				Badge: summaryBadge("badge-warning-light", fmt.Sprintf("Imported %s suggestion", rec.SourceName)),
				Info:  importedInfo(c, rec)})
		case "rejected":
			@publicationSummary(c, rec.Publication, SummaryOpts{
				Badge: summaryBadge("badge-danger-light", fmt.Sprintf("Rejected %s suggestion", rec.SourceName)),
				Info:  rejectedInfo(c, rec)})
	}
}

templ publicationSummary(c *ctx.Ctx, p *models.Publication, opts SummaryOpts) {
	<div class="w-100">
		<div class="c-thumbnail-and-text align-items-start w-100">
			if opts.Thumbnail != "" {
				<div class="c-thumbnail c-thumbnail-1-1 c-thumbnail-img c-thumbnail-small c-thumbnail-lg-large">
					<div class="c-thumbnail-inner">
						<img src={ opts.Thumbnail }/>
					</div>
				</div>
			}
			<div class="c-thumbnail-text">
				<div class="hstack-lg-responsive align-items-start gap-3 w-100">
					<div class="vstack gap-5">
						<div class="vstack gap-2">
							<div class="d-inline-flex align-items-center flex-wrap">
								if opts.Badge != nil {
									@opts.Badge
								}
								<span class="c-subline ps-2 me-3 pe-3 border-end">
									if p.Classification != "" {
										{ fmt.Sprintf("%s: %s", c.Loc.Get("publication_types." + p.Type), p.Classification) }
									} else {
										{ c.Loc.Get("publication_types." + p.Type) }
									}
								</span>
								if mainFile := p.MainFile(); mainFile != nil {
									<span class={ "c-subline", "me-3", "pe-3", templ.KV("border-end", mainFile.AccessLevel == "info:eu-repo/semantics/embargoedAccess") }>
										if mainFile.AccessLevel == "info:eu-repo/semantics/openAccess" {
											<i class="if if-download if--small if--success"></i>
											<span class="c-subline text-truncate">{ c.Loc.Get("publication_file_access_levels." + mainFile.AccessLevel) }</span>
										} else if mainFile.AccessLevel == "info:eu-repo/semantics/embargoedAccess" {
											<i class="if if-time if--small if--warning"></i>
											<span class="c-subline text-muted">{ c.Loc.Get("publication_file_access_levels." + mainFile.AccessLevel) }</span>
										} else if mainFile.AccessLevel == "info:eu-repo/semantics/restrictedAccess" {
											<i class="if if-ghent-university if--small if--primary"></i>
											<span class="c-subline text-muted">{ c.Loc.Get("publication_file_access_levels." + mainFile.AccessLevel) }</span>
										} else if mainFile.AccessLevel == "info:eu-repo/semantics/closedAccess" {
											<i class="if if-forbid if--small if--danger"></i>
											<span class="c-subline text-muted">{ c.Loc.Get("publication_file_access_levels." + mainFile.AccessLevel) }</span>
										}
									</span>
									if mainFile.AccessLevel == "info:eu-repo/semantics/embargoedAccess" {
										<span class="c-subline me-3 pe-3 border-end">
											if mainFile.AccessLevelDuringEmbargo == "info:eu-repo/semantics/closedAccess" {
												<i class="if if-eye-off if--small if--muted"></i>
											} else {
												<i class="if if-ghent-university if--small if--primary"></i>
											}
											<span class="c-subline text-truncate">{ c.Loc.Get("publication_file_access_levels_during_embargo." + mainFile.AccessLevelDuringEmbargo) }</span>
										</span>
										<span class="c-subline me-3 pe-3">
											if mainFile.AccessLevelAfterEmbargo == "info:eu-repo/semantics/openAccess" {
												<i class="if if-download if--small if--success"></i>
											} else {
												<i class="if if-ghent-university if--small if--primary"></i>
											}
											{ c.Loc.Get("publication_file_access_levels_after_embargo." + mainFile.AccessLevelAfterEmbargo) } from { mainFile.EmbargoDate }
										</span>
									}
								}
							</div>
							<h4 class="mb-0">
								<span class="list-group-item-title">
									if p.Title != "" {
										{ p.Title }
									} else {
										Untitled record
									}
								</span>
							</h4>
							if opts.ShowDetails {
								<ul class="c-meta-list c-meta-list-inline">
									for _, summaryPart := range p.SummaryParts() {
										<li class="c-meta-item">{ summaryPart }</li>
									}
								</ul>
								<div class="d-inline-flex align-items-center flex-wrap">
									<div class="d-inline-flex align-items-center flex-wrap">
										@contributorviews.Summary(c, contributorviews.SummaryArgs{
											Role:                    "author",
											Contributors:            p.Author,
											CanViewMoreContributors: c.Repo.CanViewPublication(c.User, p),
											CanEditContributors:     c.Repo.CanEditPublication(c.User, p),
										})
									</div>
									<div class="text-muted fst-italic me-5 my-1">supervised by</div>
									<div class="d-inline-flex align-items-center flex-wrap">
										@contributorviews.Summary(c, contributorviews.SummaryArgs{
											Role:                    "supervisor",
											Contributors:            p.Supervisor,
											CurrentUserRoles:        publicationsummaryviews.GetUserContributorRoles(p, c.User),
											CanViewMoreContributors: c.Repo.CanViewPublication(c.User, p),
											CanEditContributors:     c.Repo.CanEditPublication(c.User, p),
										})
									</div>
								</div>
								if len(p.RelatedOrganizations) > 0 {
									<div class="d-inline-flex align-items-center flex-wrap">
										<span class="badge rounded-pill badge-light me-4">Suggested departments</span>
										<ul class="c-meta-list c-meta-list-inline">
											for _, o := range p.RelatedOrganizations {
												<li class="c-meta-item">
													<i class="if if-building if--small if--muted pe-1"></i>
													<span>{ o.OrganizationID }</span>
												</li>
											}
										</ul>
									</div>
								}
							}
						</div>
					</div>
					<div class="c-button-toolbar flex-row-reverse flex-lg-row">
						{ children... }
					</div>
					if opts.Info != nil {
						@opts.Info
					}
				</div>
			</div>
		</div>
	</div>
}

templ summaryBadge(colorClass string, text string) {
	<span class={ "badge", "rounded-pill", "me-3", "my-2", colorClass }>
		<span class="badge-circle"></span>
		<span class="badge-text">{ text }</span>
	</span>
}

templ importedInfo(c *ctx.Ctx, rec *models.CandidateRecord) {
	<p class="text-muted text-md-end text-nowrap">
		<span>
			Imported by: { statusPersonName(c, rec.StatusPerson) }.
			if rec.ImportedID != "" {
				<a class="c-link c-link-muted" type="button" href={ templ.URL(c.PathTo("publication", "id", rec.ImportedID).String()) }>View</a>
			}
		</span>
		<br/>
		if rec.StatusDate != nil {
			<small class="fst-italic d-inline-block pt-2">On { rec.StatusDate.Format("2006-01-02") }. Reminder disappears in { daysUntilDisappearanceDate(*rec.StatusDate) } day(s).</small>
		}
	</p>
}

templ rejectedInfo(c *ctx.Ctx, rec *models.CandidateRecord) {
	<p class="text-muted text-md-end text-nowrap">
		<span>
			Rejected by: { statusPersonName(c, rec.StatusPerson) }.
			if c.Repo.CanCurate(c.User) || (rec.StatusPerson != nil && !c.Repo.CanCurate(rec.StatusPerson)) {
				<a
					class="c-link c-link-muted"
					type="button"
					hx-put={ c.PathTo("restore_rejected_candidate_record", "id", rec.ID).String() }
					hx-target={ fmt.Sprintf("#candidate-record-%s", rec.ID) }
					hx-swap="outerHTML"
				>Restore</a>
			}
		</span>
		<br/>
		<small class="fst-italic d-inline-block pt-2">On { rec.StatusDate.Format("2006-01-02") }. Reminder disappears in { daysUntilDisappearanceDate(*rec.StatusDate) } day(s).</small>
	</p>
}

func statusPersonName(c *ctx.Ctx, person *models.Person) string {
	if person != nil {
		if c.Repo.CanCurate(c.User) || !c.Repo.CanCurate(person) {
			return person.FullName
		} else {
			return "a biblio team member"
		}
	} else {
		return "[missing]"
	}
}
