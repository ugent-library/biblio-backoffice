package candidaterecordviews

import (
	"github.com/ugent-library/biblio-backoffice/ctx"
	"github.com/ugent-library/biblio-backoffice/models"
	"github.com/ugent-library/biblio-backoffice/views/contributor"
	"fmt"
)

type SummaryOpts struct {
	Thumbnail string
	Badge     templ.Component
}

templ Summary(c *ctx.Ctx, p *models.Publication, opts SummaryOpts) {
	<div class="w-100">
		<div class="c-thumbnail-and-text align-items-start w-100">
			if opts.Thumbnail != "" {
				<div class="c-thumbnail c-thumbnail-1-1 c-thumbnail-img c-thumbnail-small c-thumbnail-lg-large">
					<div class="c-thumbnail-inner">
						<img src={ opts.Thumbnail }/>
					</div>
				</div>
			}
			<div class="c-thumbnail-text">
				<div class="hstack-lg-responsive align-items-start gap-3 w-100">
					<div class="vstack gap-5">
						<div class="vstack gap-2">
							<div class="d-inline-flex align-items-center flex-wrap">
								if opts.Badge != nil {
									@opts.Badge
								}
								<span class="c-subline ps-2 me-3 pe-3 border-end">
									if p.Classification != "" {
										{ fmt.Sprintf("%s: %s", c.Loc.Get("publication_types." + p.Type), p.Classification) }
									} else {
										{ c.Loc.Get("publication_types." + p.Type) }
									}
								</span>
								if mainFile := p.MainFile(); mainFile != nil {
									<span class={ "c-subline", "me-3", "pe-3", templ.KV("border-end", mainFile.AccessLevel == "info:eu-repo/semantics/embargoedAccess") }>
										if mainFile.AccessLevel == "info:eu-repo/semantics/openAccess" {
											<i class="if if-download if--small if--success"></i>
											<span class="c-subline text-truncate">{ c.Loc.Get("publication_file_access_levels." + mainFile.AccessLevel) }</span>
										} else if mainFile.AccessLevel == "info:eu-repo/semantics/embargoedAccess" {
											<i class="if if-time if--small if--muted"></i>
											<span class="c-subline text-muted">{ c.Loc.Get("publication_file_access_levels." + mainFile.AccessLevel) }</span>
										} else if mainFile.AccessLevel == "info:eu-repo/semantics/restrictedAccess" {
											<i class="if if-ghent-university if--small if--primary"></i>
											<span class="c-subline text-muted">{ c.Loc.Get("publication_file_access_levels." + mainFile.AccessLevel) }</span>
										} else if mainFile.AccessLevel == "info:eu-repo/semantics/closedAccess" {
											<i class="if if-eye-off if--small if--muted"></i>
											<span class="c-subline text-muted">{ c.Loc.Get("publication_file_access_levels." + mainFile.AccessLevel) }</span>
										}
									</span>
									if mainFile.AccessLevel == "info:eu-repo/semantics/embargoedAccess" {
										<span class="c-subline me-3 pe-3 border-end">
											if mainFile.AccessLevelDuringEmbargo == "info:eu-repo/semantics/closedAccess" {
												<i class="if if-eye-off if--small if--muted"></i>
											} else {
												<i class="if if-ghent-university if--small if--primary"></i>
											}
											<span class="c-subline text-truncate">{ c.Loc.Get("publication_file_access_levels_during_embargo." + mainFile.AccessLevelDuringEmbargo) }</span>
										</span>
										<span class="c-subline me-3 pe-3">
											if mainFile.AccessLevelAfterEmbargo == "info:eu-repo/semantics/openAccess" {
												<i class="if if-download if--small if--success"></i>
											} else {
												<i class="if if-ghent-university if--small if--primary"></i>
											}
											{ c.Loc.Get("publication_file_access_levels_after_embargo." + mainFile.AccessLevelAfterEmbargo) } from { mainFile.EmbargoDate }
										</span>
									}
								}
							</div>
							<h4 class="mb-0">
								<span class="list-group-item-title">
									if p.Title != "" {
										{ p.Title }
									} else {
										Untitled record
									}
								</span>
							</h4>
							<ul class="c-meta-list c-meta-list-inline">
								for _, summaryPart := range p.SummaryParts() {
									<li class="c-meta-item">{ summaryPart }</li>
								}
							</ul>
							@contributorviews.Summary(c, contributorviews.SummaryArgs{
								Role:         "author",
								Contributors: p.Author,
							})
							@contributorviews.Summary(c, contributorviews.SummaryArgs{
								Role:         "supervisor",
								Contributors: p.Supervisor,
							})
						</div>
					</div>
					<div class="c-button-toolbar flex-row-reverse flex-lg-row">
						{ children... }
					</div>
				</div>
			</div>
		</div>
	</div>
}
