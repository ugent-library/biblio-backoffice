package views

import "fmt"
import "net/url"
import "github.com/ugent-library/biblio-backoffice/ctx"
import "github.com/ugent-library/biblio-backoffice/models"
import pag "github.com/ugent-library/biblio-backoffice/pagination"
import urlviews "github.com/ugent-library/biblio-backoffice/views/url"

templ Pagination(c *ctx.Ctx, baseURL *url.URL, searchArgs *models.SearchArgs, p pag.Pagination) {
    <ul class="pagination">
    if p.HasPreviousPage() {
        <li class="page-item">
            <a class="page-link" href={templ.URL(urlviews.Query(baseURL, searchArgs.Clone().WithPage(p.PreviousPage())).String())} aria-label="Previous">
                <i class="if if-chevron-left" aria-hidden="true"></i>
            </a>
        </li>
    } else {
        <li class="page-item disabled">
            <a class="page-link" href="#" aria-label="Previous">
                <i class="if if-chevron-left" aria-hidden="true"></i>
            </a>
        </li>
    }
    for _, page := range p.PagesWithEllipsis() {
        if page > 0 {
            <li class={ "page-item", templ.KV("active", p.Page() == page) }>
                <a class="page-link" href={templ.URL(urlviews.Query(baseURL, searchArgs.Clone().WithPage(page)).String())} aria-label={fmt.Sprintf("Page %d", page)}>
                    {fmt.Sprintf("%d", page)}
                </a>
            </li>
        } else {
            <li class="page-item disabled">
                <a class="page-link" href="#">
                    &hellip;
                </a>
            </li>
        }
    }
    if p.HasNextPage() {
        <li class="page-item">
            <a class="page-link" href={templ.URL(urlviews.Query(baseURL, searchArgs.Clone().WithPage(p.NextPage())).String())} aria-label="Next">
                <i class="if if-chevron-right" aria-hidden="true"></i>
            </a>
        </li>
    } else {
        <li class="page-item disabled">
            <a class="page-link" href="#" aria-label="Next">
                <i class="if if-chevron-right" aria-hidden="true"></i>
            </a>
        </li>
    }
    </ul>    
}

func PaginationCount(c *ctx.Ctx, p pag.Pagination) string {
	if p.TotalPages() > 1 {
		return fmt.Sprintf("Showing %d-%d of %d", p.FirstOnPage(), p.LastOnPage(), p.Total)
	} else {
		return fmt.Sprintf("Showing %d", p.Total)
	}
}
