// Code generated by templ@v0.2.364 DO NOT EDIT.

package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"fmt"
	"github.com/ugent-library/biblio-backoffice/render/flash"
)

func flashMessage(f flash.Flash) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div")
		if err != nil {
			return err
		}
		if f.DismissAfter != 0 {
			_, err = templBuffer.WriteString(" hx-ext=\"remove-me\"")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		if f.Type == "simple" {
			_, err = templBuffer.WriteString("<div class=\"toast show\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\" data-autohide=\"false\"")
			if err != nil {
				return err
			}
			if f.DismissAfter != 0 {
				_, err = templBuffer.WriteString(" remove-me=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("%dms", f.DismissAfter)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\"")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("><div class=\"toast-body\">")
			if err != nil {
				return err
			}
			switch f.Type {
			case "success":
				_, err = templBuffer.WriteString("<i class=\"if if--success if-check-circle-fill\"></i>")
				if err != nil {
					return err
				}
			case "info":
				_, err = templBuffer.WriteString("<i class=\"if if--primary if-info-circle-filled\"></i>")
				if err != nil {
					return err
				}
			case "warning":
				_, err = templBuffer.WriteString("<i class=\"if if--warning if-alert-fill\"></i>")
				if err != nil {
					return err
				}
			case "error":
				_, err = templBuffer.WriteString("<i class=\"if if--error if-error-circle-fill\"></i>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("<div class=\"toast-content\">")
			if err != nil {
				return err
			}
			if f.Title != "" {
				_, err = templBuffer.WriteString("<h3 class=\"alert-title\">")
				if err != nil {
					return err
				}
				var var_2 string = f.Title
				_, err = templBuffer.WriteString(templ.EscapeString(var_2))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</h3>")
				if err != nil {
					return err
				}
			}
			err = html(string(f.Body)).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
			if f.Dismissable {
				_, err = templBuffer.WriteString("<button class=\"btn-close\" type=\"button\" data-bs-dismiss=\"toast\" aria-label=\"Close\"><span class=\"visually-hidden\">")
				if err != nil {
					return err
				}
				var_3 := `Close`
				_, err = templBuffer.WriteString(var_3)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</span></button>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</div></div>")
			if err != nil {
				return err
			}
		}
		if f.Type == "complex" {
			_, err = templBuffer.WriteString("<div class=\"toast show\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\" data-autohide=\"false\"")
			if err != nil {
				return err
			}
			if f.DismissAfter != 0 {
				_, err = templBuffer.WriteString(" remove-me=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("%dms", f.DismissAfter)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\"")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("><div class=\"toast-header\"><div class=\"u-divide-x\"><span class=\"c-subline\">")
			if err != nil {
				return err
			}
			var var_4 string = f.Application
			_, err = templBuffer.WriteString(templ.EscapeString(var_4))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span><span class=\"c-body-small text-muted ms-3 ps-3\">")
			if err != nil {
				return err
			}
			var_5 := `3 minutes ago`
			_, err = templBuffer.WriteString(var_5)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span></div>")
			if err != nil {
				return err
			}
			if f.Dismissable {
				_, err = templBuffer.WriteString("<button class=\"btn-close\" type=\"button\" data-bs-dismiss=\"toast\" aria-label=\"Close\"><span class=\"visually-hidden\">")
				if err != nil {
					return err
				}
				var_6 := `Close`
				_, err = templBuffer.WriteString(var_6)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</span></button>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</div><div class=\"toast-body\">")
			if err != nil {
				return err
			}
			switch f.Type {
			case "success":
				_, err = templBuffer.WriteString("<i class=\"if if--success if-check-circle-fill\"></i>")
				if err != nil {
					return err
				}
			case "info":
				_, err = templBuffer.WriteString("<i class=\"if if--primary if-info-circle-filled\"></i>")
				if err != nil {
					return err
				}
			case "warning":
				_, err = templBuffer.WriteString("<i class=\"if if--warning if-alert-fill\"></i>")
				if err != nil {
					return err
				}
			case "error":
				_, err = templBuffer.WriteString("<i class=\"if if--error if-error-circle-fill\"></i>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("<div class=\"toast-content\">")
			if err != nil {
				return err
			}
			if f.Title != "" {
				_, err = templBuffer.WriteString("<h3 class=\"alert-title\">")
				if err != nil {
					return err
				}
				var var_7 string = f.Title
				_, err = templBuffer.WriteString(templ.EscapeString(var_7))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</h3>")
				if err != nil {
					return err
				}
			}
			err = html(string(f.Body)).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div></div></div>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
