// Code generated by templ@v0.2.334 DO NOT EDIT.

package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"github.com/ugent-library/biblio-backoffice/ctx"
)

type CuratorDashboardDatasetsArgs struct {
	ActiveSubNav string
	Datasets     map[string]map[string][]string
	Faculties    []string
	PTypes       map[string]string
}

func CuratorDashboardDatasets(c *ctx.Ctx, args *CuratorDashboardDatasetsArgs) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var_2 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			_, err = templBuffer.WriteString("<div class=\"c-sub-sidebar c-sidebar--bordered\"><div class=\"bc-navbar bc-navbar--large bc-navbar--bordered-bottom\"><div class=\"bc-toolbar\"><div class=\"bc-toolbar-left\"><div class=\"bc-toolbar-item\"><h4 class=\"bc-toolbar-title\">")
			if err != nil {
				return err
			}
			var_3 := `Dashboard`
			_, err = templBuffer.WriteString(var_3)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</h4></div></div></div></div><div class=\"c-sub-sidebar__menu my-6\">")
			if err != nil {
				return err
			}
			err = curatorDashboardShowNav(c, args.ActiveSubNav).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div></div> <div class=\"w-100 u-scroll-wrapper\"><div class=\"bg-white\"><div class=\"bc-navbar bc-navbar--large bc-navbar--white bc-navbar--bordered-bottom\"><div class=\"bc-toolbar bc-toolbar--auto\"><div class=\"bc-toolbar-left\"><div class=\"bc-toolbar-item\"><h4 class=\"bc-toolbar-title\">")
			if err != nil {
				return err
			}
			var_4 := `Datasets`
			_, err = templBuffer.WriteString(var_4)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</h4></div></div><div class=\"bc-toolbar-right\"><div class=\"bc-toolbar-item\"></div></div></div></div></div><div class=\"u-scroll-wrapper__body w-100 p-6\"><div class=\"pb-5\"><p><strong>")
			if err != nil {
				return err
			}
			var_5 := `Why are the totals wrong?`
			_, err = templBuffer.WriteString(var_5)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</strong></p><p>")
			if err != nil {
				return err
			}
			var_6 := `Some publications are associated with more than 1 faculty.`
			_, err = templBuffer.WriteString(var_6)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</p><p>")
			if err != nil {
				return err
			}
			var_7 := `The category "all" in the table header may contain less publications, as it only counts each publication once.`
			_, err = templBuffer.WriteString(var_7)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</p></div><div class=\"card w-100 mb-6\"><div class=\"card-header\"><div class=\"bc-toolbar\"><div class=\"bc-toolbar-left\"><h3 class=\"card-title\">")
			if err != nil {
				return err
			}
			var_8 := `Datasets`
			_, err = templBuffer.WriteString(var_8)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</h3></div></div></div><div class=\"card-body w-100 p-0\"><div class=\"table-responsive\"><table class=\"table table-sm table-bordered\"><thead><tr><th class=\"table-col-sm-fixed table-col-sm-fixed-left\" scope=\"col\"></th>")
			if err != nil {
				return err
			}
			for _, f := range args.Faculties {
				_, err = templBuffer.WriteString("<th scope=\"col\">")
				if err != nil {
					return err
				}
				var var_9 string = f
				_, err = templBuffer.WriteString(templ.EscapeString(var_9))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</th>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</tr></thead><tbody>")
			if err != nil {
				return err
			}
			for pti, pt := range args.PTypes {
				_, err = templBuffer.WriteString("<tr><th class=\"table-col-sm-fixed table-col-sm-fixed-left\" scope=\"col\">")
				if err != nil {
					return err
				}
				var var_10 string = pt
				_, err = templBuffer.WriteString(templ.EscapeString(var_10))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</th>")
				if err != nil {
					return err
				}
				for _, f := range args.Faculties {
					if cell, ok := args.Datasets[f][pti]; ok {
						_, err = templBuffer.WriteString("<td>")
						if err != nil {
							return err
						}
						if cell[1] == "" {
							_, err = templBuffer.WriteString("<span>")
							if err != nil {
								return err
							}
							var var_11 string = cell[0]
							_, err = templBuffer.WriteString(templ.EscapeString(var_11))
							if err != nil {
								return err
							}
							_, err = templBuffer.WriteString("</span>")
							if err != nil {
								return err
							}
						} else {
							_, err = templBuffer.WriteString("<a href=\"")
							if err != nil {
								return err
							}
							var var_12 templ.SafeURL = templ.URL(cell[1])
							_, err = templBuffer.WriteString(templ.EscapeString(string(var_12)))
							if err != nil {
								return err
							}
							_, err = templBuffer.WriteString("\">")
							if err != nil {
								return err
							}
							var var_13 string = cell[0]
							_, err = templBuffer.WriteString(templ.EscapeString(var_13))
							if err != nil {
								return err
							}
							_, err = templBuffer.WriteString("</a>")
							if err != nil {
								return err
							}
						}
						_, err = templBuffer.WriteString("</td>")
						if err != nil {
							return err
						}
					}
				}
				_, err = templBuffer.WriteString("</tr>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</tbody></table></div></div></div></div></div>")
			if err != nil {
				return err
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = pageLayout(c, "Dashboard - Datasets - Biblio", nil).Render(templ.WithChildren(ctx, var_2), templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
