package proxyviews

import (
	"fmt"
	"github.com/ugent-library/biblio-backoffice/ctx"
	"github.com/ugent-library/biblio-backoffice/models"
	pag "github.com/ugent-library/biblio-backoffice/pagination"
	"github.com/ugent-library/biblio-backoffice/views"
)

templ Index(c *ctx.Ctx, proxies [][]*models.Person, person *models.Person, pager *pag.Pagination) {
	@views.PageLayout(c, views.PageLayoutArgs{
		Title: "Biblio",
		Breadcrumbs: []views.Breadcrumb{
			{LabelID: "proxies"},
		},
	}) {
		<div class="w-100 u-scroll-wrapper">
			<div class="bg-white">
				<div class="bc-navbar bc-navbar--large bc-navbar--bordered-bottom h-auto">
					<div class="bc-toolbar h-auto py-4">
						<div class="bc-toolbar-left">
							<div class="bc-toolbar-item">
								<h2 class="bc-toolbar-title">Proxies</h2>
								<p class="c-intro">Assign proxies to manage the bibliography of specific researchers</p>
							</div>
						</div>
						<div class="bc-toolbar-right">
							<div class="bc-toolbar-item">
								<div class="c-button-toolbar">
									<button
										class="btn btn-primary"
										type="button"
										hx-get={ c.PathTo("add_proxy").String() }
										hx-target="#modals"
									>
										<i class="if if-add"></i>
										<div class="btn-text">Add proxy</div>
									</button>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="u-scroll-wrapper__body w-100 p-6">
				<div class="row mb-4">
					<div class="col">
						<div class="input-group flex-nowrap">
							<label class="visually-hidden" for="proxies-list-q">Search</label>
							<input
								class="form-control"
								type="text"
								id="proxies-list-q"
								name="q"
								placeholder="Search..."
								value=""
								autocomplete="off"
								aria-describedby="proxies-list-q-helper"
								hx-get={ c.PathTo("proxies_list_suggestions").String() }
								hx-trigger="input changed delay:250ms"
								hx-target="#proxies-list-suggestions"
							/>
						</div>
						<span class="form-text text-muted" id="proxies-list-q-helper">Enter first- and last name, OrcID or UGent ID.</span>
						<div id="proxies-list-suggestions"></div>
					</div>
				</div>
				@List(c, proxies, person, pager)
			</div>
		</div>
	}
}

templ ListSuggestions(c *ctx.Ctx, people []*models.Person) {
	if len(people) > 0 {
		<div class="dropdown-menu search-suggestions py-0 border-0 show">
			<div class="list-group">
				for _, p := range people {
					<div class="list-group-item">
						@ListItem(c, p) {
							<button
								class="btn btn-outline-primary"
								class="card w-100 mb-6"
								hx-get={ c.PathTo("proxies_list").String() }
								hx-vals={ fmt.Sprintf(`{"id": %q}`, p.ID) }
								hx-target="#proxies-list"
								hx-swap="outerHTML"
							>
								<span class="btn-text">Search this profile</span>
								<i class="if if-arrow-right"></i>
							</button>
						}
					</div>
				}
			</div>
		</div>
	}
}

templ RefreshList(c *ctx.Ctx, proxies [][]*models.Person, person *models.Person, pager *pag.Pagination) {
	<div id="proxies-list-suggestions" hx-swap-oob="true"></div>
	@List(c, proxies, person, pager)
}

templ List(c *ctx.Ctx, proxies [][]*models.Person, person *models.Person, pager *pag.Pagination) {
	<div
		id="proxies-list"
		hx-get={ c.PathTo("proxies_list").String() }
		hx-trigger="proxyChanged from:body"
		if person != nil {
			hx-vals={ fmt.Sprintf(`{"id": %q, "offset": %d}`, person.ID, pager.Offset) }
		} else {
			hx-vals={ fmt.Sprintf(`{"offset": %d}`, pager.Offset) }
		}
		hx-swap="outerHTML"
	>
		if person != nil {
			<p class="mt-6 mb-4">
				<span class="badge rounded-pill badge-default badge-lg">
					<span class="badge-text">Searching for: &nbsp;</span>
					<span class="badge-value me-2">
						<strong>{ person.FullName }</strong>
					</span>
					<a href={ templ.SafeURL(c.PathTo("proxies").String()) } class="btn btn-sm btn-link btn-icon-only">
						<i class="if if-delete"></i>
						<div class="visually-hidden">Remove search</div>
					</a>
				</span>
			</p>
		}
		<div class="card w-100 mb-6">
			<div class="card-header border-bottom-0">
				<div class="bc-toolbar">
					<div class="bc-toolbar-left">
						<div class="bc-toolbar-item">
							<nav>
								@pagination(c, person, *pager)
							</nav>
						</div>
						<div class="bc-toolbar-item">
							<span class="text-muted c-body-small">
								{ views.PaginationCount(c, *pager) }
							</span>
						</div>
					</div>
				</div>
			</div>
			<div class="card-body w-100 p-0">
				if len(proxies) > 0 {
					<div class="table-responsive">
						<table class="table table-sm table-bordered">
							<tbody>
								for _, p := range proxies {
									<tr>
										<td class="text-nowrap d-none d-md-table-cell">Proxy</td>
										<td class="text-nowrap">
											@tableItem(p[0])
										</td>
										<td class="text-nowrap">
											<p class="text-center">
												manages<i class="if if-arrow-right if--muted if--small ms-2"></i>
											</p>
										</td>
										<td class="text-nowrap">
											@tableItem(p[1])
										</td>
										<td class="text-nowrap">
											<div class="c-button-toolbar flex-nowrap">
												<a
													class="btn btn-link btn-link-muted"
													hx-delete={ c.PathTo("proxy_remove_person", "proxy_id", p[0].ID, "person_id", p[1].ID).String() }
													hx-swap="none"
												>
													<i class="if if-delete"></i>
													<span class="btn-text d-none d-lg-inline-block">Delete</span>
												</a>
											</div>
										</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				} else {
					<div class="border-top border-bottom">
						<div class="c-blank-slate c-blank-slate-default c-blank-slate-large">
							<div class="bc-avatar bc-avatar--medium">
								<i class="if if-info-circle"></i>
							</div>
							<h3 class="c-blank-slate-title">No proxies to display.</h3>
							<p>Refine your search or add a new proxy.</p>
							<div class="c-button-toolbar">
								<button
									class="btn btn-outline-primary"
									type="button"
									hx-get={ c.PathTo("add_proxy").String() }
									hx-target="#modals"
								>
									<i class="if if-add"></i>
									<div class="btn-text">Add proxy</div>
								</button>
							</div>
						</div>
					</div>
				}
			</div>
			<div class="card-footer border-top-0">
				<div class="bc-toolbar">
					<div class="bc-toolbar-left">
						<div class="bc-toolbar-item">
							<nav>
								@pagination(c, person, *pager)
							</nav>
						</div>
						<div class="bc-toolbar-item">
							<span class="text-muted c-body-small">
								{ views.PaginationCount(c, *pager) }
							</span>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ tableItem(p *models.Person) {
	<div class="my-3">
		<p class="mb-2">{ p.FullName }</p>
		<ul class="c-meta-list c-meta-list-horizontal">
			for _, id := range p.UGentID {
				<li class="c-meta-item">
					<i class="if if-ghent-university if--small if--muted"></i>
					<small>{ id }</small>
				</li>
			}
			if p.ORCID != "" {
				<li class="c-meta-item">
					<i class="if if-orcid if--small text-success"></i>
					<span class="c-body-small">{ p.ORCID }</span>
				</li>
			}
		</ul>
	</div>
}

templ pagination(c *ctx.Ctx, person *models.Person, pager pag.Pagination) {
	<ul class="pagination">
		if pager.HasPreviousPage() {
			<li class="page-item">
				<a
					class="page-link"
					aria-label="Previous"
					if person != nil {
						hx-get={ c.PathTo("proxies_list", "offset", fmt.Sprint(pager.Offset-pager.Limit), "id", person.ID).String() }
					} else {
						hx-get={ c.PathTo("proxies_list", "offset", fmt.Sprint(pager.Offset-pager.Limit)).String() }
					}
					hx-target="#proxies-list"
					hx-swap="outerHTML"
				>
					<i class="if if-chevron-left" aria-hidden="true"></i>
				</a>
			</li>
		} else {
			<li class="page-item disabled">
				<a class="page-link" href="#" aria-label="Previous">
					<i class="if if-chevron-left" aria-hidden="true"></i>
				</a>
			</li>
		}
		for _, page := range pager.PagesWithEllipsis() {
			if page > 0 {
				<li class={ "page-item", templ.KV("active", pager.Page() == page) }>
					<a
						class="page-link"
						aria-label={ fmt.Sprintf("Page %d", page) }
						if person != nil {
							hx-get={ c.PathTo("proxies_list", "offset", fmt.Sprint(pager.Limit*(page-1)), "id", person.ID).String() }
						} else {
							hx-get={ c.PathTo("proxies_list", "offset", fmt.Sprint(pager.Limit*(page-1))).String() }
						}
						hx-target="#proxies-list"
						hx-swap="outerHTML"
					>
						{ fmt.Sprint(page) }
					</a>
				</li>
			} else {
				<li class="page-item disabled">
					<a class="page-link" href="#">
						&hellip;
					</a>
				</li>
			}
		}
		if pager.HasNextPage() {
			<li class="page-item">
				<a
					class="page-link"
					aria-label="Next"
					if person != nil {
						hx-get={ c.PathTo("proxies_list", "offset", fmt.Sprint(pager.Offset+pager.Limit), "id", person.ID).String() }
					} else {
						hx-get={ c.PathTo("proxies_list", "offset", fmt.Sprint(pager.Offset+pager.Limit)).String() }
					}
					hx-target="#proxies-list"
					hx-swap="outerHTML"
				>
					<i class="if if-chevron-right" aria-hidden="true"></i>
				</a>
			</li>
		} else {
			<li class="page-item disabled">
				<a class="page-link" href="#" aria-label="Next">
					<i class="if if-chevron-right" aria-hidden="true"></i>
				</a>
			</li>
		}
	</ul>
}
