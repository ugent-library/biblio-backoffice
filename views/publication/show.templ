package publication

import (
	"fmt"
	"github.com/samber/lo"
	"github.com/ugent-library/biblio-backoffice/ctx"
	"github.com/ugent-library/biblio-backoffice/identifiers"
	"github.com/ugent-library/biblio-backoffice/localize"
	"github.com/ugent-library/biblio-backoffice/models"
	"github.com/ugent-library/biblio-backoffice/views"
	"github.com/ugent-library/biblio-backoffice/views/display"
	"github.com/ugent-library/biblio-backoffice/views/form"
	"github.com/ugent-library/biblio-backoffice/views/shared"
	"github.com/ugent-library/okay"
)

templ Show(c *ctx.Ctx, p *models.Publication, redirectURL string) {
	@views.PageLayout(c, views.PageLayoutArgs{
		Title: c.Loc.Get("publication.page.show.title"),
		Breadcrumbs: []views.Breadcrumb{
			{LabelID: "publications", URL: c.PathTo("publications")},
			{LabelID: "publication"},
		},
	}) {
		<div class="w-100 u-scroll-wrapper">
			<div class="bg-white">
				<div id="summary">
					<div class="mx-6">
						<div class="bc-toolbar bc-toolbar-md-responsive flex-column-reverse flex-md-row w-100">
							<div class="bc-toolbar-left">
								<div class="d-inline-flex align-items-center flex-wrap">
									@views.BadgeStatus(p.Status)
									if p.Locked {
										<span class="c-subline text-nowrap me-3 pe-3 border-end" data-bs-toggle="tooltip" data-bs-title="Locked for editing" data-bs-placement="bottom">
											<i class="if if-lock if--small if--muted"></i>
											<span class="text-muted c-body-small ms-2">Locked</span>
										</span>
									}
									<span class="c-subline text-nowrap me-3 pe-3 border-end">
										{ c.Loc.Get("publication_types." + p.Type) }:
										if p.Classification != "" {
											{ p.Classification }
										}
									</span>
									if mainFile := p.MainFile(); mainFile != nil {
										<span class={ "c-subline", "me-3", "pe-3", templ.KV("border-end", mainFile.AccessLevel == "info:eu-repo/semantics/embargoedAccess") }>
											if mainFile.AccessLevel == "info:eu-repo/semantics/openAccess" {
												<i class="if if-download if--small if--success"></i>
												<span class="c-subline text-truncate">{ c.Loc.Get("publication_file_access_levels." + mainFile.AccessLevel) }</span>
											} else if mainFile.AccessLevel == "info:eu-repo/semantics/embargoedAccess" {
												<i class="if if-time if--small if--muted"></i>
												<span class="c-subline text-muted">{ c.Loc.Get("publication_file_access_levels." + mainFile.AccessLevel) }</span>
											} else if mainFile.AccessLevel == "info:eu-repo/semantics/restrictedAccess" {
												<i class="if if-ghent-university if--small if--primary"></i>
												<span class="c-subline text-muted">{ c.Loc.Get("publication_file_access_levels." + mainFile.AccessLevel) }</span>
											} else if mainFile.AccessLevel == "info:eu-repo/semantics/closedAccess" {
												<i class="if if-eye-off if--small if--muted"></i>
												<span class="c-subline text-muted">{ c.Loc.Get("publication_file_access_levels." + mainFile.AccessLevel) }</span>
											}
										</span>
										if mainFile.AccessLevel == "info:eu-repo/semantics/embargoedAccess" {
											<span class="c-subline me-3 pe-3 border-end">
												if mainFile.AccessLevelDuringEmbargo == "info:eu-repo/semantics/closedAccess" {
													<i class="if if-eye-off if--small if--muted"></i>
												} else {
													<i class="if if-ghent-university if--small if--primary"></i>
												}
												<span class="c-subline text-truncate">{ c.Loc.Get("publication_file_access_levels_during_embargo." + mainFile.AccessLevelDuringEmbargo) }</span>
											</span>
											<span class="c-subline me-3 pe-3">
												if mainFile.AccessLevelAfterEmbargo == "info:eu-repo/semantics/openAccess" {
													<i class="if if-download if--small if--success"></i>
												} else {
													<i class="if if-ghent-university if--small if--primary"></i>
												}
												{ c.Loc.Get("publication_file_access_levels_after_embargo." + mainFile.AccessLevelAfterEmbargo) } from { mainFile.EmbargoDate }
											</span>
										}
									} else if !p.Extern {
										<span class="c-subline me-3 pe-3">
											<em>Add document type: full text</em>
										</span>
									}
								</div>
							</div>
							<div class="bc-toolbar-right justify-content-end">
								if c.Repo.CanDeletePublication(c.User, p) {
									<div class="bc-toolbar-item">
										<div class="dropdown dropleft">
											<button
												class="btn btn-outline-secondary btn-icon-only"
												type="button"
												data-bs-toggle="dropdown"
												aria-haspopup="true"
												aria-expanded="false"
											>
												<i class="if if-more"></i>
											</button>
											<div class="dropdown-menu">
												<a
													class="dropdown-item"
													href="#"
													hx-get={ c.PathTo("publication_confirm_delete", "id", p.ID, "redirect-url", redirectURL).String() }
													hx-target="#modals"
												>
													<i class="if if-delete"></i>
													<span>Delete</span>
												</a>
											</div>
										</div>
									</div>
								}
								<div class="bc-toolbar-item">
									if c.Repo.CanCurate(c.User) && p.Locked {
										<button
											class="btn btn-outline-secondary"
											hx-post={ c.PathTo("publication_unlock", "id", p.ID, "redirect-url", c.CurrentURL.String()).String() }
											hx-swap="none"
										>
											<i class="if if-lock-unlock"></i>
											<span class="btn-text d-md-none d-lg-inline">Unlock record</span>
										</button>
									} else if c.Repo.CanCurate(c.User) {
										<button
											class="btn btn-outline-secondary"
											hx-post={ c.PathTo("publication_lock", "id", p.ID, "redirect-url", c.CurrentURL.String()).String() }
											hx-swap="none"
										>
											<i class="if if-lock"></i>
											<span class="btn-text d-md-none d-lg-inline">Lock record</span>
										</button>
									}
								</div>
								if c.Repo.CanWithdrawPublication(c.User, p) {
									<div class="bc-toolbar-item">
										<button
											class="btn btn-outline-danger"
											hx-get={ c.PathTo("publication_confirm_withdraw", "id", p.ID, "redirect-url", c.CurrentURL.String()).String() }
											hx-target="#modals"
										>
											<i class="if if-arrow-go-back"></i>
											<span class="btn-text">Withdraw</span>
										</button>
									</div>
								}
								if c.Repo.CanPublishPublication(c.User, p) && p.Status == "returned" {
									<div class="bc-toolbar-item">
										<button
											class="btn btn-success"
											hx-get={ c.PathTo("publication_confirm_republish", "id", p.ID, "redirect-url", c.CurrentURL.String()).String() }
											hx-target="#modals"
										>
											<div class="btn-text">Republish <span class="d-md-none d-lg-inline">to Biblio</span></div>
										</button>
									</div>
								}
								if c.Repo.CanPublishPublication(c.User, p) &&  p.Status != "returned" {
									<div class="bc-toolbar-item">
										<button
											class="btn btn-success"
											hx-get={ c.PathTo("publication_confirm_publish", "id", p.ID, "redirect-url", c.CurrentURL.String()).String() }
											hx-target="#modals"
										>
											<div class="btn-text">Publish <span class="d-md-none d-lg-inline">to Biblio</span></div>
										</button>
									</div>
								}
							</div>
						</div>
						<h4 class="w-100 mb-0 mb-lg-2">
							if (p.Type == "issue_editor") || (p.Type == "book_editor") {
								if len(p.Editor) == 1 {
									{ p.Editor[0].LastName() }, { p.Editor[0].FirstName() }, editor.
								}
								if len(p.Editor) > 1 {
									{ p.Editor[0].LastName() }, { p.Editor[0].FirstName() }, et al., editors.
								}
							} else {
								if len(p.Author) > 0 {
									{ p.Author[0].LastName() }, { p.Author[0].FirstName() }
								}
								if len(p.Author) > 1 {
									et al.
								}
							}
							if p.Title != "" {
								<em>"{ p.Title }."</em>
							} else {
								<em>"Untitled record."</em>
							}
							if p.Publication != "" {
								{ p.Publication },
							}
							if p.Volume != "" {
								vol. { p.Volume },
							}
							if p.Issue != "" {
								no. { p.Issue },
							}
							if p.PageFirst != "" || p.PageLast != "" {
								if p.PageFirst != "" {
									pp. { p.PageFirst }
								}
								<span>-</span>
								if p.PageLast != "" {
									{ p.PageLast },
								}
							} else {
								if p.PageCount != "" {
									{ p.PageCount } pages,
								}
							}
							if (p.Type != "conference") && p.Publisher != "" {
								{ p.Publisher },
							}
							if (p.Type == "conference") && p.ConferenceName != "" {
								{ p.ConferenceName },
							}
							if p.Year != "" {
								{ p.Year }.
							}
						</h4>
						<div class="bc-toolbar bc-toolbar-lg-responsive flex-md-row">
							<div class="bc-toolbar-left">
								<div class="bc-toolbar-item d-block">
									<div class="d-block pe-3 my-2">
										<div class="input-group">
											<button type="button" class="btn btn-outline-secondary btn-sm" data-clipboard={ p.ID }>
												<i class="if if-copy text-muted "></i>
												<span class="btn-text ms-0 me-1">Biblio ID</span>
											</button>
											<code class="c-code">{ p.ID }</code>
										</div>
									</div>
								</div>
							</div>
							<div class="bc-toolbar-right">
								<div class="bc-toolbar-item">
									<p class="c-body-small text-muted d-inline-block me-2 me-md-0">
										{ views.CreatedBy(c, p.DateCreated, p.Creator) }
									</p>
									<p class="c-body-small text-muted d-inline-block ms-md-2">
										{ views.UpdatedBy(c, p.DateUpdated, p.User, p.LastUser) }
									</p>
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="bc-navbar bc-navbar--auto bc-navbar--white bc-navbar--bordered-bottom">
					<div class="bc-toolbar bc-toolbar--auto">
						<div class="bc-toolbar-left">
							<div class="bc-toolbar-item" id="show-nav">
								@SubNav(c, p, redirectURL)
							</div>
						</div>
						<div class="bc-toolbar-right"></div>
					</div>
				</div>
			</div>
			<div class="d-flex flex-grow-1 flex-shrink-1 overflow-hidden">
				<div id="show-sidebar"></div>
				<div
					class="u-scroll-wrapper__body p-6"
					id="show-content"
					hx-get={ c.PathTo("publication_"+c.SubNav, "id", p.ID, "redirect-url", redirectURL).String() }
					hx-trigger="load delay:100ms"
					hx-target="#show-content"
				></div>
				@shared.DetailsSidebar(c,
					shared.DetailsSidebarStepArgs{
						ID:           "message",
						Icon:         "if-message",
						Title:        "Biblio messages",
						Component:    messagesPane(c, p),
						Notification: p.Message != "",
					},
					shared.DetailsSidebarStepArgs{
						ID:        "history",
						Icon:      "if-time",
						Title:     "Activity history",
						Component: historyPane(c, p),
					},
					shared.DetailsSidebarStepArgs{
						ID:        "info",
						Icon:      "if-info-circle",
						Title:     "Details",
						Component: infoPane(c, p),
					})
			</div>
		</div>
	}
}

templ messagesPane(c *ctx.Ctx, p *models.Publication) {
	<div hx-get={ c.PathTo("publication_messages", "id", p.ID).String() } hx-trigger="load delay:100ms">
		Loading messages&hellip;
	</div>
}

type MessagesArgs struct {
	Publication *models.Publication
	Errors      *okay.Errors
	Conflict    bool
}

templ Messages(c *ctx.Ctx, args MessagesArgs) {
	<div class="form-group">
		if args.Conflict {
			<div class="alert alert-danger mb-4" role="alert">
				<i class="if if--error if-error-circle-fill"></i>
				The publication you are editing has been changed by someone else. Please copy your edits, then refresh this form.
			</div>
		}
		@form.Errors(localize.ValidationErrors(c.Loc, args.Errors))
		<div class="bc-toolbar gap-2">
			<div class="bc-toolbar-left">
				<label class="col-form-label">Messages from and for Biblio team</label>
			</div>
			<div class="bc-toolbar-right">
				if !args.Conflict && c.Repo.CanEditPublication(c.User, args.Publication) {
					<button
						class="btn btn-primary btn-sm"
						hx-put={ c.PathTo("publication_messages_update_biblio_message", "id", args.Publication.ID).String() }
						hx-headers={ fmt.Sprintf(`{"If-Match": "%s"}`, args.Publication.SnapshotID) }
						hx-include="closest .form-group"
						hx-target="closest .sidebar-content"
						hx-swap="innerHTML"
					>Save</button>
				}
			</div>
		</div>
		@form.TextArea(form.TextAreaArgs{
			FieldArgs: form.FieldArgs{
				Name:     "message",
				Error:    localize.ValidationErrorAt(c.Loc, args.Errors, "/message"),
				Theme:    form.ThemeVertical,
				Readonly: !c.Repo.CanEditPublication(c.User, args.Publication),
			},
			Value: args.Publication.Message,
			Rows:  15,
		})
		<p class="text-muted mt-2">Have any questions or changes to report? Mail to <a href="mailto:biblio@ugent.be">biblio@ugent.be</a>.</p>
	</div>
	if c.Repo.CanCurate(c.User) {
		<div class="form-group">
			<div class="bc-toolbar gap-2">
				<div class="bc-toolbar-left">
					<label class="col-form-label">Librarian tags</label>
				</div>
				<div class="bc-toolbar-right">
					if !args.Conflict {
						<button
							class="btn btn-primary btn-sm"
							hx-put={ c.PathTo("publication_messages_update_reviewer_tags", "id", args.Publication.ID).String() }
							hx-headers={ fmt.Sprintf(`{"If-Match": "%s"}`, args.Publication.SnapshotID) }
							hx-include="closest .form-group"
							hx-target="closest .sidebar-content"
							hx-swap="innerHTML"
						>Save</button>
					}
				</div>
			</div>
			@form.Tags(form.TagsArgs{
				FieldArgs: form.FieldArgs{
					Name:  "reviewer_tags",
					Error: localize.ValidationErrorAt(c.Loc, args.Errors, "/message"),
					Theme: form.ThemeVertical,
					Help:  c.Loc.Get("builder.keyword.help"),
				},
				Values: args.Publication.ReviewerTags,
			})
			<p class="text-muted mt-2">For internal use only.</p>
		</div>
		<div class="form-group">
			<div class="bc-toolbar gap-2">
				<div class="bc-toolbar-left">
					<label class="col-form-label">Librarian note</label>
				</div>
				<div class="bc-toolbar-right">
					if !args.Conflict {
						<button
							class="btn btn-primary btn-sm"
							hx-put={ c.PathTo("publication_messages_update_reviewer_note", "id", args.Publication.ID).String() }
							hx-headers={ fmt.Sprintf(`{"If-Match": "%s"}`, args.Publication.SnapshotID) }
							hx-include="closest .form-group"
							hx-target="closest .sidebar-content"
							hx-swap="innerHTML"
						>Save</button>
					}
				</div>
			</div>
			@form.TextArea(form.TextAreaArgs{
				FieldArgs: form.FieldArgs{
					Name:  "reviewer_note",
					Error: localize.ValidationErrorAt(c.Loc, args.Errors, "/reviewer_note"),
					Theme: form.ThemeVertical,
				},
				Value: args.Publication.ReviewerNote,
				Rows:  15,
			})
			<p class="text-muted mt-2">For internal use only.</p>
		</div>
	}
}

templ historyPane(c *ctx.Ctx, p *models.Publication) {
	<div hx-get={ c.PathTo("publication_recent_activity", "id", p.ID).String() } hx-trigger="load delay:100ms">
		Loading recent activity&hellip;
	</div>
}

templ RecentActivity(c *ctx.Ctx, acts []views.Activity, p *models.Publication) {
	@views.ActivityList(c, acts, lo.ToPtr(p.ID))
}

templ infoPane(c *ctx.Ctx, p *models.Publication) {
	<ul class="c-activity-list">
		<div class="form-group">
			<label class="form-label form-label-top">Created by</label>
			<p>
				if p.Creator != nil {
					{ p.Creator.FullName }
				} else {
					[missing]
				}
			</p>
		</div>
		<div class="form-group">
			<label class="form-label form-label-top">Creation date</label>
			<p>{ p.DateCreated.Format("2006-01-02") }</p>
		</div>
		if p.SourceDB != "" {
			<div class="form-group">
				<label class="form-label form-label-top">Source</label>
				<p>{ lo.Capitalize(p.SourceDB) }</p>
			</div>
		}
		if p.DOI != "" {
			<div class="form-group">
				<label class="form-label form-label-top">DOI</label>
				@display.Link(p.DOI, identifiers.DOI.Resolve)
			</div>
		}
		if p.WOSID != "" {
			<div class="form-group">
				<label class="form-label form-label-top">Web of Science</label>
				@display.Link(p.WOSID, identifiers.WebOfScience.Resolve)
			</div>
		}
		if p.PubMedID != "" {
			<div class="form-group">
				<label class="form-label form-label-top">PubMed</label>
				@display.Link(p.PubMedID, identifiers.PubMed.Resolve)
			</div>
		}
		@infoList("ISSN", p.ISSN)
		@infoList("E-ISSN", p.EISSN)
		@infoList("ISBN", p.ISBN)
		@infoList("E-ISBN", p.EISBN)
		if p.Status =="public" {
			<div class="form-group">
				<label class="form-label form-label-top">Public Biblio Location</label>
				<p>
					<a href={ templ.URL(fmt.Sprintf("%s/publication/%s", c.FrontendURL, p.ID)) } target="_blank">
						{ p.ID }
						<i class="if if--small if-external-link"></i>
					</a>
				</p>
			</div>
		}
	</ul>
}

templ infoList(label string, list []string) {
	if len(list) > 0 {
		<div class="form-group">
			<label class="form-label form-label-top">{ label }</label>
			for _, item := range list {
				<p>{ item }</p>
			}
		</div>
	}
}
