package views

import (
	"context"
	"fmt"
	"github.com/ugent-library/biblio-backoffice/ctx"
	"github.com/ugent-library/biblio-backoffice/models"
	"github.com/ugent-library/biblio-backoffice/views/aria"
	"github.com/ugent-library/biblio-backoffice/views/form"
	"github.com/ugent-library/biblio-backoffice/vocabularies"
	"io"
)

func facetShortValue(values []string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		w.Write([]byte("&mdash;"))
		for i, v := range values {
			if i > 2 {
				w.Write([]byte(", &hellip;"))
				break
			}
			if i > 0 {
				w.Write([]byte(", "))
			}
			w.Write([]byte(v))
		}
		return nil
	})
}

func filterToLabels(c *ctx.Ctx, vals []string, locPrefix string) []string {
	labels := make([]string, 0, len(vals))
	for _, val := range vals {
		if locPrefix == "" {
			labels = append(labels, val)
		} else {
			labels = append(labels, c.Loc.Get(locPrefix+"."+val))
		}
	}
	return labels
}

type FacetArgs struct {
	FieldName      string
	Title          string
	LocPrefix      string
	LocPrefixShort string
	FacetValues    models.FacetValues
	HideSelectAll  bool
}

templ Facet(c *ctx.Ctx, args FacetArgs, searchArgs *models.SearchArgs) {
	<div
		class={ "dropdown", templ.KV("toggle-on", searchArgs.IsCollapsedFacet(args.FieldName)) }
		data-facet-dropdown={ args.FieldName }
	>
		<a
			if searchArgs.HasFilter(args.FieldName) {
				class="badge bg-primary me-3"
			} else {
				if args.FacetValues.HasMatches() {
					class="badge badge-default me-3"
				} else {
					class="badge badge-light me-3"
				}
			}
			data-bs-toggle="dropdown"
			data-persist="true"
			aria-haspopup="true"
			aria-expanded="false"
			role="button"
		>
			<span class="badge-text">{ args.Title }</span>
			if filters := searchArgs.FiltersFor(args.FieldName); len(filters) > 0 {
				<span class="badge-value ms-2">
					@facetShortValue(filterToLabels(c, filters, args.LocPrefixShort))
				</span>
			}
			<i class="if if-caret-down"></i>
		</a>
		<form class="dropdown-menu" method="GET" action={ URL(c.CurrentURL).ClearQuery().SafeURL() }>
			<div class="bc-navbar bc-navbar--bordered-bottom">
				<div class="bc-toolbar bc-toolbar--auto">
					<div class="bc-toolbar-left">
						<h4 class="text-nowrap">{ args.Title }</h4>
					</div>
					if !args.HideSelectAll {
						<div class="bc-toolbar-right">
							<button type="button" class="btn btn-link form-check-all">Select all</button>
						</div>
					}
				</div>
			</div>
			if searchArgs.Query != "" {
				<input type="hidden" name="q" value={ searchArgs.Query }/>
			}
			for _, sort := range searchArgs.Sort {
				<input type="hidden" name="sort" value={ sort }/>
			}
			for field, vals := range searchArgs.Filters {
				if field != args.FieldName {
					for _, val := range vals {
						<input type="hidden" name={ fmt.Sprintf("f[%s]", field) } value={ val }/>
					}
				}
			}
			<div class="dropdown-menu__body border-bottom">
				<div class="d-flex flex-column gap-4">
					for i, f := range args.FacetValues {
						<div class="form-check">
							<input
								class="form-check-input"
								id={ fmt.Sprintf("filter-%s-%d", args.FieldName, i) }
								type="checkbox"
								name={ fmt.Sprintf("f[%s]", args.FieldName) }
								value={ f.Value }
								if searchArgs.HasFilter(args.FieldName, f.Value) {
									checked
								}
							/>
							<label class="form-check-label" for={ fmt.Sprintf("filter-%s-%d", args.FieldName, i) }>
								if args.LocPrefix == "" {
									{ fmt.Sprintf("%s (%d)", f.Value, f.Count) }
								} else {
									{ fmt.Sprintf("%s (%d)", c.Loc.Get(args.LocPrefix + "." + f.Value), f.Count) }
								}
							</label>
						</div>
					}
				</div>
			</div>
			<div class="bc-navbar bc-navbar--large">
				<button class="btn btn-primary d-grid w-100" type="submit">Apply filter</button>
			</div>
		</form>
	</div>
}

templ FacetSince(c *ctx.Ctx, fieldName string, title string, description string, searchArgs *models.SearchArgs) {
	<div
		class={ "dropdown", templ.KV("toggle-on", searchArgs.IsCollapsedFacet(fieldName)) }
		data-facet-dropdown={ fieldName }
	>
		<a
			if searchArgs.HasFilter(fieldName) {
				class="badge bg-primary me-3"
			} else {
				class="badge badge-default me-3"
			}
			data-bs-toggle="dropdown"
			data-persist="true"
			aria-haspopup="true"
			aria-expanded="false"
			role="button"
		>
			<span class="badge-text">{ title }</span>
			if filter := searchArgs.FilterFor(fieldName); filter != "" {
				<span class="badge-value ms-2">&ndash; { filter }</span>
			}
			<i class="if if-caret-down"></i>
		</a>
		<form class="dropdown-menu" method="GET" action={ URL(c.CurrentURL).ClearQuery().SafeURL() }>
			<div class="bc-navbar bc-navbar--bordered-bottom">
				<div class="bc-toolbar bc-toolbar--auto">
					<div class="bc-toolbar-left">
						<h4 class="text-nowrap">{ title }</h4>
					</div>
				</div>
			</div>
			<div class="dropdown-menu__body">
				<label class="col-form-label" for={ fmt.Sprintf("f-%s", fieldName) }>{ description }</label>
				<input
					class="form-control"
					type="text"
					id={ fmt.Sprintf("f-%s", fieldName) }
					name={ fmt.Sprintf("f[%s]", fieldName) }
					value={ searchArgs.FilterFor(fieldName) }
					{ aria.Attributes(c.Loc.Get("facets.facet_since.help"), form.FieldHelpID(fieldName))... }
				/>
				<small id={ form.FieldHelpID(fieldName) } class="form-text">{ c.Loc.Get("facets.facet_since.help") }</small>
			</div>
			<div class="bc-navbar bc-navbar--large">
				<button class="btn btn-primary d-grid w-100" type="submit">Apply filter</button>
			</div>
			if searchArgs.Query != "" {
				<input type="hidden" name="q" value={ searchArgs.Query }/>
			}
			for _, sort := range searchArgs.Sort {
				<input type="hidden" name="sort" value={ sort }/>
			}
			for f, vals := range searchArgs.Filters {
				if f != fieldName {
					for _, val := range vals {
						<input type="hidden" name={ fmt.Sprintf("f[%s]", f) } value={ val }/>
					}
				}
			}
		</form>
	</div>
}

templ FacetLine() {
	<div class="badge-list">
		{ children... }
	</div>
}

templ Facets(c *ctx.Ctx, searchArgs *models.SearchArgs) {
	<div
		class={ "bc-toolbar", "bc-toolbar-lg-responsive", "bc-toolbar--auto", templ.KV("toggle-zone", len(searchArgs.FacetLines) > 2) }
	>
		<div class="bc-toolbar-left">
			<div class="bc-toolbar-item">
				{ children... }
			</div>
		</div>
		<div class="bc-toolbar-right">
			<div class="bc-toolbar-item">
				<div class="c-button-toolbar">
					if len(searchArgs.FacetLines) > 2 {
						<div class="form-chec ps-0">
							<input
								type="checkbox"
								id="show-all-facet-filters-toggle"
								class="btn-check toggle"
								autocomplete="off"
								if searchArgs.HasActiveCollapsedFacets() {
									checked
								}
							/>
							<label for="show-all-facet-filters-toggle" class="btn btn-link toggle-off">
								<i class="if if-chevron-down u-no-transition"></i>
								<span class="btn-text">
									<span class="u-no-transition">Show more <span class="d-none d-xl-inline-block">filters</span></span>
								</span>
							</label>
							<label for="show-all-facet-filters-toggle" class="btn btn-link toggle-on">
								<i class="if if-chevron-up u-no-transition"></i>
								<span class="btn-text">
									<span class="u-no-transition">Show less <span class="d-none d-xl-inline-block">filters</span></span>
								</span>
							</label>
						</div>
					}
					<form method="GET" action={ URL(c.CurrentURL).ClearQuery().SafeURL() }>
						if scope := searchArgs.FilterFor("scope"); scope != "" {
							<input type="hidden" name="f[scope]" value={ scope }/>
						}
						if searchArgs.Query != "" {
							<input type="hidden" name="q" value={ searchArgs.Query }/>
						}
						for _, sort := range searchArgs.Sort {
							<input type="hidden" name="sort" value={ sort }/>
						}
						<button class="btn btn-link btn-muted text-muted" type="submit">
							<i class="if if-close"></i>
							<span class="btn-text">Reset <span class="d-none d-xl-inline-block">filters</span></span>
						</button>
					</form>
				</div>
			</div>
		</div>
	</div>
}

templ Query(c *ctx.Ctx, searchArgs *models.SearchArgs) {
	<form class="mb-4" method="GET" action={ URL(c.CurrentURL).ClearQuery().SafeURL() }>
		for field, values := range searchArgs.Filters {
			for _, val := range values {
				<input type="hidden" name={ fmt.Sprintf("f[%s]", field) } value={ val }/>
			}
		}
		<div class="row">
			<div class="col">
				<div class="input-group flex-nowrap">
					<label class="visually-hidden" for="q">Search</label>
					<input class="form-control" type="search" id="q" name="q" value={ searchArgs.Query } placeholder="Search..." autocomplete="off" data-submit-on-clear/>
					<button type="submit" class="btn btn-outline-primary" type="button">
						<i class="if if-search"></i>
						<span class="btn-text">Search</span>
					</button>
				</div>
			</div>
			<div class="col-3">
				<div class="d-flex align-items-center">
					<label class="pe-3 text-nowrap" for="sort">Sort by</label>
					<select class="form-select form-change-submit" name="sort" id="sort">
						for _, sort := range vocabularies.Map["publication_sorts"] {
							<option
								value={ sort }
								if searchArgs.HasSort(sort) {
									selected
								}
							>
								{ c.Loc.Get("publication_sorts." + sort) }
							</option>
						}
					</select>
				</div>
			</div>
		</div>
	</form>
}
