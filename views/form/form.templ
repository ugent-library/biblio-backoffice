package form

import "fmt"

templ Errors(errors []string) {
	if len(errors) > 0 {
		<div class="alert alert-danger">
			<ul class="ps-3">
				for _, err := range errors {
					<li>{ err }</li>
				}
			</ul>
		</div>
	}
}

type TextArgs struct {
	Label    string
	Name     string
	Value    string
	Readonly bool
	Tooltip  string
	Required bool
	Error    string
	Cols     int
	Help     string
}

templ Text(args TextArgs) {
	<div class={ "mb-6", "row", templ.KV("is-invalid", args.Error != "") }>
		<label class="col-lg-3 col-form-label mt-2" for={ args.Name }>
			{ args.Label }
			if args.Tooltip != "" {
				<a class="text-muted px-2" href="#" data-bs-container="body" data-bs-toggle="popover" data-bs-placement="right" data-bs-content={ args.Tooltip }>
					<i class="if if-info-circle if--small"></i>
					<span class="visually-hidden">More info</span>
				</a>
			}
			if args.Required {
				&nbsp;<span class="badge badge-outline-primary badge-sm">Required</span>
			}
		</label>
		<div class={ fmt.Sprintf("col-lg-%d", args.Cols) }>
			<input
				class={ "form-control", templ.KV("is-invalid", args.Error != "") }
				id={ args.Name }
				name={ args.Name }
				type="text"
				value={ args.Value }
				readonly?={ args.Readonly }
			/>
			if args.Error != "" {
				<small class="invalid-feedback">{ args.Error }</small>
			}
			if args.Help != "" {
				<small class="form-text text-muted">
					@html(args.Help)
				</small>
			}
		</div>
	</div>
}

type TextRepeatArgs struct {
	Label    string
	Name     string
	Values   []string
	Tooltip  string
	Required bool
	Error    string
	Cols     int
	Help     string
}

templ TextRepeat(args TextRepeatArgs) {
	<div class={ "mb-6", "row", templ.KV("is-invalid", args.Error != "") }>
		<label class="col-lg-3 col-form-label mt-2" for={ fmt.Sprintf("%s-0", args.Name) }>
			{ args.Label }
			if args.Tooltip != "" {
				<a class="text-muted px-2" href="#" data-bs-container="body" data-bs-toggle="popover" data-bs-placement="right" data-bs-content={ args.Tooltip }>
					<i class="if if-info-circle if--small"></i>
					<span class="visually-hidden">More info</span>
				</a>
			}
			if args.Required {
				&nbsp;<span class="badge badge-outline-primary badge-sm">Required</span>
			}
		</label>
		<div class={ fmt.Sprintf("col-lg-%d", args.Cols), "form-values" }>
			for i, v := range args.Values {
				<div class="form-value">
					<div class="d-flex mb-3">
						<input
							class={ "form-control", templ.KV("is-invalid", args.Error != "") }
							name={ args.Name }
							id={ fmt.Sprintf("%s-%d", args.Name, i) }
							data-tmpl-id={ fmt.Sprintf("%s-{i}", args.Name) }
							type="text"
							value={ v }
						/>
						<button class="btn btn-link-muted btn-icon-only ms-3 form-value-delete" type="button">
							<i class="if if-delete"></i>
							<span class="visually-hidden">Delete</span>
						</button>
					</div>
				</div>
			}
			<div class="mb-3 form-value">
				<div class="d-flex">
					<input
						class={ "form-control", templ.KV("is-invalid", args.Error != "") }
						name={ args.Name }
						id={ fmt.Sprintf("%s-%d", args.Name, len(args.Values)) }
						data-tmpl-id={ fmt.Sprintf("%s-{i}", args.Name) }
						type="text"
						value=""
					/>
					<button class="btn btn-outline-primary btn-icon-only ms-3 form-value-add" type="button">
						<i class="if if-add"></i>
						<span class="visually-hidden">Add</span>
					</button>
				</div>
			</div>
			if args.Error != "" {
				<small class="invalid-feedback d-block">{ args.Error }</small>
			}
			if args.Help != "" {
				<small class="form-text text-muted">
					@html(args.Help)
				</small>
			}
		</div>
	</div>
}

// TODO remove need for this
func html(text string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		_, err := io.WriteString(w, text)
		return err
	})
}
